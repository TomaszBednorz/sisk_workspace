
CAN_Master1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eb4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  080070b4  080070b4  000170b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800724c  0800724c  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800724c  0800724c  0001724c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007254  08007254  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007254  08007254  00017254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800725c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  200000ec  08007348  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08007348  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c10  00000000  00000000  0002011a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ce2  00000000  00000000  00039d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  0003da10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0003ee68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ba96  00000000  00000000  000400e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c167  00000000  00000000  0006bb7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001070c1  00000000  00000000  00087ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018eda6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005630  00000000  00000000  0018edf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000ec 	.word	0x200000ec
 800021c:	00000000 	.word	0x00000000
 8000220:	0800709c 	.word	0x0800709c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000f0 	.word	0x200000f0
 800023c:	0800709c 	.word	0x0800709c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <LSM6DSO_Init>:
 * \param[in] None
 * 
 * \retval None
 */
void LSM6DSO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
    uint8_t config_data[LSM6DSO_CFG_BUF_LEN] = {0};
 80005ea:	2300      	movs	r3, #0
 80005ec:	80bb      	strh	r3, [r7, #4]

    /* Accelerometer/gyro configuration */
    config_data[0] = (uint8_t)((LSM6DSO_ACC_HIGH_RESOLUTION << LSM6DSO_LPF2_XL_EN_POS) |
 80005ee:	2348      	movs	r3, #72	; 0x48
 80005f0:	713b      	strb	r3, [r7, #4]
                               (LSM6DSO_ACC_FULL_SCALE << LSM6DSO_FS0_XL_POS) |
                               (LSM6DSO_ACC_ODR << LSM6DSO_ODR_XL0_POS));
    config_data[1] = (uint8_t)((LSM6DSO_GYRO_125DPS << LSM6DSO_FS_125_POS) |
 80005f2:	2344      	movs	r3, #68	; 0x44
 80005f4:	717b      	strb	r3, [r7, #5]
                               (LSM6DSO_GYRO_FULL_SCALE << LSM6DSO_FS0_G_POS) |
                               (LSM6DSO_GYRO_ODR << LSM6DSO_ODR_G0_POS));
    LSM6DSO_MultipleWrite(LSM6DSO_REG_CTRL1_XL, 2, config_data);
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	461a      	mov	r2, r3
 80005fa:	2102      	movs	r1, #2
 80005fc:	2010      	movs	r0, #16
 80005fe:	f000 f983 	bl	8000908 <LSM6DSO_MultipleWrite>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <LSM6DSO_GetResults>:
 * \param[in] results Results data
 * 
 * \retval None
 */
void LSM6DSO_GetResults(LSM6DSO_Result_t *results)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    results->acceleration.x = LSM6DSO_Result.acceleration.x;
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <LSM6DSO_GetResults+0x5c>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	b21a      	sxth	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	801a      	strh	r2, [r3, #0]
    results->acceleration.y = LSM6DSO_Result.acceleration.y;
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <LSM6DSO_GetResults+0x5c>)
 8000620:	885b      	ldrh	r3, [r3, #2]
 8000622:	b21a      	sxth	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	805a      	strh	r2, [r3, #2]
    results->acceleration.z = LSM6DSO_Result.acceleration.z;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <LSM6DSO_GetResults+0x5c>)
 800062a:	889b      	ldrh	r3, [r3, #4]
 800062c:	b21a      	sxth	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	809a      	strh	r2, [r3, #4]
    results->angular_rate.x = LSM6DSO_Result.angular_rate.x;
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <LSM6DSO_GetResults+0x5c>)
 8000634:	88db      	ldrh	r3, [r3, #6]
 8000636:	b21a      	sxth	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	80da      	strh	r2, [r3, #6]
    results->angular_rate.y = LSM6DSO_Result.angular_rate.y;
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <LSM6DSO_GetResults+0x5c>)
 800063e:	891b      	ldrh	r3, [r3, #8]
 8000640:	b21a      	sxth	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	811a      	strh	r2, [r3, #8]
    results->angular_rate.z = LSM6DSO_Result.angular_rate.z;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <LSM6DSO_GetResults+0x5c>)
 8000648:	895b      	ldrh	r3, [r3, #10]
 800064a:	b21a      	sxth	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	815a      	strh	r2, [r3, #10]
    results->temperature = LSM6DSO_Result.temperature;
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <LSM6DSO_GetResults+0x5c>)
 8000652:	899b      	ldrh	r3, [r3, #12]
 8000654:	b21a      	sxth	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	819a      	strh	r2, [r3, #12]
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20000108 	.word	0x20000108

0800066c <LSM6DSO_ReadAcceleration>:
 * \param[in] None
 * 
 * \retval None
 */
void LSM6DSO_ReadAcceleration(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
    uint8_t acc_data[LSM6DSO_ACC_DATA_LEN];
    LSM6DSO_MultipleRead(LSM6DSO_REG_OUTX_L_A, LSM6DSO_ACC_DATA_LEN, acc_data);
 8000672:	463b      	mov	r3, r7
 8000674:	461a      	mov	r2, r3
 8000676:	2106      	movs	r1, #6
 8000678:	2028      	movs	r0, #40	; 0x28
 800067a:	f000 f88d 	bl	8000798 <LSM6DSO_MultipleRead>

    LSM6DSO_Result.acceleration.x = (int16_t)((acc_data[1] << 8U) | acc_data[0]);
 800067e:	787b      	ldrb	r3, [r7, #1]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	b21a      	sxth	r2, r3
 8000684:	783b      	ldrb	r3, [r7, #0]
 8000686:	b21b      	sxth	r3, r3
 8000688:	4313      	orrs	r3, r2
 800068a:	b21a      	sxth	r2, r3
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <LSM6DSO_ReadAcceleration+0x50>)
 800068e:	801a      	strh	r2, [r3, #0]
    LSM6DSO_Result.acceleration.y = (int16_t)((acc_data[3] << 8U) | acc_data[2]);
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	b21a      	sxth	r2, r3
 8000696:	78bb      	ldrb	r3, [r7, #2]
 8000698:	b21b      	sxth	r3, r3
 800069a:	4313      	orrs	r3, r2
 800069c:	b21a      	sxth	r2, r3
 800069e:	4b07      	ldr	r3, [pc, #28]	; (80006bc <LSM6DSO_ReadAcceleration+0x50>)
 80006a0:	805a      	strh	r2, [r3, #2]
    LSM6DSO_Result.acceleration.z = (int16_t)((acc_data[5] << 8U) | acc_data[4]);
 80006a2:	797b      	ldrb	r3, [r7, #5]
 80006a4:	021b      	lsls	r3, r3, #8
 80006a6:	b21a      	sxth	r2, r3
 80006a8:	793b      	ldrb	r3, [r7, #4]
 80006aa:	b21b      	sxth	r3, r3
 80006ac:	4313      	orrs	r3, r2
 80006ae:	b21a      	sxth	r2, r3
 80006b0:	4b02      	ldr	r3, [pc, #8]	; (80006bc <LSM6DSO_ReadAcceleration+0x50>)
 80006b2:	809a      	strh	r2, [r3, #4]
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000108 	.word	0x20000108

080006c0 <LSM6DSO_ReadAngularRate>:
 * \param[in] None
 * 
 * \retval None
 */
void LSM6DSO_ReadAngularRate(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
    uint8_t gyro_data[LSM6DSO_GYRO_DATA_LEN];
    LSM6DSO_MultipleRead(LSM6DSO_REG_OUTX_L_G, LSM6DSO_GYRO_DATA_LEN, gyro_data);
 80006c6:	463b      	mov	r3, r7
 80006c8:	461a      	mov	r2, r3
 80006ca:	2106      	movs	r1, #6
 80006cc:	2022      	movs	r0, #34	; 0x22
 80006ce:	f000 f863 	bl	8000798 <LSM6DSO_MultipleRead>

    LSM6DSO_Result.angular_rate.x = (int16_t)((gyro_data[1] << 8U) | gyro_data[0]);
 80006d2:	787b      	ldrb	r3, [r7, #1]
 80006d4:	021b      	lsls	r3, r3, #8
 80006d6:	b21a      	sxth	r2, r3
 80006d8:	783b      	ldrb	r3, [r7, #0]
 80006da:	b21b      	sxth	r3, r3
 80006dc:	4313      	orrs	r3, r2
 80006de:	b21a      	sxth	r2, r3
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <LSM6DSO_ReadAngularRate+0x50>)
 80006e2:	80da      	strh	r2, [r3, #6]
    LSM6DSO_Result.angular_rate.y = (int16_t)((gyro_data[3] << 8U) | gyro_data[2]);
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	021b      	lsls	r3, r3, #8
 80006e8:	b21a      	sxth	r2, r3
 80006ea:	78bb      	ldrb	r3, [r7, #2]
 80006ec:	b21b      	sxth	r3, r3
 80006ee:	4313      	orrs	r3, r2
 80006f0:	b21a      	sxth	r2, r3
 80006f2:	4b07      	ldr	r3, [pc, #28]	; (8000710 <LSM6DSO_ReadAngularRate+0x50>)
 80006f4:	811a      	strh	r2, [r3, #8]
    LSM6DSO_Result.angular_rate.z = (int16_t)((gyro_data[5] << 8U) | gyro_data[4]);
 80006f6:	797b      	ldrb	r3, [r7, #5]
 80006f8:	021b      	lsls	r3, r3, #8
 80006fa:	b21a      	sxth	r2, r3
 80006fc:	793b      	ldrb	r3, [r7, #4]
 80006fe:	b21b      	sxth	r3, r3
 8000700:	4313      	orrs	r3, r2
 8000702:	b21a      	sxth	r2, r3
 8000704:	4b02      	ldr	r3, [pc, #8]	; (8000710 <LSM6DSO_ReadAngularRate+0x50>)
 8000706:	815a      	strh	r2, [r3, #10]
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000108 	.word	0x20000108

08000714 <LSM6DSO_ReadTemperature>:
 * \param[in] None
 * 
 * \retval None
 */
void LSM6DSO_ReadTemperature(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
    uint8_t temp_data[LSM6DSO_TEMP_DATA_LEN];
    LSM6DSO_MultipleRead(LSM6DSO_REG_OUT_TEMP_L, LSM6DSO_TEMP_DATA_LEN, temp_data);
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	461a      	mov	r2, r3
 800071e:	2102      	movs	r1, #2
 8000720:	2020      	movs	r0, #32
 8000722:	f000 f839 	bl	8000798 <LSM6DSO_MultipleRead>

    LSM6DSO_Result.temperature = (int16_t)((temp_data[1] << 8U) | temp_data[0]);
 8000726:	797b      	ldrb	r3, [r7, #5]
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	b21a      	sxth	r2, r3
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	b21b      	sxth	r3, r3
 8000730:	4313      	orrs	r3, r2
 8000732:	b21a      	sxth	r2, r3
 8000734:	4b02      	ldr	r3, [pc, #8]	; (8000740 <LSM6DSO_ReadTemperature+0x2c>)
 8000736:	819a      	strh	r2, [r3, #12]
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000108 	.word	0x20000108

08000744 <LSM6DSO_SingleRead>:
 * \param[in] address Register address
 * 
 * \retval Value of the register
 */
uint8_t LSM6DSO_SingleRead(uint8_t address)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af02      	add	r7, sp, #8
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data[LSM6DSO_SINGLE_RW_LEN];
    uint8_t rx_data[LSM6DSO_SINGLE_RW_LEN];

    tx_data[0] = (address & LSM6DSO_ADDR_MASK) | LSM6DSO_READ_MODE;
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000754:	b2db      	uxtb	r3, r3
 8000756:	733b      	strb	r3, [r7, #12]
    tx_data[1] = 0x00;
 8000758:	2300      	movs	r3, #0
 800075a:	737b      	strb	r3, [r7, #13]

    LSM6DSO_ExchangeData(LSM6DSO_SINGLE_RW_LEN, tx_data, rx_data);
 800075c:	2200      	movs	r2, #0
 800075e:	2110      	movs	r1, #16
 8000760:	480b      	ldr	r0, [pc, #44]	; (8000790 <LSM6DSO_SingleRead+0x4c>)
 8000762:	f002 fb33 	bl	8002dcc <HAL_GPIO_WritePin>
 8000766:	f107 0208 	add.w	r2, r7, #8
 800076a:	f107 010c 	add.w	r1, r7, #12
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	2302      	movs	r3, #2
 8000776:	4807      	ldr	r0, [pc, #28]	; (8000794 <LSM6DSO_SingleRead+0x50>)
 8000778:	f003 fd49 	bl	800420e <HAL_SPI_TransmitReceive>
 800077c:	2201      	movs	r2, #1
 800077e:	2110      	movs	r1, #16
 8000780:	4803      	ldr	r0, [pc, #12]	; (8000790 <LSM6DSO_SingleRead+0x4c>)
 8000782:	f002 fb23 	bl	8002dcc <HAL_GPIO_WritePin>

    return rx_data[1];
 8000786:	7a7b      	ldrb	r3, [r7, #9]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40020000 	.word	0x40020000
 8000794:	2000023c 	.word	0x2000023c

08000798 <LSM6DSO_MultipleRead>:
 * \param[in] buf Buffer to store read data
 * 
 * \retval None
 */
void LSM6DSO_MultipleRead(uint8_t address, uint8_t length, uint8_t* buf)
{
 8000798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800079c:	b08d      	sub	sp, #52	; 0x34
 800079e:	af02      	add	r7, sp, #8
 80007a0:	4603      	mov	r3, r0
 80007a2:	60ba      	str	r2, [r7, #8]
 80007a4:	73fb      	strb	r3, [r7, #15]
 80007a6:	460b      	mov	r3, r1
 80007a8:	73bb      	strb	r3, [r7, #14]
 80007aa:	466b      	mov	r3, sp
 80007ac:	461e      	mov	r6, r3
    const uint8_t communication_length = length + 1U;
 80007ae:	7bbb      	ldrb	r3, [r7, #14]
 80007b0:	3301      	adds	r3, #1
 80007b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t tx_data[communication_length];
 80007b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007ba:	3b01      	subs	r3, #1
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
 80007be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007c2:	2200      	movs	r2, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	607a      	str	r2, [r7, #4]
 80007c8:	f04f 0200 	mov.w	r2, #0
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	00cb      	lsls	r3, r1, #3
 80007d4:	6839      	ldr	r1, [r7, #0]
 80007d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80007da:	6839      	ldr	r1, [r7, #0]
 80007dc:	00ca      	lsls	r2, r1, #3
 80007de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007e2:	2200      	movs	r2, #0
 80007e4:	469a      	mov	sl, r3
 80007e6:	4693      	mov	fp, r2
 80007e8:	f04f 0200 	mov.w	r2, #0
 80007ec:	f04f 0300 	mov.w	r3, #0
 80007f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80007f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80007f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80007fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000800:	3307      	adds	r3, #7
 8000802:	08db      	lsrs	r3, r3, #3
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	ebad 0d03 	sub.w	sp, sp, r3
 800080a:	ab02      	add	r3, sp, #8
 800080c:	3300      	adds	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
    uint8_t rx_data[communication_length];
 8000810:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000814:	3b01      	subs	r3, #1
 8000816:	61bb      	str	r3, [r7, #24]
 8000818:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800081c:	2200      	movs	r2, #0
 800081e:	4698      	mov	r8, r3
 8000820:	4691      	mov	r9, r2
 8000822:	f04f 0200 	mov.w	r2, #0
 8000826:	f04f 0300 	mov.w	r3, #0
 800082a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800082e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000832:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000836:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800083a:	2200      	movs	r2, #0
 800083c:	461c      	mov	r4, r3
 800083e:	4615      	mov	r5, r2
 8000840:	f04f 0200 	mov.w	r2, #0
 8000844:	f04f 0300 	mov.w	r3, #0
 8000848:	00eb      	lsls	r3, r5, #3
 800084a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800084e:	00e2      	lsls	r2, r4, #3
 8000850:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000854:	3307      	adds	r3, #7
 8000856:	08db      	lsrs	r3, r3, #3
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	ebad 0d03 	sub.w	sp, sp, r3
 800085e:	ab02      	add	r3, sp, #8
 8000860:	3300      	adds	r3, #0
 8000862:	617b      	str	r3, [r7, #20]

    tx_data[0] = (address & LSM6DSO_ADDR_MASK) | LSM6DSO_READ_MODE;
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800086a:	b2da      	uxtb	r2, r3
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	701a      	strb	r2, [r3, #0]

    for(uint8_t i = 1U; i < communication_length; i++)
 8000870:	2301      	movs	r3, #1
 8000872:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000876:	e009      	b.n	800088c <LSM6DSO_MultipleRead+0xf4>
    {
        tx_data[i] = 0x00;
 8000878:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800087c:	69fa      	ldr	r2, [r7, #28]
 800087e:	2100      	movs	r1, #0
 8000880:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 1U; i < communication_length; i++)
 8000882:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000886:	3301      	adds	r3, #1
 8000888:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800088c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000890:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000894:	429a      	cmp	r2, r3
 8000896:	d3ef      	bcc.n	8000878 <LSM6DSO_MultipleRead+0xe0>
    }

    LSM6DSO_ExchangeData(communication_length, tx_data, rx_data);
 8000898:	2200      	movs	r2, #0
 800089a:	2110      	movs	r1, #16
 800089c:	4818      	ldr	r0, [pc, #96]	; (8000900 <LSM6DSO_MultipleRead+0x168>)
 800089e:	f002 fa95 	bl	8002dcc <HAL_GPIO_WritePin>
 80008a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	f04f 32ff 	mov.w	r2, #4294967295
 80008ac:	9200      	str	r2, [sp, #0]
 80008ae:	697a      	ldr	r2, [r7, #20]
 80008b0:	69f9      	ldr	r1, [r7, #28]
 80008b2:	4814      	ldr	r0, [pc, #80]	; (8000904 <LSM6DSO_MultipleRead+0x16c>)
 80008b4:	f003 fcab 	bl	800420e <HAL_SPI_TransmitReceive>
 80008b8:	2201      	movs	r2, #1
 80008ba:	2110      	movs	r1, #16
 80008bc:	4810      	ldr	r0, [pc, #64]	; (8000900 <LSM6DSO_MultipleRead+0x168>)
 80008be:	f002 fa85 	bl	8002dcc <HAL_GPIO_WritePin>

    for(uint8_t i = 0U; i < length; i++)
 80008c2:	2300      	movs	r3, #0
 80008c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80008c8:	e00e      	b.n	80008e8 <LSM6DSO_MultipleRead+0x150>
    {
        buf[i] = rx_data[i + 1U];
 80008ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008ce:	1c5a      	adds	r2, r3, #1
 80008d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	440b      	add	r3, r1
 80008d8:	6979      	ldr	r1, [r7, #20]
 80008da:	5c8a      	ldrb	r2, [r1, r2]
 80008dc:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0U; i < length; i++)
 80008de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008e2:	3301      	adds	r3, #1
 80008e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80008e8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80008ec:	7bbb      	ldrb	r3, [r7, #14]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d3eb      	bcc.n	80008ca <LSM6DSO_MultipleRead+0x132>
 80008f2:	46b5      	mov	sp, r6
    }
}
 80008f4:	bf00      	nop
 80008f6:	372c      	adds	r7, #44	; 0x2c
 80008f8:	46bd      	mov	sp, r7
 80008fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008fe:	bf00      	nop
 8000900:	40020000 	.word	0x40020000
 8000904:	2000023c 	.word	0x2000023c

08000908 <LSM6DSO_MultipleWrite>:
 * \param[in] buf Buffer with data to write
 * 
 * \retval None
 */
void LSM6DSO_MultipleWrite(uint8_t address, uint8_t length, uint8_t* buf)
{
 8000908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800090c:	b08d      	sub	sp, #52	; 0x34
 800090e:	af02      	add	r7, sp, #8
 8000910:	4603      	mov	r3, r0
 8000912:	60ba      	str	r2, [r7, #8]
 8000914:	73fb      	strb	r3, [r7, #15]
 8000916:	460b      	mov	r3, r1
 8000918:	73bb      	strb	r3, [r7, #14]
 800091a:	466b      	mov	r3, sp
 800091c:	461e      	mov	r6, r3
    const uint8_t communication_length = length + 1U;
 800091e:	7bbb      	ldrb	r3, [r7, #14]
 8000920:	3301      	adds	r3, #1
 8000922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t tx_data[communication_length];
 8000926:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800092a:	3b01      	subs	r3, #1
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
 800092e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000932:	2200      	movs	r2, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	607a      	str	r2, [r7, #4]
 8000938:	f04f 0200 	mov.w	r2, #0
 800093c:	f04f 0300 	mov.w	r3, #0
 8000940:	6879      	ldr	r1, [r7, #4]
 8000942:	00cb      	lsls	r3, r1, #3
 8000944:	6839      	ldr	r1, [r7, #0]
 8000946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800094a:	6839      	ldr	r1, [r7, #0]
 800094c:	00ca      	lsls	r2, r1, #3
 800094e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000952:	2200      	movs	r2, #0
 8000954:	469a      	mov	sl, r3
 8000956:	4693      	mov	fp, r2
 8000958:	f04f 0200 	mov.w	r2, #0
 800095c:	f04f 0300 	mov.w	r3, #0
 8000960:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000964:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000968:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800096c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000970:	3307      	adds	r3, #7
 8000972:	08db      	lsrs	r3, r3, #3
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	ebad 0d03 	sub.w	sp, sp, r3
 800097a:	ab02      	add	r3, sp, #8
 800097c:	3300      	adds	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
    uint8_t rx_data[communication_length];
 8000980:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000984:	3b01      	subs	r3, #1
 8000986:	61bb      	str	r3, [r7, #24]
 8000988:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800098c:	2200      	movs	r2, #0
 800098e:	4698      	mov	r8, r3
 8000990:	4691      	mov	r9, r2
 8000992:	f04f 0200 	mov.w	r2, #0
 8000996:	f04f 0300 	mov.w	r3, #0
 800099a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800099e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80009a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80009a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009aa:	2200      	movs	r2, #0
 80009ac:	461c      	mov	r4, r3
 80009ae:	4615      	mov	r5, r2
 80009b0:	f04f 0200 	mov.w	r2, #0
 80009b4:	f04f 0300 	mov.w	r3, #0
 80009b8:	00eb      	lsls	r3, r5, #3
 80009ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009be:	00e2      	lsls	r2, r4, #3
 80009c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009c4:	3307      	adds	r3, #7
 80009c6:	08db      	lsrs	r3, r3, #3
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	ebad 0d03 	sub.w	sp, sp, r3
 80009ce:	ab02      	add	r3, sp, #8
 80009d0:	3300      	adds	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]

    tx_data[0] = (address & LSM6DSO_ADDR_MASK) | LSM6DSO_WRITE_MODE;
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	701a      	strb	r2, [r3, #0]

    for(uint8_t i = 0U; i < length; i++)
 80009e0:	2300      	movs	r3, #0
 80009e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80009e6:	e00e      	b.n	8000a06 <LSM6DSO_MultipleWrite+0xfe>
    {
        tx_data[i + 1] = buf[i];
 80009e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80009ec:	68ba      	ldr	r2, [r7, #8]
 80009ee:	441a      	add	r2, r3
 80009f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80009f4:	3301      	adds	r3, #1
 80009f6:	7811      	ldrb	r1, [r2, #0]
 80009f8:	69fa      	ldr	r2, [r7, #28]
 80009fa:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 0U; i < length; i++)
 80009fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a00:	3301      	adds	r3, #1
 8000a02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000a06:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000a0a:	7bbb      	ldrb	r3, [r7, #14]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d3eb      	bcc.n	80009e8 <LSM6DSO_MultipleWrite+0xe0>
    }

    LSM6DSO_ExchangeData(communication_length, tx_data, rx_data);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2110      	movs	r1, #16
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <LSM6DSO_MultipleWrite+0x140>)
 8000a16:	f002 f9d9 	bl	8002dcc <HAL_GPIO_WritePin>
 8000a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	f04f 32ff 	mov.w	r2, #4294967295
 8000a24:	9200      	str	r2, [sp, #0]
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	69f9      	ldr	r1, [r7, #28]
 8000a2a:	4808      	ldr	r0, [pc, #32]	; (8000a4c <LSM6DSO_MultipleWrite+0x144>)
 8000a2c:	f003 fbef 	bl	800420e <HAL_SPI_TransmitReceive>
 8000a30:	2201      	movs	r2, #1
 8000a32:	2110      	movs	r1, #16
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <LSM6DSO_MultipleWrite+0x140>)
 8000a36:	f002 f9c9 	bl	8002dcc <HAL_GPIO_WritePin>
 8000a3a:	46b5      	mov	sp, r6
}
 8000a3c:	bf00      	nop
 8000a3e:	372c      	adds	r7, #44	; 0x2c
 8000a40:	46bd      	mov	sp, r7
 8000a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a46:	bf00      	nop
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	2000023c 	.word	0x2000023c

08000a50 <AppCan_Init>:
/***********************************************************************************************************
 ******************************************* Exported functions ********************************************
 ***********************************************************************************************************/

void AppCan_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	HAL_CAN_Start(&hcan1);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <AppCan_Init+0x10>)
 8000a56:	f001 fd30 	bl	80024ba <HAL_CAN_Start>
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000214 	.word	0x20000214

08000a64 <AppCan_Task>:

void AppCan_Task(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
	bool send_frame;

    for(uint8_t i = 0; i < (uint8_t)AppCanFrameMax; i++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	71fb      	strb	r3, [r7, #7]
 8000a6e:	e00f      	b.n	8000a90 <AppCan_Task+0x2c>
    {
        send_frame = AppCan_ProcessFrame((AppCan_Frame_t)i);
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f882 	bl	8000b7c <AppCan_ProcessFrame>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	71bb      	strb	r3, [r7, #6]

        if(false != send_frame)
 8000a7c:	79bb      	ldrb	r3, [r7, #6]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d003      	beq.n	8000a8a <AppCan_Task+0x26>
        {
        	AppCan_TxFrame((AppCan_Frame_t)i);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f83b 	bl	8000b00 <AppCan_TxFrame>
    for(uint8_t i = 0; i < (uint8_t)AppCanFrameMax; i++)
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	71fb      	strb	r3, [r7, #7]
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2b04      	cmp	r3, #4
 8000a94:	d9ec      	bls.n	8000a70 <AppCan_Task+0xc>
        }
    }
}
 8000a96:	bf00      	nop
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <AppCan_FillFrame>:

/*
 * Fill CAN frame with data
 */
void AppCan_FillFrame(AppCan_Frame_t frame_id, uint8_t* data)
{
 8000aa0:	b490      	push	{r4, r7}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i = 0U; i < AppCan_UserConfig[frame_id].dlc; i++)
 8000aac:	2300      	movs	r3, #0
 8000aae:	73fb      	strb	r3, [r7, #15]
 8000ab0:	e012      	b.n	8000ad8 <AppCan_FillFrame+0x38>
    {
    	AppCan_UserConfig[frame_id].data[i] = data[i];
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	683a      	ldr	r2, [r7, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	79fa      	ldrb	r2, [r7, #7]
 8000aba:	7bf9      	ldrb	r1, [r7, #15]
 8000abc:	781c      	ldrb	r4, [r3, #0]
 8000abe:	480f      	ldr	r0, [pc, #60]	; (8000afc <AppCan_FillFrame+0x5c>)
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	4413      	add	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4403      	add	r3, r0
 8000aca:	440b      	add	r3, r1
 8000acc:	3301      	adds	r3, #1
 8000ace:	4622      	mov	r2, r4
 8000ad0:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0U; i < AppCan_UserConfig[frame_id].dlc; i++)
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
 8000ad8:	79fa      	ldrb	r2, [r7, #7]
 8000ada:	4908      	ldr	r1, [pc, #32]	; (8000afc <AppCan_FillFrame+0x5c>)
 8000adc:	4613      	mov	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4413      	add	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	3309      	adds	r3, #9
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	7bfa      	ldrb	r2, [r7, #15]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d3e0      	bcc.n	8000ab2 <AppCan_FillFrame+0x12>
    }
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc90      	pop	{r4, r7}
 8000afa:	4770      	bx	lr
 8000afc:	20000000 	.word	0x20000000

08000b00 <AppCan_TxFrame>:
/***********************************************************************************************************
 ******************************************** Local functions **********************************************
 ***********************************************************************************************************/

static void AppCan_TxFrame(AppCan_Frame_t frame_id)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef tx_header;
	uint32_t tx_mailbox;

	tx_header.DLC = AppCan_UserConfig[frame_id].dlc;
 8000b0a:	79fa      	ldrb	r2, [r7, #7]
 8000b0c:	4919      	ldr	r1, [pc, #100]	; (8000b74 <AppCan_TxFrame+0x74>)
 8000b0e:	4613      	mov	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4413      	add	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	440b      	add	r3, r1
 8000b18:	3309      	adds	r3, #9
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	623b      	str	r3, [r7, #32]
	tx_header.StdId = AppCan_UserConfig[frame_id].identifier;
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	4914      	ldr	r1, [pc, #80]	; (8000b74 <AppCan_TxFrame+0x74>)
 8000b22:	4613      	mov	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	4413      	add	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	330a      	adds	r3, #10
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	613b      	str	r3, [r7, #16]
	tx_header.IDE = CAN_ID_STD;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
	tx_header.RTR = CAN_RTR_DATA;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]

	HAL_CAN_AddTxMessage(&hcan1, &tx_header, AppCan_UserConfig[frame_id].data, &tx_mailbox);
 8000b3a:	79fa      	ldrb	r2, [r7, #7]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <AppCan_TxFrame+0x74>)
 8000b46:	4413      	add	r3, r2
 8000b48:	1c5a      	adds	r2, r3, #1
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	f107 0110 	add.w	r1, r7, #16
 8000b52:	4809      	ldr	r0, [pc, #36]	; (8000b78 <AppCan_TxFrame+0x78>)
 8000b54:	f001 fcf5 	bl	8002542 <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&hcan1, tx_mailbox));
 8000b58:	bf00      	nop
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4806      	ldr	r0, [pc, #24]	; (8000b78 <AppCan_TxFrame+0x78>)
 8000b60:	f001 fdbf 	bl	80026e2 <HAL_CAN_IsTxMessagePending>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d1f7      	bne.n	8000b5a <AppCan_TxFrame+0x5a>
}
 8000b6a:	bf00      	nop
 8000b6c:	bf00      	nop
 8000b6e:	3728      	adds	r7, #40	; 0x28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000214 	.word	0x20000214

08000b7c <AppCan_ProcessFrame>:
/*
 * Process CAN frame.
 * Ret: 0 = don't send frame, 1 = send frame (checks period counter)
 */
static bool AppCan_ProcessFrame(AppCan_Frame_t frame_id)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
    uint32_t period = AppCan_UserConfig[frame_id].period;
 8000b86:	79fa      	ldrb	r2, [r7, #7]
 8000b88:	491e      	ldr	r1, [pc, #120]	; (8000c04 <AppCan_ProcessFrame+0x88>)
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	4413      	add	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	440b      	add	r3, r1
 8000b94:	330c      	adds	r3, #12
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	613b      	str	r3, [r7, #16]
    uint32_t counter = ++AppCan_UserConfig[frame_id].counter;
 8000b9a:	79fa      	ldrb	r2, [r7, #7]
 8000b9c:	4919      	ldr	r1, [pc, #100]	; (8000c04 <AppCan_ProcessFrame+0x88>)
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	3310      	adds	r3, #16
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	1c59      	adds	r1, r3, #1
 8000bae:	4815      	ldr	r0, [pc, #84]	; (8000c04 <AppCan_ProcessFrame+0x88>)
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	4403      	add	r3, r0
 8000bba:	3310      	adds	r3, #16
 8000bbc:	6019      	str	r1, [r3, #0]
 8000bbe:	4911      	ldr	r1, [pc, #68]	; (8000c04 <AppCan_ProcessFrame+0x88>)
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	440b      	add	r3, r1
 8000bca:	3310      	adds	r3, #16
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	60fb      	str	r3, [r7, #12]
    bool ret;

    if(counter >= period)
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d30c      	bcc.n	8000bf2 <AppCan_ProcessFrame+0x76>
    {
    	AppCan_UserConfig[frame_id].counter = 0U;
 8000bd8:	79fa      	ldrb	r2, [r7, #7]
 8000bda:	490a      	ldr	r1, [pc, #40]	; (8000c04 <AppCan_ProcessFrame+0x88>)
 8000bdc:	4613      	mov	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	440b      	add	r3, r1
 8000be6:	3310      	adds	r3, #16
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
        ret = true;
 8000bec:	2301      	movs	r3, #1
 8000bee:	75fb      	strb	r3, [r7, #23]
 8000bf0:	e001      	b.n	8000bf6 <AppCan_ProcessFrame+0x7a>
    }
    else
    {
        ret = false;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8000bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	20000000 	.word	0x20000000

08000c08 <AppImu_Init>:
/***********************************************************************************************************
 ******************************************* Exported functions ********************************************
 ***********************************************************************************************************/

void AppImu_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
    LSM6DSO_Init();
 8000c0c:	f7ff fcea 	bl	80005e4 <LSM6DSO_Init>
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <AppImu_Task>:

void AppImu_Task(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
    uint8_t status;
    LSM6DSO_Result_t results;

    status = LSM6DSO_SingleRead(LSM6DSO_REG_STATUS_REG);
 8000c1a:	201e      	movs	r0, #30
 8000c1c:	f7ff fd92 	bl	8000744 <LSM6DSO_SingleRead>
 8000c20:	4603      	mov	r3, r0
 8000c22:	73fb      	strb	r3, [r7, #15]

    if(status & LSM6DSO_XLDA)
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <AppImu_Task+0x1e>
    {
        LSM6DSO_ReadAcceleration();
 8000c2e:	f7ff fd1d 	bl	800066c <LSM6DSO_ReadAcceleration>
    }

    if(status & LSM6DSO_GDA)
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <AppImu_Task+0x2c>
    {
        LSM6DSO_ReadAngularRate();
 8000c3c:	f7ff fd40 	bl	80006c0 <LSM6DSO_ReadAngularRate>
    }

    if(status & LSM6DSO_TDA)
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <AppImu_Task+0x3a>
    {
        LSM6DSO_ReadTemperature();
 8000c4a:	f7ff fd63 	bl	8000714 <LSM6DSO_ReadTemperature>
    }

    LSM6DSO_GetResults(&results);
 8000c4e:	463b      	mov	r3, r7
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fcdb 	bl	800060c <LSM6DSO_GetResults>

    AppImu_Data[0U] = (uint8_t)(results.angular_rate.x & 0xFF);
 8000c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	4b30      	ldr	r3, [pc, #192]	; (8000d20 <AppImu_Task+0x10c>)
 8000c5e:	701a      	strb	r2, [r3, #0]
    AppImu_Data[1U] = (uint8_t)((results.angular_rate.x >> 8U) & 0xFF);
 8000c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c64:	121b      	asrs	r3, r3, #8
 8000c66:	b21b      	sxth	r3, r3
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <AppImu_Task+0x10c>)
 8000c6c:	705a      	strb	r2, [r3, #1]
    AppImu_Data[2U] = (uint8_t)(results.angular_rate.y & 0xFF);
 8000c6e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <AppImu_Task+0x10c>)
 8000c76:	709a      	strb	r2, [r3, #2]
    AppImu_Data[3U] = (uint8_t)((results.angular_rate.y >> 8U) & 0xFF);
 8000c78:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000c7c:	121b      	asrs	r3, r3, #8
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <AppImu_Task+0x10c>)
 8000c84:	70da      	strb	r2, [r3, #3]
    AppImu_Data[4U] = (uint8_t)(results.angular_rate.z & 0xFF);
 8000c86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <AppImu_Task+0x10c>)
 8000c8e:	711a      	strb	r2, [r3, #4]
    AppImu_Data[5U] = (uint8_t)((results.angular_rate.z >> 8U) & 0xFF);
 8000c90:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c94:	121b      	asrs	r3, r3, #8
 8000c96:	b21b      	sxth	r3, r3
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <AppImu_Task+0x10c>)
 8000c9c:	715a      	strb	r2, [r3, #5]

    AppCan_FillFrame(AppCanFrame1_Gyro, AppImu_Data);
 8000c9e:	4920      	ldr	r1, [pc, #128]	; (8000d20 <AppImu_Task+0x10c>)
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f7ff fefd 	bl	8000aa0 <AppCan_FillFrame>

    AppImu_Data[0U] = (uint8_t)(results.acceleration.x & 0xFF);
 8000ca6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <AppImu_Task+0x10c>)
 8000cae:	701a      	strb	r2, [r3, #0]
    AppImu_Data[1U] = (uint8_t)((results.acceleration.x >> 8U) & 0xFF);
 8000cb0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000cb4:	121b      	asrs	r3, r3, #8
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <AppImu_Task+0x10c>)
 8000cbc:	705a      	strb	r2, [r3, #1]
    AppImu_Data[2U] = (uint8_t)(results.acceleration.y & 0xFF);
 8000cbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <AppImu_Task+0x10c>)
 8000cc6:	709a      	strb	r2, [r3, #2]
    AppImu_Data[3U] = (uint8_t)((results.acceleration.y >> 8U) & 0xFF);
 8000cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ccc:	121b      	asrs	r3, r3, #8
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <AppImu_Task+0x10c>)
 8000cd4:	70da      	strb	r2, [r3, #3]
    AppImu_Data[4U] = (uint8_t)(results.acceleration.z & 0xFF);
 8000cd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <AppImu_Task+0x10c>)
 8000cde:	711a      	strb	r2, [r3, #4]
    AppImu_Data[5U] = (uint8_t)((results.acceleration.z >> 8U) & 0xFF);
 8000ce0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ce4:	121b      	asrs	r3, r3, #8
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <AppImu_Task+0x10c>)
 8000cec:	715a      	strb	r2, [r3, #5]

    AppCan_FillFrame(AppCanFrame2_Acc, AppImu_Data);
 8000cee:	490c      	ldr	r1, [pc, #48]	; (8000d20 <AppImu_Task+0x10c>)
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff fed5 	bl	8000aa0 <AppCan_FillFrame>

    AppImu_Data[0U] = (uint8_t)(results.temperature & 0xFF);
 8000cf6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <AppImu_Task+0x10c>)
 8000cfe:	701a      	strb	r2, [r3, #0]
    AppImu_Data[1U] = (uint8_t)((results.temperature >> 8U) & 0xFF);
 8000d00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d04:	121b      	asrs	r3, r3, #8
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <AppImu_Task+0x10c>)
 8000d0c:	705a      	strb	r2, [r3, #1]
    AppCan_FillFrame(AppCanFrame3_Temp, AppImu_Data);
 8000d0e:	4904      	ldr	r1, [pc, #16]	; (8000d20 <AppImu_Task+0x10c>)
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fec5 	bl	8000aa0 <AppCan_FillFrame>
}
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000118 	.word	0x20000118

08000d24 <AppLight_Task>:
/***********************************************************************************************************
 ******************************************* Exported functions ********************************************
 ***********************************************************************************************************/

void AppLight_Task(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
	uint32_t adc_value;

	HAL_ADC_Start(&hadc1);
 8000d2a:	4810      	ldr	r0, [pc, #64]	; (8000d6c <AppLight_Task+0x48>)
 8000d2c:	f000 ff14 	bl	8001b58 <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <AppLight_Task+0x48>)
 8000d36:	f000 ffdd 	bl	8001cf4 <HAL_ADC_PollForConversion>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d110      	bne.n	8000d62 <AppLight_Task+0x3e>
	{
		adc_value = HAL_ADC_GetValue(&hadc1);
 8000d40:	480a      	ldr	r0, [pc, #40]	; (8000d6c <AppLight_Task+0x48>)
 8000d42:	f001 f862 	bl	8001e0a <HAL_ADC_GetValue>
 8000d46:	6078      	str	r0, [r7, #4]

	    AppLight_Data[0U] = (uint8_t)(adc_value & 0xFF);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <AppLight_Task+0x4c>)
 8000d4e:	701a      	strb	r2, [r3, #0]
	    AppLight_Data[1U] = (uint8_t)((adc_value >> 8U) & 0xFF);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	0a1b      	lsrs	r3, r3, #8
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <AppLight_Task+0x4c>)
 8000d58:	705a      	strb	r2, [r3, #1]

	    AppCan_FillFrame(AppCanFrame4_Light, AppLight_Data);
 8000d5a:	4905      	ldr	r1, [pc, #20]	; (8000d70 <AppLight_Task+0x4c>)
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f7ff fe9f 	bl	8000aa0 <AppCan_FillFrame>
	}
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200001cc 	.word	0x200001cc
 8000d70:	20000120 	.word	0x20000120

08000d74 <AppSystem_Init>:
/***********************************************************************************************************
 ******************************************* Exported functions ********************************************
 ***********************************************************************************************************/

void AppSystem_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	/* Enable TIM6 - task scheduler */
	HAL_TIM_Base_Start_IT(&htim6);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <AppSystem_Init+0x10>)
 8000d7a:	f003 fe3b 	bl	80049f4 <HAL_TIM_Base_Start_IT>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200002a4 	.word	0x200002a4

08000d88 <AppSystem_MainTask>:

void AppSystem_MainTask(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	static uint32_t counter;

	// Process CAN transmission every 100ms
	AppCan_Task();
 8000d8c:	f7ff fe6a 	bl	8000a64 <AppCan_Task>

	// Process light conversion every 400ms
	if((counter % 4) == 0U)
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <AppSystem_MainTask+0x48>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d101      	bne.n	8000da0 <AppSystem_MainTask+0x18>
	{
		AppLight_Task();
 8000d9c:	f7ff ffc2 	bl	8000d24 <AppLight_Task>
	}

	// Process imu conversion every 700ms
	if((counter % 7) == 0U)
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <AppSystem_MainTask+0x48>)
 8000da2:	6819      	ldr	r1, [r3, #0]
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <AppSystem_MainTask+0x4c>)
 8000da6:	fba3 2301 	umull	r2, r3, r3, r1
 8000daa:	1aca      	subs	r2, r1, r3
 8000dac:	0852      	lsrs	r2, r2, #1
 8000dae:	4413      	add	r3, r2
 8000db0:	089a      	lsrs	r2, r3, #2
 8000db2:	4613      	mov	r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	1aca      	subs	r2, r1, r3
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	d101      	bne.n	8000dc2 <AppSystem_MainTask+0x3a>
	{
		AppImu_Task();
 8000dbe:	f7ff ff29 	bl	8000c14 <AppImu_Task>
	}

	counter++;
 8000dc2:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <AppSystem_MainTask+0x48>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	4a01      	ldr	r2, [pc, #4]	; (8000dd0 <AppSystem_MainTask+0x48>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000124 	.word	0x20000124
 8000dd4:	24924925 	.word	0x24924925

08000dd8 <AppUart_Init>:
/***********************************************************************************************************
 ******************************************* Exported functions ********************************************
 ***********************************************************************************************************/

void AppUart_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	sprintf(AppUart_Msg, "\r\nUse the serial port to choose RGB LED color." \
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <AppUart_Init+0x2c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4909      	ldr	r1, [pc, #36]	; (8000e08 <AppUart_Init+0x30>)
 8000de4:	4809      	ldr	r0, [pc, #36]	; (8000e0c <AppUart_Init+0x34>)
 8000de6:	f005 fceb 	bl	80067c0 <siprintf>
						 "\r\nThe required number of characters is present in parentheses.%s", \
						 AppUart_MsgTable[APP_STATE_1_R]);
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)AppUart_Msg, sizeof(AppUart_Msg));
 8000dea:	2296      	movs	r2, #150	; 0x96
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <AppUart_Init+0x34>)
 8000dee:	4808      	ldr	r0, [pc, #32]	; (8000e10 <AppUart_Init+0x38>)
 8000df0:	f004 f95a 	bl	80050a8 <HAL_UART_Transmit_IT>

	HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 3);
 8000df4:	2203      	movs	r2, #3
 8000df6:	4907      	ldr	r1, [pc, #28]	; (8000e14 <AppUart_Init+0x3c>)
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <AppUart_Init+0x38>)
 8000dfa:	f004 f9b3 	bl	8005164 <HAL_UART_Receive_IT>
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000064 	.word	0x20000064
 8000e08:	08007190 	.word	0x08007190
 8000e0c:	2000012c 	.word	0x2000012c
 8000e10:	200002f0 	.word	0x200002f0
 8000e14:	200001c4 	.word	0x200001c4

08000e18 <AppUart_ProcessInput>:

void AppUart_ProcessInput(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	switch (AppUart_StateMachine) {
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <AppUart_ProcessInput+0x5c>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d81f      	bhi.n	8000e64 <AppUart_ProcessInput+0x4c>
 8000e24:	a201      	add	r2, pc, #4	; (adr r2, 8000e2c <AppUart_ProcessInput+0x14>)
 8000e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2a:	bf00      	nop
 8000e2c:	08000e41 	.word	0x08000e41
 8000e30:	08000e49 	.word	0x08000e49
 8000e34:	08000e51 	.word	0x08000e51
 8000e38:	08000e59 	.word	0x08000e59
 8000e3c:	08000e5f 	.word	0x08000e5f
		case APP_STATE_1_R:
			AppUart_ProcessData(0U);
 8000e40:	2000      	movs	r0, #0
 8000e42:	f000 f89b 	bl	8000f7c <AppUart_ProcessData>
			break;
 8000e46:	e00e      	b.n	8000e66 <AppUart_ProcessInput+0x4e>
		case APP_STATE_2_G:
			AppUart_ProcessData(1U);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f000 f897 	bl	8000f7c <AppUart_ProcessData>
			break;
 8000e4e:	e00a      	b.n	8000e66 <AppUart_ProcessInput+0x4e>
		case APP_STATE_3_B:
			AppUart_ProcessData(2U);
 8000e50:	2002      	movs	r0, #2
 8000e52:	f000 f893 	bl	8000f7c <AppUart_ProcessData>
			break;
 8000e56:	e006      	b.n	8000e66 <AppUart_ProcessInput+0x4e>
		case APP_STATE_4_SUMMARY:
			AppUart_ProcessSummary();
 8000e58:	f000 f8cc 	bl	8000ff4 <AppUart_ProcessSummary>
			break;
 8000e5c:	e003      	b.n	8000e66 <AppUart_ProcessInput+0x4e>
		case APP_STATE_5_ERROR:
			AppUart_ProcessError();
 8000e5e:	f000 f8e1 	bl	8001024 <AppUart_ProcessError>
			break;
 8000e62:	e000      	b.n	8000e66 <AppUart_ProcessInput+0x4e>
		default:
			break;
 8000e64:	bf00      	nop
	}

	AppUart_SendInfo(AppUart_StateMachine);
 8000e66:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <AppUart_ProcessInput+0x5c>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f804 	bl	8000e78 <AppUart_SendInfo>
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000128 	.word	0x20000128

08000e78 <AppUart_SendInfo>:
/***********************************************************************************************************
 ******************************************** Local functions **********************************************
 ***********************************************************************************************************/

void AppUart_SendInfo(AppUart_StateMachine_t state)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
	memset(AppUart_Msg, '\0', sizeof(AppUart_Msg));
 8000e82:	2296      	movs	r2, #150	; 0x96
 8000e84:	2100      	movs	r1, #0
 8000e86:	4821      	ldr	r0, [pc, #132]	; (8000f0c <AppUart_SendInfo+0x94>)
 8000e88:	f005 fc92 	bl	80067b0 <memset>

	switch (AppUart_StateMachine) {
 8000e8c:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <AppUart_SendInfo+0x98>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b04      	cmp	r3, #4
 8000e92:	d830      	bhi.n	8000ef6 <AppUart_SendInfo+0x7e>
 8000e94:	a201      	add	r2, pc, #4	; (adr r2, 8000e9c <AppUart_SendInfo+0x24>)
 8000e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9a:	bf00      	nop
 8000e9c:	08000eb1 	.word	0x08000eb1
 8000ea0:	08000ebf 	.word	0x08000ebf
 8000ea4:	08000ecd 	.word	0x08000ecd
 8000ea8:	08000edb 	.word	0x08000edb
 8000eac:	08000ee9 	.word	0x08000ee9
		case APP_STATE_1_R:
			sprintf(AppUart_Msg, AppUart_MsgTable[APP_STATE_1_R]);
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <AppUart_SendInfo+0x9c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4815      	ldr	r0, [pc, #84]	; (8000f0c <AppUart_SendInfo+0x94>)
 8000eb8:	f005 fc82 	bl	80067c0 <siprintf>
			break;
 8000ebc:	e01c      	b.n	8000ef8 <AppUart_SendInfo+0x80>
		case APP_STATE_2_G:
			sprintf(AppUart_Msg, AppUart_MsgTable[APP_STATE_2_G]);
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <AppUart_SendInfo+0x9c>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4811      	ldr	r0, [pc, #68]	; (8000f0c <AppUart_SendInfo+0x94>)
 8000ec6:	f005 fc7b 	bl	80067c0 <siprintf>
			break;
 8000eca:	e015      	b.n	8000ef8 <AppUart_SendInfo+0x80>
		case APP_STATE_3_B:
			sprintf(AppUart_Msg, AppUart_MsgTable[APP_STATE_3_B]);
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <AppUart_SendInfo+0x9c>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480e      	ldr	r0, [pc, #56]	; (8000f0c <AppUart_SendInfo+0x94>)
 8000ed4:	f005 fc74 	bl	80067c0 <siprintf>
			break;
 8000ed8:	e00e      	b.n	8000ef8 <AppUart_SendInfo+0x80>
		case APP_STATE_4_SUMMARY:
			sprintf(AppUart_Msg, AppUart_MsgTable[APP_STATE_4_SUMMARY]);
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <AppUart_SendInfo+0x9c>)
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480a      	ldr	r0, [pc, #40]	; (8000f0c <AppUart_SendInfo+0x94>)
 8000ee2:	f005 fc6d 	bl	80067c0 <siprintf>
			break;
 8000ee6:	e007      	b.n	8000ef8 <AppUart_SendInfo+0x80>
		case APP_STATE_5_ERROR:
			sprintf(AppUart_Msg, AppUart_MsgTable[APP_STATE_5_ERROR]);
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <AppUart_SendInfo+0x9c>)
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	4619      	mov	r1, r3
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <AppUart_SendInfo+0x94>)
 8000ef0:	f005 fc66 	bl	80067c0 <siprintf>
			break;
 8000ef4:	e000      	b.n	8000ef8 <AppUart_SendInfo+0x80>
		default:
			break;
 8000ef6:	bf00      	nop
	}

	HAL_UART_Transmit_IT(&huart3, (uint8_t*)AppUart_Msg, sizeof(AppUart_Msg));
 8000ef8:	2296      	movs	r2, #150	; 0x96
 8000efa:	4904      	ldr	r1, [pc, #16]	; (8000f0c <AppUart_SendInfo+0x94>)
 8000efc:	4806      	ldr	r0, [pc, #24]	; (8000f18 <AppUart_SendInfo+0xa0>)
 8000efe:	f004 f8d3 	bl	80050a8 <HAL_UART_Transmit_IT>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	2000012c 	.word	0x2000012c
 8000f10:	20000128 	.word	0x20000128
 8000f14:	20000064 	.word	0x20000064
 8000f18:	200002f0 	.word	0x200002f0

08000f1c <AppUart_DecodeInputDec>:

uint16_t AppUart_DecodeInputDec(uint8_t len)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	static uint8_t mul[3] = {100U, 10U, 1U};
	uint16_t ret_val = 0U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	81fb      	strh	r3, [r7, #14]

	for(uint8_t i = 0; i < len; i++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	737b      	strb	r3, [r7, #13]
 8000f2e:	e016      	b.n	8000f5e <AppUart_DecodeInputDec+0x42>
	{
		ret_val += (uint16_t)APP_UART_CONVERT_TO_DEC(AppUart_UartRxData[i]) * mul[3-len+i];
 8000f30:	7b7b      	ldrb	r3, [r7, #13]
 8000f32:	4a10      	ldr	r2, [pc, #64]	; (8000f74 <AppUart_DecodeInputDec+0x58>)
 8000f34:	5cd3      	ldrb	r3, [r2, r3]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	3b30      	subs	r3, #48	; 0x30
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f1c3 0103 	rsb	r1, r3, #3
 8000f42:	7b7b      	ldrb	r3, [r7, #13]
 8000f44:	440b      	add	r3, r1
 8000f46:	490c      	ldr	r1, [pc, #48]	; (8000f78 <AppUart_DecodeInputDec+0x5c>)
 8000f48:	5ccb      	ldrb	r3, [r1, r3]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	fb12 f303 	smulbb	r3, r2, r3
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	89fb      	ldrh	r3, [r7, #14]
 8000f54:	4413      	add	r3, r2
 8000f56:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 8000f58:	7b7b      	ldrb	r3, [r7, #13]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	737b      	strb	r3, [r7, #13]
 8000f5e:	7b7a      	ldrb	r2, [r7, #13]
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d3e4      	bcc.n	8000f30 <AppUart_DecodeInputDec+0x14>
	}

	return ret_val;
 8000f66:	89fb      	ldrh	r3, [r7, #14]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	200001c4 	.word	0x200001c4
 8000f78:	20000078 	.word	0x20000078

08000f7c <AppUart_ProcessData>:

/* 0 - R, 1 - G, 2 - B */
void AppUart_ProcessData(uint8_t num)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
	uint8_t input;

	input = (uint8_t)AppUart_DecodeInputDec(3U);
 8000f86:	2003      	movs	r0, #3
 8000f88:	f7ff ffc8 	bl	8000f1c <AppUart_DecodeInputDec>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]

	if(input <= APP_UART_MAX_PWM_VALUE)
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	2b64      	cmp	r3, #100	; 0x64
 8000f94:	d819      	bhi.n	8000fca <AppUart_ProcessData+0x4e>
	{
		AppUartRGB[num] = input;
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	4912      	ldr	r1, [pc, #72]	; (8000fe4 <AppUart_ProcessData+0x68>)
 8000f9a:	7bfa      	ldrb	r2, [r7, #15]
 8000f9c:	54ca      	strb	r2, [r1, r3]

		if(AppUart_StateMachine < APP_STATE_3_B)
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <AppUart_ProcessData+0x6c>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d805      	bhi.n	8000fb2 <AppUart_ProcessData+0x36>
		{
			HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 3);
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	4910      	ldr	r1, [pc, #64]	; (8000fec <AppUart_ProcessData+0x70>)
 8000faa:	4811      	ldr	r0, [pc, #68]	; (8000ff0 <AppUart_ProcessData+0x74>)
 8000fac:	f004 f8da 	bl	8005164 <HAL_UART_Receive_IT>
 8000fb0:	e004      	b.n	8000fbc <AppUart_ProcessData+0x40>
		}
		else
		{
			HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 1);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	490d      	ldr	r1, [pc, #52]	; (8000fec <AppUart_ProcessData+0x70>)
 8000fb6:	480e      	ldr	r0, [pc, #56]	; (8000ff0 <AppUart_ProcessData+0x74>)
 8000fb8:	f004 f8d4 	bl	8005164 <HAL_UART_Receive_IT>
		}

		AppUart_StateMachine++;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <AppUart_ProcessData+0x6c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <AppUart_ProcessData+0x6c>)
 8000fc6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 1);
	}
	


}
 8000fc8:	e007      	b.n	8000fda <AppUart_ProcessData+0x5e>
		AppUart_StateMachine = APP_STATE_5_ERROR;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <AppUart_ProcessData+0x6c>)
 8000fcc:	2204      	movs	r2, #4
 8000fce:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 1);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4906      	ldr	r1, [pc, #24]	; (8000fec <AppUart_ProcessData+0x70>)
 8000fd4:	4806      	ldr	r0, [pc, #24]	; (8000ff0 <AppUart_ProcessData+0x74>)
 8000fd6:	f004 f8c5 	bl	8005164 <HAL_UART_Receive_IT>
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200001c8 	.word	0x200001c8
 8000fe8:	20000128 	.word	0x20000128
 8000fec:	200001c4 	.word	0x200001c4
 8000ff0:	200002f0 	.word	0x200002f0

08000ff4 <AppUart_ProcessSummary>:

void AppUart_ProcessSummary(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	AppCan_FillFrame(AppCanFrame5_Rgb, AppUartRGB);
 8000ff8:	4906      	ldr	r1, [pc, #24]	; (8001014 <AppUart_ProcessSummary+0x20>)
 8000ffa:	2004      	movs	r0, #4
 8000ffc:	f7ff fd50 	bl	8000aa0 <AppCan_FillFrame>

	AppUart_StateMachine = APP_STATE_1_R;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <AppUart_ProcessSummary+0x24>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 3);
 8001006:	2203      	movs	r2, #3
 8001008:	4904      	ldr	r1, [pc, #16]	; (800101c <AppUart_ProcessSummary+0x28>)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <AppUart_ProcessSummary+0x2c>)
 800100c:	f004 f8aa 	bl	8005164 <HAL_UART_Receive_IT>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200001c8 	.word	0x200001c8
 8001018:	20000128 	.word	0x20000128
 800101c:	200001c4 	.word	0x200001c4
 8001020:	200002f0 	.word	0x200002f0

08001024 <AppUart_ProcessError>:

void AppUart_ProcessError(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	AppUart_StateMachine = APP_STATE_1_R;
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <AppUart_ProcessError+0x18>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 3);
 800102e:	2203      	movs	r2, #3
 8001030:	4903      	ldr	r1, [pc, #12]	; (8001040 <AppUart_ProcessError+0x1c>)
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <AppUart_ProcessError+0x20>)
 8001034:	f004 f896 	bl	8005164 <HAL_UART_Receive_IT>
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000128 	.word	0x20000128
 8001040:	200001c4 	.word	0x200001c4
 8001044:	200002f0 	.word	0x200002f0

08001048 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800104e:	463b      	mov	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <MX_ADC1_Init+0x98>)
 800105c:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <MX_ADC1_Init+0x9c>)
 800105e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001062:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001066:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <MX_ADC1_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001076:	2200      	movs	r2, #0
 8001078:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MX_ADC1_Init+0x98>)
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001084:	2200      	movs	r2, #0
 8001086:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_ADC1_Init+0x98>)
 800108a:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <MX_ADC1_Init+0xa0>)
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_ADC1_Init+0x98>)
 8001096:	2201      	movs	r2, #1
 8001098:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_ADC1_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_ADC1_Init+0x98>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <MX_ADC1_Init+0x98>)
 80010aa:	f000 fd11 	bl	8001ad0 <HAL_ADC_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010b4:	f000 fa5e 	bl	8001574 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010b8:	2303      	movs	r3, #3
 80010ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010bc:	2301      	movs	r3, #1
 80010be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_ADC1_Init+0x98>)
 80010ca:	f000 feab 	bl	8001e24 <HAL_ADC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010d4:	f000 fa4e 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200001cc 	.word	0x200001cc
 80010e4:	40012000 	.word	0x40012000
 80010e8:	0f000001 	.word	0x0f000001

080010ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a15      	ldr	r2, [pc, #84]	; (8001160 <HAL_ADC_MspInit+0x74>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d123      	bne.n	8001156 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_ADC_MspInit+0x78>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	4a14      	ldr	r2, [pc, #80]	; (8001164 <HAL_ADC_MspInit+0x78>)
 8001114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001118:	6453      	str	r3, [r2, #68]	; 0x44
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_ADC_MspInit+0x78>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_ADC_MspInit+0x78>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <HAL_ADC_MspInit+0x78>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_ADC_MspInit+0x78>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800113e:	2308      	movs	r3, #8
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001142:	2303      	movs	r3, #3
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <HAL_ADC_MspInit+0x7c>)
 8001152:	f001 fc8f 	bl	8002a74 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001156:	bf00      	nop
 8001158:	3728      	adds	r7, #40	; 0x28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40012000 	.word	0x40012000
 8001164:	40023800 	.word	0x40023800
 8001168:	40020000 	.word	0x40020000

0800116c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_CAN1_Init+0x64>)
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <MX_CAN1_Init+0x68>)
 8001174:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 30;
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MX_CAN1_Init+0x64>)
 8001178:	221e      	movs	r2, #30
 800117a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_CAN1_Init+0x64>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_CAN1_Init+0x64>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_CAN1_Init+0x64>)
 800118a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800118e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_CAN1_Init+0x64>)
 8001192:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001196:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <MX_CAN1_Init+0x64>)
 800119a:	2200      	movs	r2, #0
 800119c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_CAN1_Init+0x64>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <MX_CAN1_Init+0x64>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_CAN1_Init+0x64>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <MX_CAN1_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_CAN1_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <MX_CAN1_Init+0x64>)
 80011be:	f001 f881 	bl	80022c4 <HAL_CAN_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80011c8:	f000 f9d4 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000214 	.word	0x20000214
 80011d4:	40006400 	.word	0x40006400

080011d8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a17      	ldr	r2, [pc, #92]	; (8001254 <HAL_CAN_MspInit+0x7c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d127      	bne.n	800124a <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_CAN_MspInit+0x80>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	4a16      	ldr	r2, [pc, #88]	; (8001258 <HAL_CAN_MspInit+0x80>)
 8001200:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001204:	6413      	str	r3, [r2, #64]	; 0x40
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_CAN_MspInit+0x80>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_CAN_MspInit+0x80>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a10      	ldr	r2, [pc, #64]	; (8001258 <HAL_CAN_MspInit+0x80>)
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_CAN_MspInit+0x80>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800122a:	2303      	movs	r3, #3
 800122c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001232:	2301      	movs	r3, #1
 8001234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001236:	2303      	movs	r3, #3
 8001238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800123a:	2309      	movs	r3, #9
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <HAL_CAN_MspInit+0x84>)
 8001246:	f001 fc15 	bl	8002a74 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800124a:	bf00      	nop
 800124c:	3728      	adds	r7, #40	; 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40006400 	.word	0x40006400
 8001258:	40023800 	.word	0x40023800
 800125c:	40020c00 	.word	0x40020c00

08001260 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	; 0x30
 8001264:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	4b60      	ldr	r3, [pc, #384]	; (80013f8 <MX_GPIO_Init+0x198>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a5f      	ldr	r2, [pc, #380]	; (80013f8 <MX_GPIO_Init+0x198>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b5d      	ldr	r3, [pc, #372]	; (80013f8 <MX_GPIO_Init+0x198>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800128e:	4b5a      	ldr	r3, [pc, #360]	; (80013f8 <MX_GPIO_Init+0x198>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a59      	ldr	r2, [pc, #356]	; (80013f8 <MX_GPIO_Init+0x198>)
 8001294:	f043 0320 	orr.w	r3, r3, #32
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b57      	ldr	r3, [pc, #348]	; (80013f8 <MX_GPIO_Init+0x198>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0320 	and.w	r3, r3, #32
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a6:	4b54      	ldr	r3, [pc, #336]	; (80013f8 <MX_GPIO_Init+0x198>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a53      	ldr	r2, [pc, #332]	; (80013f8 <MX_GPIO_Init+0x198>)
 80012ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b51      	ldr	r3, [pc, #324]	; (80013f8 <MX_GPIO_Init+0x198>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	4b4e      	ldr	r3, [pc, #312]	; (80013f8 <MX_GPIO_Init+0x198>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a4d      	ldr	r2, [pc, #308]	; (80013f8 <MX_GPIO_Init+0x198>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b4b      	ldr	r3, [pc, #300]	; (80013f8 <MX_GPIO_Init+0x198>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b48      	ldr	r3, [pc, #288]	; (80013f8 <MX_GPIO_Init+0x198>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a47      	ldr	r2, [pc, #284]	; (80013f8 <MX_GPIO_Init+0x198>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b45      	ldr	r3, [pc, #276]	; (80013f8 <MX_GPIO_Init+0x198>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ee:	4b42      	ldr	r3, [pc, #264]	; (80013f8 <MX_GPIO_Init+0x198>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a41      	ldr	r2, [pc, #260]	; (80013f8 <MX_GPIO_Init+0x198>)
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b3f      	ldr	r3, [pc, #252]	; (80013f8 <MX_GPIO_Init+0x198>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001306:	4b3c      	ldr	r3, [pc, #240]	; (80013f8 <MX_GPIO_Init+0x198>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a3b      	ldr	r2, [pc, #236]	; (80013f8 <MX_GPIO_Init+0x198>)
 800130c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <MX_GPIO_Init+0x198>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_PIN_GPIO_Port, DEBUG_PIN_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2101      	movs	r1, #1
 8001322:	4836      	ldr	r0, [pc, #216]	; (80013fc <MX_GPIO_Init+0x19c>)
 8001324:	f001 fd52 	bl	8002dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	2110      	movs	r1, #16
 800132c:	4834      	ldr	r0, [pc, #208]	; (8001400 <MX_GPIO_Init+0x1a0>)
 800132e:	f001 fd4d 	bl	8002dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	f244 0181 	movw	r1, #16513	; 0x4081
 8001338:	4832      	ldr	r0, [pc, #200]	; (8001404 <MX_GPIO_Init+0x1a4>)
 800133a:	f001 fd47 	bl	8002dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2140      	movs	r1, #64	; 0x40
 8001342:	4831      	ldr	r0, [pc, #196]	; (8001408 <MX_GPIO_Init+0x1a8>)
 8001344:	f001 fd42 	bl	8002dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800134c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800134e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001352:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	4619      	mov	r1, r3
 800135e:	482b      	ldr	r0, [pc, #172]	; (800140c <MX_GPIO_Init+0x1ac>)
 8001360:	f001 fb88 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEBUG_PIN_Pin;
 8001364:	2301      	movs	r3, #1
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DEBUG_PIN_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	4820      	ldr	r0, [pc, #128]	; (80013fc <MX_GPIO_Init+0x19c>)
 800137c:	f001 fb7a 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001380:	2310      	movs	r3, #16
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	4619      	mov	r1, r3
 8001396:	481a      	ldr	r0, [pc, #104]	; (8001400 <MX_GPIO_Init+0x1a0>)
 8001398:	f001 fb6c 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800139c:	f244 0381 	movw	r3, #16513	; 0x4081
 80013a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	4813      	ldr	r0, [pc, #76]	; (8001404 <MX_GPIO_Init+0x1a4>)
 80013b6:	f001 fb5d 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013ba:	2340      	movs	r3, #64	; 0x40
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4619      	mov	r1, r3
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <MX_GPIO_Init+0x1a8>)
 80013d2:	f001 fb4f 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	4807      	ldr	r0, [pc, #28]	; (8001408 <MX_GPIO_Init+0x1a8>)
 80013ea:	f001 fb43 	bl	8002a74 <HAL_GPIO_Init>

}
 80013ee:	bf00      	nop
 80013f0:	3730      	adds	r7, #48	; 0x30
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40021400 	.word	0x40021400
 8001400:	40020000 	.word	0x40020000
 8001404:	40020400 	.word	0x40020400
 8001408:	40021800 	.word	0x40021800
 800140c:	40020800 	.word	0x40020800

08001410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001414:	f000 faff 	bl	8001a16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001418:	f000 f816 	bl	8001448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141c:	f7ff ff20 	bl	8001260 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001420:	f000 fa38 	bl	8001894 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8001424:	f7ff fea2 	bl	800116c <MX_CAN1_Init>
  MX_TIM6_Init();
 8001428:	f000 f9d6 	bl	80017d8 <MX_TIM6_Init>
  MX_SPI1_Init();
 800142c:	f000 f8a8 	bl	8001580 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001430:	f7ff fe0a 	bl	8001048 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  AppImu_Init();
 8001434:	f7ff fbe8 	bl	8000c08 <AppImu_Init>
  AppCan_Init();
 8001438:	f7ff fb0a 	bl	8000a50 <AppCan_Init>
  AppSystem_Init();
 800143c:	f7ff fc9a 	bl	8000d74 <AppSystem_Init>
  AppUart_Init();
 8001440:	f7ff fcca 	bl	8000dd8 <AppUart_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001444:	e7fe      	b.n	8001444 <main+0x34>
	...

08001448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b094      	sub	sp, #80	; 0x50
 800144c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	2234      	movs	r2, #52	; 0x34
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f005 f9aa 	bl	80067b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800145c:	f107 0308 	add.w	r3, r7, #8
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800146c:	f001 fcc8 	bl	8002e00 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <SystemClock_Config+0xdc>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	4a2b      	ldr	r2, [pc, #172]	; (8001524 <SystemClock_Config+0xdc>)
 8001476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147a:	6413      	str	r3, [r2, #64]	; 0x40
 800147c:	4b29      	ldr	r3, [pc, #164]	; (8001524 <SystemClock_Config+0xdc>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001488:	4b27      	ldr	r3, [pc, #156]	; (8001528 <SystemClock_Config+0xe0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001490:	4a25      	ldr	r2, [pc, #148]	; (8001528 <SystemClock_Config+0xe0>)
 8001492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <SystemClock_Config+0xe0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014a4:	2301      	movs	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ae:	2302      	movs	r3, #2
 80014b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014b8:	2304      	movs	r3, #4
 80014ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80014bc:	2360      	movs	r3, #96	; 0x60
 80014be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c0:	2302      	movs	r3, #2
 80014c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014c4:	2304      	movs	r3, #4
 80014c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 fcf5 	bl	8002ec0 <HAL_RCC_OscConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014dc:	f000 f84a 	bl	8001574 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014e0:	f001 fc9e 	bl	8002e20 <HAL_PWREx_EnableOverDrive>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80014ea:	f000 f843 	bl	8001574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ee:	230f      	movs	r3, #15
 80014f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f2:	2302      	movs	r3, #2
 80014f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001504:	f107 0308 	add.w	r3, r7, #8
 8001508:	2103      	movs	r1, #3
 800150a:	4618      	mov	r0, r3
 800150c:	f001 ff86 	bl	800341c <HAL_RCC_ClockConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001516:	f000 f82d 	bl	8001574 <Error_Handler>
  }
}
 800151a:	bf00      	nop
 800151c:	3750      	adds	r7, #80	; 0x50
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40007000 	.word	0x40007000

0800152c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a04      	ldr	r2, [pc, #16]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d101      	bne.n	8001542 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		AppSystem_MainTask();
 800153e:	f7ff fc23 	bl	8000d88 <AppSystem_MainTask>
	}
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40001000 	.word	0x40001000

08001550 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <HAL_UART_RxCpltCallback+0x20>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d101      	bne.n	8001566 <HAL_UART_RxCpltCallback+0x16>
	{
		AppUart_ProcessInput();
 8001562:	f7ff fc59 	bl	8000e18 <AppUart_ProcessInput>
	}
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40004800 	.word	0x40004800

08001574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001578:	b672      	cpsid	i
}
 800157a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800157c:	e7fe      	b.n	800157c <Error_Handler+0x8>
	...

08001580 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001584:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <MX_SPI1_Init+0x74>)
 8001586:	4a1c      	ldr	r2, [pc, #112]	; (80015f8 <MX_SPI1_Init+0x78>)
 8001588:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800158a:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <MX_SPI1_Init+0x74>)
 800158c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001590:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <MX_SPI1_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <MX_SPI1_Init+0x74>)
 800159a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800159e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <MX_SPI1_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <MX_SPI1_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_SPI1_Init+0x74>)
 80015ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_SPI1_Init+0x74>)
 80015b6:	2220      	movs	r2, #32
 80015b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_SPI1_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_SPI1_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <MX_SPI1_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_SPI1_Init+0x74>)
 80015ce:	2207      	movs	r2, #7
 80015d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <MX_SPI1_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_SPI1_Init+0x74>)
 80015da:	2208      	movs	r2, #8
 80015dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <MX_SPI1_Init+0x74>)
 80015e0:	f002 fd6a 	bl	80040b8 <HAL_SPI_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015ea:	f7ff ffc3 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	2000023c 	.word	0x2000023c
 80015f8:	40013000 	.word	0x40013000

080015fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a17      	ldr	r2, [pc, #92]	; (8001678 <HAL_SPI_MspInit+0x7c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d127      	bne.n	800166e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_SPI_MspInit+0x80>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	4a16      	ldr	r2, [pc, #88]	; (800167c <HAL_SPI_MspInit+0x80>)
 8001624:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001628:	6453      	str	r3, [r2, #68]	; 0x44
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <HAL_SPI_MspInit+0x80>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_SPI_MspInit+0x80>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a10      	ldr	r2, [pc, #64]	; (800167c <HAL_SPI_MspInit+0x80>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_SPI_MspInit+0x80>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800164e:	23e0      	movs	r3, #224	; 0xe0
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800165e:	2305      	movs	r3, #5
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <HAL_SPI_MspInit+0x84>)
 800166a:	f001 fa03 	bl	8002a74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	; 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40013000 	.word	0x40013000
 800167c:	40023800 	.word	0x40023800
 8001680:	40020000 	.word	0x40020000

08001684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <HAL_MspInit+0x44>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <HAL_MspInit+0x44>)
 8001690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <HAL_MspInit+0x44>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_MspInit+0x44>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a08      	ldr	r2, [pc, #32]	; (80016c8 <HAL_MspInit+0x44>)
 80016a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_MspInit+0x44>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800

080016cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <NMI_Handler+0x4>

080016d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <HardFault_Handler+0x4>

080016d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <MemManage_Handler+0x4>

080016de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <BusFault_Handler+0x4>

080016e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <UsageFault_Handler+0x4>

080016ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001718:	f000 f9ba 	bl	8001a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}

08001720 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <USART3_IRQHandler+0x10>)
 8001726:	f003 fd61 	bl	80051ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200002f0 	.word	0x200002f0

08001734 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <TIM6_DAC_IRQHandler+0x10>)
 800173a:	f003 f9d3 	bl	8004ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200002a4 	.word	0x200002a4

08001748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001750:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <_sbrk+0x5c>)
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <_sbrk+0x60>)
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <_sbrk+0x64>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <_sbrk+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	429a      	cmp	r2, r3
 8001776:	d207      	bcs.n	8001788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001778:	f004 fff0 	bl	800675c <__errno>
 800177c:	4603      	mov	r3, r0
 800177e:	220c      	movs	r2, #12
 8001780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	e009      	b.n	800179c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	4a05      	ldr	r2, [pc, #20]	; (80017ac <_sbrk+0x64>)
 8001798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20080000 	.word	0x20080000
 80017a8:	00000400 	.word	0x00000400
 80017ac:	200002a0 	.word	0x200002a0
 80017b0:	20000390 	.word	0x20000390

080017b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <SystemInit+0x20>)
 80017ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <SystemInit+0x20>)
 80017c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <MX_TIM6_Init+0x68>)
 80017ea:	4a16      	ldr	r2, [pc, #88]	; (8001844 <MX_TIM6_Init+0x6c>)
 80017ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <MX_TIM6_Init+0x68>)
 80017f0:	f242 527f 	movw	r2, #9599	; 0x257f
 80017f4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <MX_TIM6_Init+0x68>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <MX_TIM6_Init+0x68>)
 80017fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001802:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <MX_TIM6_Init+0x68>)
 8001806:	2280      	movs	r2, #128	; 0x80
 8001808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800180a:	480d      	ldr	r0, [pc, #52]	; (8001840 <MX_TIM6_Init+0x68>)
 800180c:	f003 f89a 	bl	8004944 <HAL_TIM_Base_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001816:	f7ff fead 	bl	8001574 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	4619      	mov	r1, r3
 8001826:	4806      	ldr	r0, [pc, #24]	; (8001840 <MX_TIM6_Init+0x68>)
 8001828:	f003 fb44 	bl	8004eb4 <HAL_TIMEx_MasterConfigSynchronization>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001832:	f7ff fe9f 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200002a4 	.word	0x200002a4
 8001844:	40001000 	.word	0x40001000

08001848 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <HAL_TIM_Base_MspInit+0x44>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d113      	bne.n	8001882 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <HAL_TIM_Base_MspInit+0x48>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a0c      	ldr	r2, [pc, #48]	; (8001890 <HAL_TIM_Base_MspInit+0x48>)
 8001860:	f043 0310 	orr.w	r3, r3, #16
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <HAL_TIM_Base_MspInit+0x48>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 0310 	and.w	r3, r3, #16
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2036      	movs	r0, #54	; 0x36
 8001878:	f001 f833 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800187c:	2036      	movs	r0, #54	; 0x36
 800187e:	f001 f84c 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40001000 	.word	0x40001000
 8001890:	40023800 	.word	0x40023800

08001894 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <MX_USART3_UART_Init+0x58>)
 800189a:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <MX_USART3_UART_Init+0x5c>)
 800189c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <MX_USART3_UART_Init+0x58>)
 80018a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_USART3_UART_Init+0x58>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_USART3_UART_Init+0x58>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_USART3_UART_Init+0x58>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_USART3_UART_Init+0x58>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <MX_USART3_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_USART3_UART_Init+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <MX_USART3_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_USART3_UART_Init+0x58>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_USART3_UART_Init+0x58>)
 80018d8:	f003 fb98 	bl	800500c <HAL_UART_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80018e2:	f7ff fe47 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200002f0 	.word	0x200002f0
 80018f0:	40004800 	.word	0x40004800

080018f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b0ae      	sub	sp, #184	; 0xb8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	2290      	movs	r2, #144	; 0x90
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f004 ff4b 	bl	80067b0 <memset>
  if(uartHandle->Instance==USART3)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a26      	ldr	r2, [pc, #152]	; (80019b8 <HAL_UART_MspInit+0xc4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d144      	bne.n	80019ae <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001928:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800192a:	2300      	movs	r3, #0
 800192c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4618      	mov	r0, r3
 8001934:	f001 ff98 	bl	8003868 <HAL_RCCEx_PeriphCLKConfig>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800193e:	f7ff fe19 	bl	8001574 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001942:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <HAL_UART_MspInit+0xc8>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a1d      	ldr	r2, [pc, #116]	; (80019bc <HAL_UART_MspInit+0xc8>)
 8001948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <HAL_UART_MspInit+0xc8>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <HAL_UART_MspInit+0xc8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a17      	ldr	r2, [pc, #92]	; (80019bc <HAL_UART_MspInit+0xc8>)
 8001960:	f043 0308 	orr.w	r3, r3, #8
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b15      	ldr	r3, [pc, #84]	; (80019bc <HAL_UART_MspInit+0xc8>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001972:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001976:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800198c:	2307      	movs	r3, #7
 800198e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001992:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001996:	4619      	mov	r1, r3
 8001998:	4809      	ldr	r0, [pc, #36]	; (80019c0 <HAL_UART_MspInit+0xcc>)
 800199a:	f001 f86b 	bl	8002a74 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2101      	movs	r1, #1
 80019a2:	2027      	movs	r0, #39	; 0x27
 80019a4:	f000 ff9d 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019a8:	2027      	movs	r0, #39	; 0x27
 80019aa:	f000 ffb6 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80019ae:	bf00      	nop
 80019b0:	37b8      	adds	r7, #184	; 0xb8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40004800 	.word	0x40004800
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40020c00 	.word	0x40020c00

080019c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c8:	480d      	ldr	r0, [pc, #52]	; (8001a00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ca:	490e      	ldr	r1, [pc, #56]	; (8001a04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019cc:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019e0:	4c0b      	ldr	r4, [pc, #44]	; (8001a10 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ee:	f7ff fee1 	bl	80017b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019f2:	f004 feb9 	bl	8006768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f6:	f7ff fd0b 	bl	8001410 <main>
  bx  lr    
 80019fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019fc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a04:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8001a08:	0800725c 	.word	0x0800725c
  ldr r2, =_sbss
 8001a0c:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8001a10:	2000038c 	.word	0x2000038c

08001a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a14:	e7fe      	b.n	8001a14 <ADC_IRQHandler>

08001a16 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1a:	2003      	movs	r0, #3
 8001a1c:	f000 ff56 	bl	80028cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a20:	2000      	movs	r0, #0
 8001a22:	f000 f805 	bl	8001a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a26:	f7ff fe2d 	bl	8001684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_InitTick+0x54>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_InitTick+0x58>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 ff71 	bl	8002936 <HAL_SYSTICK_Config>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00e      	b.n	8001a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0f      	cmp	r3, #15
 8001a62:	d80a      	bhi.n	8001a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a64:	2200      	movs	r2, #0
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f000 ff39 	bl	80028e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a70:	4a06      	ldr	r2, [pc, #24]	; (8001a8c <HAL_InitTick+0x5c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e000      	b.n	8001a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2000007c 	.word	0x2000007c
 8001a88:	20000084 	.word	0x20000084
 8001a8c:	20000080 	.word	0x20000080

08001a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_IncTick+0x20>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_IncTick+0x24>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <HAL_IncTick+0x24>)
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000084 	.word	0x20000084
 8001ab4:	20000378 	.word	0x20000378

08001ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <HAL_GetTick+0x14>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000378 	.word	0x20000378

08001ad0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e031      	b.n	8001b4a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fafc 	bl	80010ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d116      	bne.n	8001b3c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <HAL_ADC_Init+0x84>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	f043 0202 	orr.w	r2, r3, #2
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 fad6 	bl	80020d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f023 0303 	bic.w	r3, r3, #3
 8001b32:	f043 0201 	orr.w	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40
 8001b3a:	e001      	b.n	8001b40 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	ffffeefd 	.word	0xffffeefd

08001b58 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_Start+0x1a>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e0ad      	b.n	8001cce <HAL_ADC_Start+0x176>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d018      	beq.n	8001bba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001b98:	4b50      	ldr	r3, [pc, #320]	; (8001cdc <HAL_ADC_Start+0x184>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a50      	ldr	r2, [pc, #320]	; (8001ce0 <HAL_ADC_Start+0x188>)
 8001b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba2:	0c9a      	lsrs	r2, r3, #18
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001bac:	e002      	b.n	8001bb4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f9      	bne.n	8001bae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d175      	bne.n	8001cb4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bcc:	4b45      	ldr	r3, [pc, #276]	; (8001ce4 <HAL_ADC_Start+0x18c>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d007      	beq.n	8001bf6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c02:	d106      	bne.n	8001c12 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c08:	f023 0206 	bic.w	r2, r3, #6
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	645a      	str	r2, [r3, #68]	; 0x44
 8001c10:	e002      	b.n	8001c18 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c28:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001c2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ce8 <HAL_ADC_Start+0x190>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10f      	bne.n	8001c56 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d143      	bne.n	8001ccc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	e03a      	b.n	8001ccc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a24      	ldr	r2, [pc, #144]	; (8001cec <HAL_ADC_Start+0x194>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d10e      	bne.n	8001c7e <HAL_ADC_Start+0x126>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d107      	bne.n	8001c7e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c7c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <HAL_ADC_Start+0x190>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d120      	bne.n	8001ccc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a18      	ldr	r2, [pc, #96]	; (8001cf0 <HAL_ADC_Start+0x198>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d11b      	bne.n	8001ccc <HAL_ADC_Start+0x174>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d114      	bne.n	8001ccc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	e00b      	b.n	8001ccc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f043 0210 	orr.w	r2, r3, #16
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc4:	f043 0201 	orr.w	r2, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	2000007c 	.word	0x2000007c
 8001ce0:	431bde83 	.word	0x431bde83
 8001ce4:	fffff8fe 	.word	0xfffff8fe
 8001ce8:	40012300 	.word	0x40012300
 8001cec:	40012000 	.word	0x40012000
 8001cf0:	40012200 	.word	0x40012200

08001cf4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d10:	d113      	bne.n	8001d3a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d20:	d10b      	bne.n	8001d3a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f043 0220 	orr.w	r2, r3, #32
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e063      	b.n	8001e02 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d3a:	f7ff febd 	bl	8001ab8 <HAL_GetTick>
 8001d3e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d40:	e021      	b.n	8001d86 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d48:	d01d      	beq.n	8001d86 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <HAL_ADC_PollForConversion+0x6c>
 8001d50:	f7ff feb2 	bl	8001ab8 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d212      	bcs.n	8001d86 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d00b      	beq.n	8001d86 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f043 0204 	orr.w	r2, r3, #4
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e03d      	b.n	8001e02 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d1d6      	bne.n	8001d42 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0212 	mvn.w	r2, #18
 8001d9c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d123      	bne.n	8001e00 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d11f      	bne.n	8001e00 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d111      	bne.n	8001e00 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d105      	bne.n	8001e00 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x1c>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e136      	b.n	80020ae <HAL_ADC_ConfigChannel+0x28a>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b09      	cmp	r3, #9
 8001e4e:	d93a      	bls.n	8001ec6 <HAL_ADC_ConfigChannel+0xa2>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e58:	d035      	beq.n	8001ec6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68d9      	ldr	r1, [r3, #12]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	461a      	mov	r2, r3
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3b1e      	subs	r3, #30
 8001e70:	2207      	movs	r2, #7
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43da      	mvns	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a8d      	ldr	r2, [pc, #564]	; (80020bc <HAL_ADC_ConfigChannel+0x298>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d10a      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68d9      	ldr	r1, [r3, #12]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	061a      	lsls	r2, r3, #24
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e9e:	e035      	b.n	8001f0c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68d9      	ldr	r1, [r3, #12]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4403      	add	r3, r0
 8001eb8:	3b1e      	subs	r3, #30
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ec4:	e022      	b.n	8001f0c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6919      	ldr	r1, [r3, #16]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	2207      	movs	r2, #7
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43da      	mvns	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	400a      	ands	r2, r1
 8001ee8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6919      	ldr	r1, [r3, #16]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	4603      	mov	r3, r0
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4403      	add	r3, r0
 8001f02:	409a      	lsls	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b06      	cmp	r3, #6
 8001f12:	d824      	bhi.n	8001f5e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	3b05      	subs	r3, #5
 8001f26:	221f      	movs	r2, #31
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43da      	mvns	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	400a      	ands	r2, r1
 8001f34:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3b05      	subs	r3, #5
 8001f50:	fa00 f203 	lsl.w	r2, r0, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	635a      	str	r2, [r3, #52]	; 0x34
 8001f5c:	e04c      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b0c      	cmp	r3, #12
 8001f64:	d824      	bhi.n	8001fb0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	3b23      	subs	r3, #35	; 0x23
 8001f78:	221f      	movs	r2, #31
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	400a      	ands	r2, r1
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	4618      	mov	r0, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3b23      	subs	r3, #35	; 0x23
 8001fa2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30
 8001fae:	e023      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3b41      	subs	r3, #65	; 0x41
 8001fc2:	221f      	movs	r2, #31
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43da      	mvns	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	400a      	ands	r2, r1
 8001fd0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	3b41      	subs	r3, #65	; 0x41
 8001fec:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a30      	ldr	r2, [pc, #192]	; (80020c0 <HAL_ADC_ConfigChannel+0x29c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d10a      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x1f4>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800200a:	d105      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	4a2c      	ldr	r2, [pc, #176]	; (80020c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002012:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002016:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a28      	ldr	r2, [pc, #160]	; (80020c0 <HAL_ADC_ConfigChannel+0x29c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d10f      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x21e>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b12      	cmp	r3, #18
 8002028:	d10b      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4a25      	ldr	r2, [pc, #148]	; (80020c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002030:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002034:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002036:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4a22      	ldr	r2, [pc, #136]	; (80020c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800203c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002040:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <HAL_ADC_ConfigChannel+0x29c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d12b      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x280>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a1a      	ldr	r2, [pc, #104]	; (80020bc <HAL_ADC_ConfigChannel+0x298>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d003      	beq.n	800205e <HAL_ADC_ConfigChannel+0x23a>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2b11      	cmp	r3, #17
 800205c:	d122      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800205e:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4a18      	ldr	r2, [pc, #96]	; (80020c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002064:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002068:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4a15      	ldr	r2, [pc, #84]	; (80020c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002070:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002074:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a10      	ldr	r2, [pc, #64]	; (80020bc <HAL_ADC_ConfigChannel+0x298>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d111      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a11      	ldr	r2, [pc, #68]	; (80020cc <HAL_ADC_ConfigChannel+0x2a8>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	0c9a      	lsrs	r2, r3, #18
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002096:	e002      	b.n	800209e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	3b01      	subs	r3, #1
 800209c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f9      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	10000012 	.word	0x10000012
 80020c0:	40012000 	.word	0x40012000
 80020c4:	40012300 	.word	0x40012300
 80020c8:	2000007c 	.word	0x2000007c
 80020cc:	431bde83 	.word	0x431bde83

080020d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020d8:	4b78      	ldr	r3, [pc, #480]	; (80022bc <ADC_Init+0x1ec>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4a77      	ldr	r2, [pc, #476]	; (80022bc <ADC_Init+0x1ec>)
 80020de:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020e2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020e4:	4b75      	ldr	r3, [pc, #468]	; (80022bc <ADC_Init+0x1ec>)
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4973      	ldr	r1, [pc, #460]	; (80022bc <ADC_Init+0x1ec>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002100:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6859      	ldr	r1, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	021a      	lsls	r2, r3, #8
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002124:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6859      	ldr	r1, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002146:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6899      	ldr	r1, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215e:	4a58      	ldr	r2, [pc, #352]	; (80022c0 <ADC_Init+0x1f0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d022      	beq.n	80021aa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002172:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6899      	ldr	r1, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002194:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6899      	ldr	r1, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	e00f      	b.n	80021ca <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0202 	bic.w	r2, r2, #2
 80021d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6899      	ldr	r1, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	005a      	lsls	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d01b      	beq.n	8002230 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002206:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002216:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6859      	ldr	r1, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	3b01      	subs	r3, #1
 8002224:	035a      	lsls	r2, r3, #13
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	e007      	b.n	8002240 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800223e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800224e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	3b01      	subs	r3, #1
 800225c:	051a      	lsls	r2, r3, #20
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002274:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6899      	ldr	r1, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002282:	025a      	lsls	r2, r3, #9
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800229a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6899      	ldr	r1, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	029a      	lsls	r2, r3, #10
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	609a      	str	r2, [r3, #8]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	40012300 	.word	0x40012300
 80022c0:	0f000001 	.word	0x0f000001

080022c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0ed      	b.n	80024b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d102      	bne.n	80022e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7fe ff78 	bl	80011d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022f8:	f7ff fbde 	bl	8001ab8 <HAL_GetTick>
 80022fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022fe:	e012      	b.n	8002326 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002300:	f7ff fbda 	bl	8001ab8 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b0a      	cmp	r3, #10
 800230c:	d90b      	bls.n	8002326 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2205      	movs	r2, #5
 800231e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e0c5      	b.n	80024b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0e5      	beq.n	8002300 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0202 	bic.w	r2, r2, #2
 8002342:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002344:	f7ff fbb8 	bl	8001ab8 <HAL_GetTick>
 8002348:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800234a:	e012      	b.n	8002372 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800234c:	f7ff fbb4 	bl	8001ab8 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b0a      	cmp	r3, #10
 8002358:	d90b      	bls.n	8002372 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2205      	movs	r2, #5
 800236a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e09f      	b.n	80024b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1e5      	bne.n	800234c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7e1b      	ldrb	r3, [r3, #24]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d108      	bne.n	800239a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	e007      	b.n	80023aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	7e5b      	ldrb	r3, [r3, #25]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d108      	bne.n	80023c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	e007      	b.n	80023d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	7e9b      	ldrb	r3, [r3, #26]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d108      	bne.n	80023ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0220 	orr.w	r2, r2, #32
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e007      	b.n	80023fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0220 	bic.w	r2, r2, #32
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	7edb      	ldrb	r3, [r3, #27]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d108      	bne.n	8002418 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0210 	bic.w	r2, r2, #16
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	e007      	b.n	8002428 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0210 	orr.w	r2, r2, #16
 8002426:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	7f1b      	ldrb	r3, [r3, #28]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d108      	bne.n	8002442 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0208 	orr.w	r2, r2, #8
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	e007      	b.n	8002452 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0208 	bic.w	r2, r2, #8
 8002450:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	7f5b      	ldrb	r3, [r3, #29]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d108      	bne.n	800246c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0204 	orr.w	r2, r2, #4
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	e007      	b.n	800247c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0204 	bic.w	r2, r2, #4
 800247a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	ea42 0103 	orr.w	r1, r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	1e5a      	subs	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d12e      	bne.n	800252c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2202      	movs	r2, #2
 80024d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0201 	bic.w	r2, r2, #1
 80024e4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024e6:	f7ff fae7 	bl	8001ab8 <HAL_GetTick>
 80024ea:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024ec:	e012      	b.n	8002514 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024ee:	f7ff fae3 	bl	8001ab8 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b0a      	cmp	r3, #10
 80024fa:	d90b      	bls.n	8002514 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2205      	movs	r2, #5
 800250c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e012      	b.n	800253a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1e5      	bne.n	80024ee <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	e006      	b.n	800253a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
  }
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002542:	b480      	push	{r7}
 8002544:	b089      	sub	sp, #36	; 0x24
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002556:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002560:	7ffb      	ldrb	r3, [r7, #31]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d003      	beq.n	800256e <HAL_CAN_AddTxMessage+0x2c>
 8002566:	7ffb      	ldrb	r3, [r7, #31]
 8002568:	2b02      	cmp	r3, #2
 800256a:	f040 80ad 	bne.w	80026c8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800257e:	2b00      	cmp	r3, #0
 8002580:	d105      	bne.n	800258e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 8095 	beq.w	80026b8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	0e1b      	lsrs	r3, r3, #24
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002598:	2201      	movs	r2, #1
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	409a      	lsls	r2, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10d      	bne.n	80025c6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025b4:	68f9      	ldr	r1, [r7, #12]
 80025b6:	6809      	ldr	r1, [r1, #0]
 80025b8:	431a      	orrs	r2, r3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	3318      	adds	r3, #24
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	440b      	add	r3, r1
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	e00f      	b.n	80025e6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025d0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025d6:	68f9      	ldr	r1, [r7, #12]
 80025d8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80025da:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	3318      	adds	r3, #24
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	440b      	add	r3, r1
 80025e4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6819      	ldr	r1, [r3, #0]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3318      	adds	r3, #24
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	440b      	add	r3, r1
 80025f6:	3304      	adds	r3, #4
 80025f8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	7d1b      	ldrb	r3, [r3, #20]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d111      	bne.n	8002626 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3318      	adds	r3, #24
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	4413      	add	r3, r2
 800260e:	3304      	adds	r3, #4
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	6811      	ldr	r1, [r2, #0]
 8002616:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	3318      	adds	r3, #24
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	440b      	add	r3, r1
 8002622:	3304      	adds	r3, #4
 8002624:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3307      	adds	r3, #7
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	061a      	lsls	r2, r3, #24
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3306      	adds	r3, #6
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	041b      	lsls	r3, r3, #16
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3305      	adds	r3, #5
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	021b      	lsls	r3, r3, #8
 8002640:	4313      	orrs	r3, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	3204      	adds	r2, #4
 8002646:	7812      	ldrb	r2, [r2, #0]
 8002648:	4610      	mov	r0, r2
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	6811      	ldr	r1, [r2, #0]
 800264e:	ea43 0200 	orr.w	r2, r3, r0
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	440b      	add	r3, r1
 8002658:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800265c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3303      	adds	r3, #3
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	061a      	lsls	r2, r3, #24
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3302      	adds	r3, #2
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	041b      	lsls	r3, r3, #16
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3301      	adds	r3, #1
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	021b      	lsls	r3, r3, #8
 8002678:	4313      	orrs	r3, r2
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	7812      	ldrb	r2, [r2, #0]
 800267e:	4610      	mov	r0, r2
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	6811      	ldr	r1, [r2, #0]
 8002684:	ea43 0200 	orr.w	r2, r3, r0
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	440b      	add	r3, r1
 800268e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002692:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	3318      	adds	r3, #24
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	4413      	add	r3, r2
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	6811      	ldr	r1, [r2, #0]
 80026a6:	f043 0201 	orr.w	r2, r3, #1
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	3318      	adds	r3, #24
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	440b      	add	r3, r1
 80026b2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e00e      	b.n	80026d6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e006      	b.n	80026d6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
  }
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3724      	adds	r7, #36	; 0x24
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b085      	sub	sp, #20
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f6:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80026f8:	7afb      	ldrb	r3, [r7, #11]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d002      	beq.n	8002704 <HAL_CAN_IsTxMessagePending+0x22>
 80026fe:	7afb      	ldrb	r3, [r7, #11]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d10b      	bne.n	800271c <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	069b      	lsls	r3, r3, #26
 800270e:	401a      	ands	r2, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	069b      	lsls	r3, r3, #26
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8002718:	2301      	movs	r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800271c:	68fb      	ldr	r3, [r7, #12]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <__NVIC_SetPriorityGrouping+0x40>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002748:	4013      	ands	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 8002756:	4313      	orrs	r3, r2
 8002758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275a:	4a04      	ldr	r2, [pc, #16]	; (800276c <__NVIC_SetPriorityGrouping+0x40>)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	60d3      	str	r3, [r2, #12]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00
 8002770:	05fa0000 	.word	0x05fa0000

08002774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <__NVIC_GetPriorityGrouping+0x18>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 0307 	and.w	r3, r3, #7
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db0b      	blt.n	80027ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	4907      	ldr	r1, [pc, #28]	; (80027c8 <__NVIC_EnableIRQ+0x38>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000e100 	.word	0xe000e100

080027cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	6039      	str	r1, [r7, #0]
 80027d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db0a      	blt.n	80027f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	490c      	ldr	r1, [pc, #48]	; (8002818 <__NVIC_SetPriority+0x4c>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	0112      	lsls	r2, r2, #4
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	440b      	add	r3, r1
 80027f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f4:	e00a      	b.n	800280c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4908      	ldr	r1, [pc, #32]	; (800281c <__NVIC_SetPriority+0x50>)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	3b04      	subs	r3, #4
 8002804:	0112      	lsls	r2, r2, #4
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	440b      	add	r3, r1
 800280a:	761a      	strb	r2, [r3, #24]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000e100 	.word	0xe000e100
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f1c3 0307 	rsb	r3, r3, #7
 800283a:	2b04      	cmp	r3, #4
 800283c:	bf28      	it	cs
 800283e:	2304      	movcs	r3, #4
 8002840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3304      	adds	r3, #4
 8002846:	2b06      	cmp	r3, #6
 8002848:	d902      	bls.n	8002850 <NVIC_EncodePriority+0x30>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3b03      	subs	r3, #3
 800284e:	e000      	b.n	8002852 <NVIC_EncodePriority+0x32>
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	f04f 32ff 	mov.w	r2, #4294967295
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	401a      	ands	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002868:	f04f 31ff 	mov.w	r1, #4294967295
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	43d9      	mvns	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	4313      	orrs	r3, r2
         );
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002898:	d301      	bcc.n	800289e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800289a:	2301      	movs	r3, #1
 800289c:	e00f      	b.n	80028be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <SysTick_Config+0x40>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a6:	210f      	movs	r1, #15
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ac:	f7ff ff8e 	bl	80027cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <SysTick_Config+0x40>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <SysTick_Config+0x40>)
 80028b8:	2207      	movs	r2, #7
 80028ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	e000e010 	.word	0xe000e010

080028cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff29 	bl	800272c <__NVIC_SetPriorityGrouping>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b086      	sub	sp, #24
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f4:	f7ff ff3e 	bl	8002774 <__NVIC_GetPriorityGrouping>
 80028f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	6978      	ldr	r0, [r7, #20]
 8002900:	f7ff ff8e 	bl	8002820 <NVIC_EncodePriority>
 8002904:	4602      	mov	r2, r0
 8002906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff5d 	bl	80027cc <__NVIC_SetPriority>
}
 8002912:	bf00      	nop
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff31 	bl	8002790 <__NVIC_EnableIRQ>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ffa2 	bl	8002888 <SysTick_Config>
 8002944:	4603      	mov	r3, r0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800295c:	f7ff f8ac 	bl	8001ab8 <HAL_GetTick>
 8002960:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d008      	beq.n	8002980 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2280      	movs	r2, #128	; 0x80
 8002972:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e052      	b.n	8002a26 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0216 	bic.w	r2, r2, #22
 800298e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800299e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d103      	bne.n	80029b0 <HAL_DMA_Abort+0x62>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0208 	bic.w	r2, r2, #8
 80029be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d0:	e013      	b.n	80029fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029d2:	f7ff f871 	bl	8001ab8 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b05      	cmp	r3, #5
 80029de:	d90c      	bls.n	80029fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2203      	movs	r2, #3
 80029ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e015      	b.n	8002a26 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e4      	bne.n	80029d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0c:	223f      	movs	r2, #63	; 0x3f
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d004      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2280      	movs	r2, #128	; 0x80
 8002a46:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e00c      	b.n	8002a66 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2205      	movs	r2, #5
 8002a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0201 	bic.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	e175      	b.n	8002d80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a94:	2201      	movs	r2, #1
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	f040 8164 	bne.w	8002d7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d005      	beq.n	8002aca <HAL_GPIO_Init+0x56>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d130      	bne.n	8002b2c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b00:	2201      	movs	r2, #1
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 0201 	and.w	r2, r3, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d017      	beq.n	8002b68 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d123      	bne.n	8002bbc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	08da      	lsrs	r2, r3, #3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3208      	adds	r2, #8
 8002b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	220f      	movs	r2, #15
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	08da      	lsrs	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3208      	adds	r2, #8
 8002bb6:	69b9      	ldr	r1, [r7, #24]
 8002bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0203 	and.w	r2, r3, #3
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80be 	beq.w	8002d7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfe:	4b66      	ldr	r3, [pc, #408]	; (8002d98 <HAL_GPIO_Init+0x324>)
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	4a65      	ldr	r2, [pc, #404]	; (8002d98 <HAL_GPIO_Init+0x324>)
 8002c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c08:	6453      	str	r3, [r2, #68]	; 0x44
 8002c0a:	4b63      	ldr	r3, [pc, #396]	; (8002d98 <HAL_GPIO_Init+0x324>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c16:	4a61      	ldr	r2, [pc, #388]	; (8002d9c <HAL_GPIO_Init+0x328>)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	220f      	movs	r2, #15
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a58      	ldr	r2, [pc, #352]	; (8002da0 <HAL_GPIO_Init+0x32c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d037      	beq.n	8002cb2 <HAL_GPIO_Init+0x23e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a57      	ldr	r2, [pc, #348]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d031      	beq.n	8002cae <HAL_GPIO_Init+0x23a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a56      	ldr	r2, [pc, #344]	; (8002da8 <HAL_GPIO_Init+0x334>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d02b      	beq.n	8002caa <HAL_GPIO_Init+0x236>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a55      	ldr	r2, [pc, #340]	; (8002dac <HAL_GPIO_Init+0x338>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d025      	beq.n	8002ca6 <HAL_GPIO_Init+0x232>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a54      	ldr	r2, [pc, #336]	; (8002db0 <HAL_GPIO_Init+0x33c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d01f      	beq.n	8002ca2 <HAL_GPIO_Init+0x22e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a53      	ldr	r2, [pc, #332]	; (8002db4 <HAL_GPIO_Init+0x340>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d019      	beq.n	8002c9e <HAL_GPIO_Init+0x22a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a52      	ldr	r2, [pc, #328]	; (8002db8 <HAL_GPIO_Init+0x344>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d013      	beq.n	8002c9a <HAL_GPIO_Init+0x226>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a51      	ldr	r2, [pc, #324]	; (8002dbc <HAL_GPIO_Init+0x348>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00d      	beq.n	8002c96 <HAL_GPIO_Init+0x222>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a50      	ldr	r2, [pc, #320]	; (8002dc0 <HAL_GPIO_Init+0x34c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d007      	beq.n	8002c92 <HAL_GPIO_Init+0x21e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a4f      	ldr	r2, [pc, #316]	; (8002dc4 <HAL_GPIO_Init+0x350>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d101      	bne.n	8002c8e <HAL_GPIO_Init+0x21a>
 8002c8a:	2309      	movs	r3, #9
 8002c8c:	e012      	b.n	8002cb4 <HAL_GPIO_Init+0x240>
 8002c8e:	230a      	movs	r3, #10
 8002c90:	e010      	b.n	8002cb4 <HAL_GPIO_Init+0x240>
 8002c92:	2308      	movs	r3, #8
 8002c94:	e00e      	b.n	8002cb4 <HAL_GPIO_Init+0x240>
 8002c96:	2307      	movs	r3, #7
 8002c98:	e00c      	b.n	8002cb4 <HAL_GPIO_Init+0x240>
 8002c9a:	2306      	movs	r3, #6
 8002c9c:	e00a      	b.n	8002cb4 <HAL_GPIO_Init+0x240>
 8002c9e:	2305      	movs	r3, #5
 8002ca0:	e008      	b.n	8002cb4 <HAL_GPIO_Init+0x240>
 8002ca2:	2304      	movs	r3, #4
 8002ca4:	e006      	b.n	8002cb4 <HAL_GPIO_Init+0x240>
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e004      	b.n	8002cb4 <HAL_GPIO_Init+0x240>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e002      	b.n	8002cb4 <HAL_GPIO_Init+0x240>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <HAL_GPIO_Init+0x240>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	69fa      	ldr	r2, [r7, #28]
 8002cb6:	f002 0203 	and.w	r2, r2, #3
 8002cba:	0092      	lsls	r2, r2, #2
 8002cbc:	4093      	lsls	r3, r2
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002cc4:	4935      	ldr	r1, [pc, #212]	; (8002d9c <HAL_GPIO_Init+0x328>)
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	089b      	lsrs	r3, r3, #2
 8002cca:	3302      	adds	r3, #2
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cd2:	4b3d      	ldr	r3, [pc, #244]	; (8002dc8 <HAL_GPIO_Init+0x354>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cf6:	4a34      	ldr	r2, [pc, #208]	; (8002dc8 <HAL_GPIO_Init+0x354>)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cfc:	4b32      	ldr	r3, [pc, #200]	; (8002dc8 <HAL_GPIO_Init+0x354>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d20:	4a29      	ldr	r2, [pc, #164]	; (8002dc8 <HAL_GPIO_Init+0x354>)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d26:	4b28      	ldr	r3, [pc, #160]	; (8002dc8 <HAL_GPIO_Init+0x354>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d4a:	4a1f      	ldr	r2, [pc, #124]	; (8002dc8 <HAL_GPIO_Init+0x354>)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d50:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <HAL_GPIO_Init+0x354>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d74:	4a14      	ldr	r2, [pc, #80]	; (8002dc8 <HAL_GPIO_Init+0x354>)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	61fb      	str	r3, [r7, #28]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	2b0f      	cmp	r3, #15
 8002d84:	f67f ae86 	bls.w	8002a94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d88:	bf00      	nop
 8002d8a:	bf00      	nop
 8002d8c:	3724      	adds	r7, #36	; 0x24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40013800 	.word	0x40013800
 8002da0:	40020000 	.word	0x40020000
 8002da4:	40020400 	.word	0x40020400
 8002da8:	40020800 	.word	0x40020800
 8002dac:	40020c00 	.word	0x40020c00
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40021400 	.word	0x40021400
 8002db8:	40021800 	.word	0x40021800
 8002dbc:	40021c00 	.word	0x40021c00
 8002dc0:	40022000 	.word	0x40022000
 8002dc4:	40022400 	.word	0x40022400
 8002dc8:	40013c00 	.word	0x40013c00

08002dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	807b      	strh	r3, [r7, #2]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ddc:	787b      	ldrb	r3, [r7, #1]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002de2:	887a      	ldrh	r2, [r7, #2]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002de8:	e003      	b.n	8002df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002dea:	887b      	ldrh	r3, [r7, #2]
 8002dec:	041a      	lsls	r2, r3, #16
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	619a      	str	r2, [r3, #24]
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0e:	6013      	str	r3, [r2, #0]
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40007000 	.word	0x40007000

08002e20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	4b23      	ldr	r3, [pc, #140]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	4a22      	ldr	r2, [pc, #136]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e34:	6413      	str	r3, [r2, #64]	; 0x40
 8002e36:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e42:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1d      	ldr	r2, [pc, #116]	; (8002ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e4e:	f7fe fe33 	bl	8001ab8 <HAL_GetTick>
 8002e52:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e54:	e009      	b.n	8002e6a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e56:	f7fe fe2f 	bl	8001ab8 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e64:	d901      	bls.n	8002e6a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e022      	b.n	8002eb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e6a:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e76:	d1ee      	bne.n	8002e56 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e78:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a0f      	ldr	r2, [pc, #60]	; (8002ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e84:	f7fe fe18 	bl	8001ab8 <HAL_GetTick>
 8002e88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e8a:	e009      	b.n	8002ea0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e8c:	f7fe fe14 	bl	8001ab8 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e9a:	d901      	bls.n	8002ea0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e007      	b.n	8002eb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002eac:	d1ee      	bne.n	8002e8c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40007000 	.word	0x40007000

08002ec0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e29b      	b.n	800340e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 8087 	beq.w	8002ff2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ee4:	4b96      	ldr	r3, [pc, #600]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d00c      	beq.n	8002f0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef0:	4b93      	ldr	r3, [pc, #588]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d112      	bne.n	8002f22 <HAL_RCC_OscConfig+0x62>
 8002efc:	4b90      	ldr	r3, [pc, #576]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f08:	d10b      	bne.n	8002f22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0a:	4b8d      	ldr	r3, [pc, #564]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d06c      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x130>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d168      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e275      	b.n	800340e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2a:	d106      	bne.n	8002f3a <HAL_RCC_OscConfig+0x7a>
 8002f2c:	4b84      	ldr	r3, [pc, #528]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a83      	ldr	r2, [pc, #524]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	e02e      	b.n	8002f98 <HAL_RCC_OscConfig+0xd8>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x9c>
 8002f42:	4b7f      	ldr	r3, [pc, #508]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a7e      	ldr	r2, [pc, #504]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	4b7c      	ldr	r3, [pc, #496]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a7b      	ldr	r2, [pc, #492]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e01d      	b.n	8002f98 <HAL_RCC_OscConfig+0xd8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f64:	d10c      	bne.n	8002f80 <HAL_RCC_OscConfig+0xc0>
 8002f66:	4b76      	ldr	r3, [pc, #472]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a75      	ldr	r2, [pc, #468]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	4b73      	ldr	r3, [pc, #460]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a72      	ldr	r2, [pc, #456]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	e00b      	b.n	8002f98 <HAL_RCC_OscConfig+0xd8>
 8002f80:	4b6f      	ldr	r3, [pc, #444]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a6e      	ldr	r2, [pc, #440]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	4b6c      	ldr	r3, [pc, #432]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a6b      	ldr	r2, [pc, #428]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d013      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fd8a 	bl	8001ab8 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7fe fd86 	bl	8001ab8 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	; 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e229      	b.n	800340e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4b61      	ldr	r3, [pc, #388]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0xe8>
 8002fc6:	e014      	b.n	8002ff2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fd76 	bl	8001ab8 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd0:	f7fe fd72 	bl	8001ab8 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	; 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e215      	b.n	800340e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe2:	4b57      	ldr	r3, [pc, #348]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x110>
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d069      	beq.n	80030d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ffe:	4b50      	ldr	r3, [pc, #320]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300a:	4b4d      	ldr	r3, [pc, #308]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b08      	cmp	r3, #8
 8003014:	d11c      	bne.n	8003050 <HAL_RCC_OscConfig+0x190>
 8003016:	4b4a      	ldr	r3, [pc, #296]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d116      	bne.n	8003050 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003022:	4b47      	ldr	r3, [pc, #284]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <HAL_RCC_OscConfig+0x17a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d001      	beq.n	800303a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e1e9      	b.n	800340e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303a:	4b41      	ldr	r3, [pc, #260]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	493d      	ldr	r1, [pc, #244]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304e:	e040      	b.n	80030d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d023      	beq.n	80030a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003058:	4b39      	ldr	r3, [pc, #228]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a38      	ldr	r2, [pc, #224]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fe fd28 	bl	8001ab8 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800306c:	f7fe fd24 	bl	8001ab8 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e1c7      	b.n	800340e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307e:	4b30      	ldr	r3, [pc, #192]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308a:	4b2d      	ldr	r3, [pc, #180]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4929      	ldr	r1, [pc, #164]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]
 800309e:	e018      	b.n	80030d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a0:	4b27      	ldr	r3, [pc, #156]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a26      	ldr	r2, [pc, #152]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe fd04 	bl	8001ab8 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b4:	f7fe fd00 	bl	8001ab8 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e1a3      	b.n	800340e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c6:	4b1e      	ldr	r3, [pc, #120]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d038      	beq.n	8003150 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d019      	beq.n	800311a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e6:	4b16      	ldr	r3, [pc, #88]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 80030e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ea:	4a15      	ldr	r2, [pc, #84]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f2:	f7fe fce1 	bl	8001ab8 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fa:	f7fe fcdd 	bl	8001ab8 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e180      	b.n	800340e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 800310e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x23a>
 8003118:	e01a      	b.n	8003150 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 800311c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311e:	4a08      	ldr	r2, [pc, #32]	; (8003140 <HAL_RCC_OscConfig+0x280>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003126:	f7fe fcc7 	bl	8001ab8 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800312c:	e00a      	b.n	8003144 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312e:	f7fe fcc3 	bl	8001ab8 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d903      	bls.n	8003144 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e166      	b.n	800340e <HAL_RCC_OscConfig+0x54e>
 8003140:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003144:	4b92      	ldr	r3, [pc, #584]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 8003146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1ee      	bne.n	800312e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80a4 	beq.w	80032a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800315e:	4b8c      	ldr	r3, [pc, #560]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10d      	bne.n	8003186 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800316a:	4b89      	ldr	r3, [pc, #548]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	4a88      	ldr	r2, [pc, #544]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 8003170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003174:	6413      	str	r3, [r2, #64]	; 0x40
 8003176:	4b86      	ldr	r3, [pc, #536]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003182:	2301      	movs	r3, #1
 8003184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003186:	4b83      	ldr	r3, [pc, #524]	; (8003394 <HAL_RCC_OscConfig+0x4d4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	2b00      	cmp	r3, #0
 8003190:	d118      	bne.n	80031c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003192:	4b80      	ldr	r3, [pc, #512]	; (8003394 <HAL_RCC_OscConfig+0x4d4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a7f      	ldr	r2, [pc, #508]	; (8003394 <HAL_RCC_OscConfig+0x4d4>)
 8003198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800319c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800319e:	f7fe fc8b 	bl	8001ab8 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a6:	f7fe fc87 	bl	8001ab8 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b64      	cmp	r3, #100	; 0x64
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e12a      	b.n	800340e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b8:	4b76      	ldr	r3, [pc, #472]	; (8003394 <HAL_RCC_OscConfig+0x4d4>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d106      	bne.n	80031da <HAL_RCC_OscConfig+0x31a>
 80031cc:	4b70      	ldr	r3, [pc, #448]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	4a6f      	ldr	r2, [pc, #444]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6713      	str	r3, [r2, #112]	; 0x70
 80031d8:	e02d      	b.n	8003236 <HAL_RCC_OscConfig+0x376>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10c      	bne.n	80031fc <HAL_RCC_OscConfig+0x33c>
 80031e2:	4b6b      	ldr	r3, [pc, #428]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	4a6a      	ldr	r2, [pc, #424]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	6713      	str	r3, [r2, #112]	; 0x70
 80031ee:	4b68      	ldr	r3, [pc, #416]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 80031f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f2:	4a67      	ldr	r2, [pc, #412]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 80031f4:	f023 0304 	bic.w	r3, r3, #4
 80031f8:	6713      	str	r3, [r2, #112]	; 0x70
 80031fa:	e01c      	b.n	8003236 <HAL_RCC_OscConfig+0x376>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b05      	cmp	r3, #5
 8003202:	d10c      	bne.n	800321e <HAL_RCC_OscConfig+0x35e>
 8003204:	4b62      	ldr	r3, [pc, #392]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	4a61      	ldr	r2, [pc, #388]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 800320a:	f043 0304 	orr.w	r3, r3, #4
 800320e:	6713      	str	r3, [r2, #112]	; 0x70
 8003210:	4b5f      	ldr	r3, [pc, #380]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003214:	4a5e      	ldr	r2, [pc, #376]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	6713      	str	r3, [r2, #112]	; 0x70
 800321c:	e00b      	b.n	8003236 <HAL_RCC_OscConfig+0x376>
 800321e:	4b5c      	ldr	r3, [pc, #368]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	4a5b      	ldr	r2, [pc, #364]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	6713      	str	r3, [r2, #112]	; 0x70
 800322a:	4b59      	ldr	r3, [pc, #356]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	4a58      	ldr	r2, [pc, #352]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 8003230:	f023 0304 	bic.w	r3, r3, #4
 8003234:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d015      	beq.n	800326a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323e:	f7fe fc3b 	bl	8001ab8 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fe fc37 	bl	8001ab8 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	; 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e0d8      	b.n	800340e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325c:	4b4c      	ldr	r3, [pc, #304]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0ee      	beq.n	8003246 <HAL_RCC_OscConfig+0x386>
 8003268:	e014      	b.n	8003294 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326a:	f7fe fc25 	bl	8001ab8 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003270:	e00a      	b.n	8003288 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003272:	f7fe fc21 	bl	8001ab8 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003280:	4293      	cmp	r3, r2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e0c2      	b.n	800340e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003288:	4b41      	ldr	r3, [pc, #260]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1ee      	bne.n	8003272 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003294:	7dfb      	ldrb	r3, [r7, #23]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d105      	bne.n	80032a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329a:	4b3d      	ldr	r3, [pc, #244]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	4a3c      	ldr	r2, [pc, #240]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 80032a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 80ae 	beq.w	800340c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b0:	4b37      	ldr	r3, [pc, #220]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d06d      	beq.n	8003398 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d14b      	bne.n	800335c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c4:	4b32      	ldr	r3, [pc, #200]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a31      	ldr	r2, [pc, #196]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 80032ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fe fbf2 	bl	8001ab8 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d8:	f7fe fbee 	bl	8001ab8 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e091      	b.n	800340e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	4b29      	ldr	r3, [pc, #164]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69da      	ldr	r2, [r3, #28]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	019b      	lsls	r3, r3, #6
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	085b      	lsrs	r3, r3, #1
 800330e:	3b01      	subs	r3, #1
 8003310:	041b      	lsls	r3, r3, #16
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	061b      	lsls	r3, r3, #24
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003320:	071b      	lsls	r3, r3, #28
 8003322:	491b      	ldr	r1, [pc, #108]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a18      	ldr	r2, [pc, #96]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 800332e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7fe fbc0 	bl	8001ab8 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333c:	f7fe fbbc 	bl	8001ab8 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e05f      	b.n	800340e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x47c>
 800335a:	e057      	b.n	800340c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335c:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a0b      	ldr	r2, [pc, #44]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 8003362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fe fba6 	bl	8001ab8 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003370:	f7fe fba2 	bl	8001ab8 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e045      	b.n	800340e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003382:	4b03      	ldr	r3, [pc, #12]	; (8003390 <HAL_RCC_OscConfig+0x4d0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x4b0>
 800338e:	e03d      	b.n	800340c <HAL_RCC_OscConfig+0x54c>
 8003390:	40023800 	.word	0x40023800
 8003394:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003398:	4b1f      	ldr	r3, [pc, #124]	; (8003418 <HAL_RCC_OscConfig+0x558>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d030      	beq.n	8003408 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d129      	bne.n	8003408 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d122      	bne.n	8003408 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033c8:	4013      	ands	r3, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d119      	bne.n	8003408 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	3b01      	subs	r3, #1
 80033e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d10f      	bne.n	8003408 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d107      	bne.n	8003408 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800

0800341c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0d0      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003434:	4b6a      	ldr	r3, [pc, #424]	; (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d910      	bls.n	8003464 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b67      	ldr	r3, [pc, #412]	; (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 020f 	bic.w	r2, r3, #15
 800344a:	4965      	ldr	r1, [pc, #404]	; (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	4b63      	ldr	r3, [pc, #396]	; (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0b8      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d020      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800347c:	4b59      	ldr	r3, [pc, #356]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4a58      	ldr	r2, [pc, #352]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003482:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003486:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003494:	4b53      	ldr	r3, [pc, #332]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4a52      	ldr	r2, [pc, #328]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 800349a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800349e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a0:	4b50      	ldr	r3, [pc, #320]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	494d      	ldr	r1, [pc, #308]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d040      	beq.n	8003540 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	4b47      	ldr	r3, [pc, #284]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d115      	bne.n	80034fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e07f      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d107      	bne.n	80034ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034de:	4b41      	ldr	r3, [pc, #260]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e073      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ee:	4b3d      	ldr	r3, [pc, #244]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e06b      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034fe:	4b39      	ldr	r3, [pc, #228]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f023 0203 	bic.w	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4936      	ldr	r1, [pc, #216]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 800350c:	4313      	orrs	r3, r2
 800350e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003510:	f7fe fad2 	bl	8001ab8 <HAL_GetTick>
 8003514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	e00a      	b.n	800352e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003518:	f7fe face 	bl	8001ab8 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	; 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e053      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352e:	4b2d      	ldr	r3, [pc, #180]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 020c 	and.w	r2, r3, #12
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	429a      	cmp	r2, r3
 800353e:	d1eb      	bne.n	8003518 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003540:	4b27      	ldr	r3, [pc, #156]	; (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d210      	bcs.n	8003570 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354e:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f023 020f 	bic.w	r2, r3, #15
 8003556:	4922      	ldr	r1, [pc, #136]	; (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	4313      	orrs	r3, r2
 800355c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800355e:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d001      	beq.n	8003570 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e032      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800357c:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4916      	ldr	r1, [pc, #88]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800359a:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	490e      	ldr	r1, [pc, #56]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035ae:	f000 f821 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 80035b2:	4602      	mov	r2, r0
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	490a      	ldr	r1, [pc, #40]	; (80035e8 <HAL_RCC_ClockConfig+0x1cc>)
 80035c0:	5ccb      	ldrb	r3, [r1, r3]
 80035c2:	fa22 f303 	lsr.w	r3, r2, r3
 80035c6:	4a09      	ldr	r2, [pc, #36]	; (80035ec <HAL_RCC_ClockConfig+0x1d0>)
 80035c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035ca:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCC_ClockConfig+0x1d4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe fa2e 	bl	8001a30 <HAL_InitTick>

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40023c00 	.word	0x40023c00
 80035e4:	40023800 	.word	0x40023800
 80035e8:	08007200 	.word	0x08007200
 80035ec:	2000007c 	.word	0x2000007c
 80035f0:	20000080 	.word	0x20000080

080035f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f8:	b094      	sub	sp, #80	; 0x50
 80035fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003600:	2300      	movs	r3, #0
 8003602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003604:	2300      	movs	r3, #0
 8003606:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800360c:	4b79      	ldr	r3, [pc, #484]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b08      	cmp	r3, #8
 8003616:	d00d      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x40>
 8003618:	2b08      	cmp	r3, #8
 800361a:	f200 80e1 	bhi.w	80037e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x34>
 8003622:	2b04      	cmp	r3, #4
 8003624:	d003      	beq.n	800362e <HAL_RCC_GetSysClockFreq+0x3a>
 8003626:	e0db      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003628:	4b73      	ldr	r3, [pc, #460]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800362a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800362c:	e0db      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800362e:	4b73      	ldr	r3, [pc, #460]	; (80037fc <HAL_RCC_GetSysClockFreq+0x208>)
 8003630:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003632:	e0d8      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003634:	4b6f      	ldr	r3, [pc, #444]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800363c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800363e:	4b6d      	ldr	r3, [pc, #436]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d063      	beq.n	8003712 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364a:	4b6a      	ldr	r3, [pc, #424]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	099b      	lsrs	r3, r3, #6
 8003650:	2200      	movs	r2, #0
 8003652:	63bb      	str	r3, [r7, #56]	; 0x38
 8003654:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365c:	633b      	str	r3, [r7, #48]	; 0x30
 800365e:	2300      	movs	r3, #0
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
 8003662:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003666:	4622      	mov	r2, r4
 8003668:	462b      	mov	r3, r5
 800366a:	f04f 0000 	mov.w	r0, #0
 800366e:	f04f 0100 	mov.w	r1, #0
 8003672:	0159      	lsls	r1, r3, #5
 8003674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003678:	0150      	lsls	r0, r2, #5
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4621      	mov	r1, r4
 8003680:	1a51      	subs	r1, r2, r1
 8003682:	6139      	str	r1, [r7, #16]
 8003684:	4629      	mov	r1, r5
 8003686:	eb63 0301 	sbc.w	r3, r3, r1
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	f04f 0200 	mov.w	r2, #0
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003698:	4659      	mov	r1, fp
 800369a:	018b      	lsls	r3, r1, #6
 800369c:	4651      	mov	r1, sl
 800369e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036a2:	4651      	mov	r1, sl
 80036a4:	018a      	lsls	r2, r1, #6
 80036a6:	4651      	mov	r1, sl
 80036a8:	ebb2 0801 	subs.w	r8, r2, r1
 80036ac:	4659      	mov	r1, fp
 80036ae:	eb63 0901 	sbc.w	r9, r3, r1
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036c6:	4690      	mov	r8, r2
 80036c8:	4699      	mov	r9, r3
 80036ca:	4623      	mov	r3, r4
 80036cc:	eb18 0303 	adds.w	r3, r8, r3
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	462b      	mov	r3, r5
 80036d4:	eb49 0303 	adc.w	r3, r9, r3
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	f04f 0300 	mov.w	r3, #0
 80036e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036e6:	4629      	mov	r1, r5
 80036e8:	024b      	lsls	r3, r1, #9
 80036ea:	4621      	mov	r1, r4
 80036ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036f0:	4621      	mov	r1, r4
 80036f2:	024a      	lsls	r2, r1, #9
 80036f4:	4610      	mov	r0, r2
 80036f6:	4619      	mov	r1, r3
 80036f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036fa:	2200      	movs	r2, #0
 80036fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003700:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003704:	f7fc fdec 	bl	80002e0 <__aeabi_uldivmod>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4613      	mov	r3, r2
 800370e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003710:	e058      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003712:	4b38      	ldr	r3, [pc, #224]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	099b      	lsrs	r3, r3, #6
 8003718:	2200      	movs	r2, #0
 800371a:	4618      	mov	r0, r3
 800371c:	4611      	mov	r1, r2
 800371e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003722:	623b      	str	r3, [r7, #32]
 8003724:	2300      	movs	r3, #0
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
 8003728:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800372c:	4642      	mov	r2, r8
 800372e:	464b      	mov	r3, r9
 8003730:	f04f 0000 	mov.w	r0, #0
 8003734:	f04f 0100 	mov.w	r1, #0
 8003738:	0159      	lsls	r1, r3, #5
 800373a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800373e:	0150      	lsls	r0, r2, #5
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4641      	mov	r1, r8
 8003746:	ebb2 0a01 	subs.w	sl, r2, r1
 800374a:	4649      	mov	r1, r9
 800374c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800375c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003760:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003764:	ebb2 040a 	subs.w	r4, r2, sl
 8003768:	eb63 050b 	sbc.w	r5, r3, fp
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	00eb      	lsls	r3, r5, #3
 8003776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800377a:	00e2      	lsls	r2, r4, #3
 800377c:	4614      	mov	r4, r2
 800377e:	461d      	mov	r5, r3
 8003780:	4643      	mov	r3, r8
 8003782:	18e3      	adds	r3, r4, r3
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	464b      	mov	r3, r9
 8003788:	eb45 0303 	adc.w	r3, r5, r3
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800379a:	4629      	mov	r1, r5
 800379c:	028b      	lsls	r3, r1, #10
 800379e:	4621      	mov	r1, r4
 80037a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a4:	4621      	mov	r1, r4
 80037a6:	028a      	lsls	r2, r1, #10
 80037a8:	4610      	mov	r0, r2
 80037aa:	4619      	mov	r1, r3
 80037ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ae:	2200      	movs	r2, #0
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	61fa      	str	r2, [r7, #28]
 80037b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037b8:	f7fc fd92 	bl	80002e0 <__aeabi_uldivmod>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4613      	mov	r3, r2
 80037c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	0c1b      	lsrs	r3, r3, #16
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	3301      	adds	r3, #1
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80037d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037de:	e002      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80037e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3750      	adds	r7, #80	; 0x50
 80037ec:	46bd      	mov	sp, r7
 80037ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800
 80037f8:	00f42400 	.word	0x00f42400
 80037fc:	007a1200 	.word	0x007a1200

08003800 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003804:	4b03      	ldr	r3, [pc, #12]	; (8003814 <HAL_RCC_GetHCLKFreq+0x14>)
 8003806:	681b      	ldr	r3, [r3, #0]
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	2000007c 	.word	0x2000007c

08003818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800381c:	f7ff fff0 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	0a9b      	lsrs	r3, r3, #10
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	4903      	ldr	r1, [pc, #12]	; (800383c <HAL_RCC_GetPCLK1Freq+0x24>)
 800382e:	5ccb      	ldrb	r3, [r1, r3]
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40023800 	.word	0x40023800
 800383c:	08007210 	.word	0x08007210

08003840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003844:	f7ff ffdc 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003848:	4602      	mov	r2, r0
 800384a:	4b05      	ldr	r3, [pc, #20]	; (8003860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	0b5b      	lsrs	r3, r3, #13
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	4903      	ldr	r1, [pc, #12]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003856:	5ccb      	ldrb	r3, [r1, r3]
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800385c:	4618      	mov	r0, r3
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40023800 	.word	0x40023800
 8003864:	08007210 	.word	0x08007210

08003868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d012      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003890:	4b69      	ldr	r3, [pc, #420]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	4a68      	ldr	r2, [pc, #416]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003896:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800389a:	6093      	str	r3, [r2, #8]
 800389c:	4b66      	ldr	r3, [pc, #408]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a4:	4964      	ldr	r1, [pc, #400]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038b2:	2301      	movs	r3, #1
 80038b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d017      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038c2:	4b5d      	ldr	r3, [pc, #372]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d0:	4959      	ldr	r1, [pc, #356]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038e0:	d101      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038e2:	2301      	movs	r3, #1
 80038e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038ee:	2301      	movs	r3, #1
 80038f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d017      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038fe:	4b4e      	ldr	r3, [pc, #312]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003904:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	494a      	ldr	r1, [pc, #296]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800391c:	d101      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800391e:	2301      	movs	r3, #1
 8003920:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800392a:	2301      	movs	r3, #1
 800392c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800393a:	2301      	movs	r3, #1
 800393c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 808b 	beq.w	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800394c:	4b3a      	ldr	r3, [pc, #232]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	4a39      	ldr	r2, [pc, #228]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003956:	6413      	str	r3, [r2, #64]	; 0x40
 8003958:	4b37      	ldr	r3, [pc, #220]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003964:	4b35      	ldr	r3, [pc, #212]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a34      	ldr	r2, [pc, #208]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800396a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003970:	f7fe f8a2 	bl	8001ab8 <HAL_GetTick>
 8003974:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003976:	e008      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003978:	f7fe f89e 	bl	8001ab8 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b64      	cmp	r3, #100	; 0x64
 8003984:	d901      	bls.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e38f      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800398a:	4b2c      	ldr	r3, [pc, #176]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003996:	4b28      	ldr	r3, [pc, #160]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d035      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d02e      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039b4:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039be:	4b1e      	ldr	r3, [pc, #120]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c2:	4a1d      	ldr	r2, [pc, #116]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039ca:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	4a1a      	ldr	r2, [pc, #104]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039dc:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d114      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fe f866 	bl	8001ab8 <HAL_GetTick>
 80039ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ee:	e00a      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f0:	f7fe f862 	bl	8001ab8 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e351      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a06:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0ee      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a1e:	d111      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a2c:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a2e:	400b      	ands	r3, r1
 8003a30:	4901      	ldr	r1, [pc, #4]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	608b      	str	r3, [r1, #8]
 8003a36:	e00b      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40007000 	.word	0x40007000
 8003a40:	0ffffcff 	.word	0x0ffffcff
 8003a44:	4bac      	ldr	r3, [pc, #688]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4aab      	ldr	r2, [pc, #684]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a4e:	6093      	str	r3, [r2, #8]
 8003a50:	4ba9      	ldr	r3, [pc, #676]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5c:	49a6      	ldr	r1, [pc, #664]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d010      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a6e:	4ba2      	ldr	r3, [pc, #648]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a74:	4aa0      	ldr	r2, [pc, #640]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a7e:	4b9e      	ldr	r3, [pc, #632]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a80:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	499b      	ldr	r1, [pc, #620]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a9c:	4b96      	ldr	r3, [pc, #600]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aaa:	4993      	ldr	r1, [pc, #588]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003abe:	4b8e      	ldr	r3, [pc, #568]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003acc:	498a      	ldr	r1, [pc, #552]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ae0:	4b85      	ldr	r3, [pc, #532]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aee:	4982      	ldr	r1, [pc, #520]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b02:	4b7d      	ldr	r3, [pc, #500]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b10:	4979      	ldr	r1, [pc, #484]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b24:	4b74      	ldr	r3, [pc, #464]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2a:	f023 0203 	bic.w	r2, r3, #3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	4971      	ldr	r1, [pc, #452]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b46:	4b6c      	ldr	r3, [pc, #432]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4c:	f023 020c 	bic.w	r2, r3, #12
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b54:	4968      	ldr	r1, [pc, #416]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b68:	4b63      	ldr	r3, [pc, #396]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b76:	4960      	ldr	r1, [pc, #384]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b8a:	4b5b      	ldr	r3, [pc, #364]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b90:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b98:	4957      	ldr	r1, [pc, #348]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bac:	4b52      	ldr	r3, [pc, #328]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bba:	494f      	ldr	r1, [pc, #316]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bce:	4b4a      	ldr	r3, [pc, #296]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	4946      	ldr	r1, [pc, #280]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bf0:	4b41      	ldr	r3, [pc, #260]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfe:	493e      	ldr	r1, [pc, #248]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c12:	4b39      	ldr	r3, [pc, #228]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c20:	4935      	ldr	r1, [pc, #212]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c34:	4b30      	ldr	r3, [pc, #192]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c42:	492d      	ldr	r1, [pc, #180]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d011      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c56:	4b28      	ldr	r3, [pc, #160]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c64:	4924      	ldr	r1, [pc, #144]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c74:	d101      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c76:	2301      	movs	r3, #1
 8003c78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c86:	2301      	movs	r3, #1
 8003c88:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c96:	4b18      	ldr	r3, [pc, #96]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca4:	4914      	ldr	r1, [pc, #80]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00b      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc8:	490b      	ldr	r1, [pc, #44]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00f      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003cdc:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cec:	4902      	ldr	r1, [pc, #8]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cf4:	e002      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003cf6:	bf00      	nop
 8003cf8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00b      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d08:	4b8a      	ldr	r3, [pc, #552]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d18:	4986      	ldr	r1, [pc, #536]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00b      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d2c:	4b81      	ldr	r3, [pc, #516]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d3c:	497d      	ldr	r1, [pc, #500]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d006      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 80d6 	beq.w	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d58:	4b76      	ldr	r3, [pc, #472]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a75      	ldr	r2, [pc, #468]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d64:	f7fd fea8 	bl	8001ab8 <HAL_GetTick>
 8003d68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d6c:	f7fd fea4 	bl	8001ab8 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	; 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e195      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d7e:	4b6d      	ldr	r3, [pc, #436]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d021      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d11d      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d9e:	4b65      	ldr	r3, [pc, #404]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da4:	0c1b      	lsrs	r3, r3, #16
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dac:	4b61      	ldr	r3, [pc, #388]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db2:	0e1b      	lsrs	r3, r3, #24
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	019a      	lsls	r2, r3, #6
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	041b      	lsls	r3, r3, #16
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	061b      	lsls	r3, r3, #24
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	071b      	lsls	r3, r3, #28
 8003dd2:	4958      	ldr	r1, [pc, #352]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dee:	d00a      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d02e      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e04:	d129      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e06:	4b4b      	ldr	r3, [pc, #300]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0c:	0c1b      	lsrs	r3, r3, #16
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e14:	4b47      	ldr	r3, [pc, #284]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e1a:	0f1b      	lsrs	r3, r3, #28
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	019a      	lsls	r2, r3, #6
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	061b      	lsls	r3, r3, #24
 8003e34:	431a      	orrs	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	071b      	lsls	r3, r3, #28
 8003e3a:	493e      	ldr	r1, [pc, #248]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e42:	4b3c      	ldr	r3, [pc, #240]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e48:	f023 021f 	bic.w	r2, r3, #31
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	3b01      	subs	r3, #1
 8003e52:	4938      	ldr	r1, [pc, #224]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01d      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e66:	4b33      	ldr	r3, [pc, #204]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e6c:	0e1b      	lsrs	r3, r3, #24
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e74:	4b2f      	ldr	r3, [pc, #188]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e7a:	0f1b      	lsrs	r3, r3, #28
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	019a      	lsls	r2, r3, #6
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	041b      	lsls	r3, r3, #16
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	061b      	lsls	r3, r3, #24
 8003e94:	431a      	orrs	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	071b      	lsls	r3, r3, #28
 8003e9a:	4926      	ldr	r1, [pc, #152]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d011      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	019a      	lsls	r2, r3, #6
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	041b      	lsls	r3, r3, #16
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	061b      	lsls	r3, r3, #24
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	071b      	lsls	r3, r3, #28
 8003eca:	491a      	ldr	r1, [pc, #104]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ed2:	4b18      	ldr	r3, [pc, #96]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a17      	ldr	r2, [pc, #92]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ed8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003edc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ede:	f7fd fdeb 	bl	8001ab8 <HAL_GetTick>
 8003ee2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ee6:	f7fd fde7 	bl	8001ab8 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b64      	cmp	r3, #100	; 0x64
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e0d8      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	f040 80ce 	bne.w	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a08      	ldr	r2, [pc, #32]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f18:	f7fd fdce 	bl	8001ab8 <HAL_GetTick>
 8003f1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f1e:	e00b      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f20:	f7fd fdca 	bl	8001ab8 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b64      	cmp	r3, #100	; 0x64
 8003f2c:	d904      	bls.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e0bb      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f32:	bf00      	nop
 8003f34:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f38:	4b5e      	ldr	r3, [pc, #376]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f44:	d0ec      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d02e      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d12a      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f6e:	4b51      	ldr	r3, [pc, #324]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f74:	0c1b      	lsrs	r3, r3, #16
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f7c:	4b4d      	ldr	r3, [pc, #308]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	0f1b      	lsrs	r3, r3, #28
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	019a      	lsls	r2, r3, #6
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	041b      	lsls	r3, r3, #16
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	061b      	lsls	r3, r3, #24
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	071b      	lsls	r3, r3, #28
 8003fa2:	4944      	ldr	r1, [pc, #272]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003faa:	4b42      	ldr	r3, [pc, #264]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	493d      	ldr	r1, [pc, #244]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d022      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fd8:	d11d      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fda:	4b36      	ldr	r3, [pc, #216]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe0:	0e1b      	lsrs	r3, r3, #24
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fe8:	4b32      	ldr	r3, [pc, #200]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fee:	0f1b      	lsrs	r3, r3, #28
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	019a      	lsls	r2, r3, #6
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	041b      	lsls	r3, r3, #16
 8004002:	431a      	orrs	r2, r3
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	061b      	lsls	r3, r3, #24
 8004008:	431a      	orrs	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	071b      	lsls	r3, r3, #28
 800400e:	4929      	ldr	r1, [pc, #164]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d028      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004022:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004028:	0e1b      	lsrs	r3, r3, #24
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004030:	4b20      	ldr	r3, [pc, #128]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	0c1b      	lsrs	r3, r3, #16
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	019a      	lsls	r2, r3, #6
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	041b      	lsls	r3, r3, #16
 8004048:	431a      	orrs	r2, r3
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	061b      	lsls	r3, r3, #24
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	071b      	lsls	r3, r3, #28
 8004056:	4917      	ldr	r1, [pc, #92]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800405e:	4b15      	ldr	r3, [pc, #84]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004064:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	4911      	ldr	r1, [pc, #68]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004074:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a0e      	ldr	r2, [pc, #56]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800407a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004080:	f7fd fd1a 	bl	8001ab8 <HAL_GetTick>
 8004084:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004086:	e008      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004088:	f7fd fd16 	bl	8001ab8 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b64      	cmp	r3, #100	; 0x64
 8004094:	d901      	bls.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e007      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800409a:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040a6:	d1ef      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3720      	adds	r7, #32
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40023800 	.word	0x40023800

080040b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e09d      	b.n	8004206 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d108      	bne.n	80040e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040da:	d009      	beq.n	80040f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	61da      	str	r2, [r3, #28]
 80040e2:	e005      	b.n	80040f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fd fa76 	bl	80015fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004126:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004130:	d902      	bls.n	8004138 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	e002      	b.n	800413e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800413c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004146:	d007      	beq.n	8004158 <HAL_SPI_Init+0xa0>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004150:	d002      	beq.n	8004158 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419a:	ea42 0103 	orr.w	r1, r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	0c1b      	lsrs	r3, r3, #16
 80041b4:	f003 0204 	and.w	r2, r3, #4
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80041d4:	ea42 0103 	orr.w	r1, r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b08a      	sub	sp, #40	; 0x28
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	607a      	str	r2, [r7, #4]
 800421a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800421c:	2301      	movs	r3, #1
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_SPI_TransmitReceive+0x26>
 8004230:	2302      	movs	r3, #2
 8004232:	e1fb      	b.n	800462c <HAL_SPI_TransmitReceive+0x41e>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800423c:	f7fd fc3c 	bl	8001ab8 <HAL_GetTick>
 8004240:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004248:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004250:	887b      	ldrh	r3, [r7, #2]
 8004252:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004254:	887b      	ldrh	r3, [r7, #2]
 8004256:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004258:	7efb      	ldrb	r3, [r7, #27]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d00e      	beq.n	800427c <HAL_SPI_TransmitReceive+0x6e>
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004264:	d106      	bne.n	8004274 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d102      	bne.n	8004274 <HAL_SPI_TransmitReceive+0x66>
 800426e:	7efb      	ldrb	r3, [r7, #27]
 8004270:	2b04      	cmp	r3, #4
 8004272:	d003      	beq.n	800427c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004274:	2302      	movs	r3, #2
 8004276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800427a:	e1cd      	b.n	8004618 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <HAL_SPI_TransmitReceive+0x80>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <HAL_SPI_TransmitReceive+0x80>
 8004288:	887b      	ldrh	r3, [r7, #2]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d103      	bne.n	8004296 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004294:	e1c0      	b.n	8004618 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d003      	beq.n	80042aa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2205      	movs	r2, #5
 80042a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	887a      	ldrh	r2, [r7, #2]
 80042ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	887a      	ldrh	r2, [r7, #2]
 80042c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	887a      	ldrh	r2, [r7, #2]
 80042d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	887a      	ldrh	r2, [r7, #2]
 80042d6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042ec:	d802      	bhi.n	80042f4 <HAL_SPI_TransmitReceive+0xe6>
 80042ee:	8a3b      	ldrh	r3, [r7, #16]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d908      	bls.n	8004306 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004302:	605a      	str	r2, [r3, #4]
 8004304:	e007      	b.n	8004316 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004314:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004320:	2b40      	cmp	r3, #64	; 0x40
 8004322:	d007      	beq.n	8004334 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004332:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800433c:	d97c      	bls.n	8004438 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_SPI_TransmitReceive+0x13e>
 8004346:	8a7b      	ldrh	r3, [r7, #18]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d169      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	881a      	ldrh	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	1c9a      	adds	r2, r3, #2
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004370:	e056      	b.n	8004420 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b02      	cmp	r3, #2
 800437e:	d11b      	bne.n	80043b8 <HAL_SPI_TransmitReceive+0x1aa>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d016      	beq.n	80043b8 <HAL_SPI_TransmitReceive+0x1aa>
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	2b01      	cmp	r3, #1
 800438e:	d113      	bne.n	80043b8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	881a      	ldrh	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	1c9a      	adds	r2, r3, #2
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d11c      	bne.n	8004400 <HAL_SPI_TransmitReceive+0x1f2>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d016      	beq.n	8004400 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	b292      	uxth	r2, r2
 80043de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	1c9a      	adds	r2, r3, #2
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043fc:	2301      	movs	r3, #1
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004400:	f7fd fb5a 	bl	8001ab8 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800440c:	429a      	cmp	r2, r3
 800440e:	d807      	bhi.n	8004420 <HAL_SPI_TransmitReceive+0x212>
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004416:	d003      	beq.n	8004420 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800441e:	e0fb      	b.n	8004618 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1a3      	bne.n	8004372 <HAL_SPI_TransmitReceive+0x164>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d19d      	bne.n	8004372 <HAL_SPI_TransmitReceive+0x164>
 8004436:	e0df      	b.n	80045f8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <HAL_SPI_TransmitReceive+0x23a>
 8004440:	8a7b      	ldrh	r3, [r7, #18]
 8004442:	2b01      	cmp	r3, #1
 8004444:	f040 80cb 	bne.w	80045de <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b01      	cmp	r3, #1
 8004450:	d912      	bls.n	8004478 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004456:	881a      	ldrh	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	1c9a      	adds	r2, r3, #2
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b02      	subs	r3, #2
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004476:	e0b2      	b.n	80045de <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	330c      	adds	r3, #12
 8004482:	7812      	ldrb	r2, [r2, #0]
 8004484:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800449e:	e09e      	b.n	80045de <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d134      	bne.n	8004518 <HAL_SPI_TransmitReceive+0x30a>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d02f      	beq.n	8004518 <HAL_SPI_TransmitReceive+0x30a>
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d12c      	bne.n	8004518 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d912      	bls.n	80044ee <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	881a      	ldrh	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	1c9a      	adds	r2, r3, #2
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b02      	subs	r3, #2
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044ec:	e012      	b.n	8004514 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	330c      	adds	r3, #12
 80044f8:	7812      	ldrb	r2, [r2, #0]
 80044fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b01      	cmp	r3, #1
 8004524:	d148      	bne.n	80045b8 <HAL_SPI_TransmitReceive+0x3aa>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d042      	beq.n	80045b8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004538:	b29b      	uxth	r3, r3
 800453a:	2b01      	cmp	r3, #1
 800453c:	d923      	bls.n	8004586 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	b292      	uxth	r2, r2
 800454a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	1c9a      	adds	r2, r3, #2
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800455c:	b29b      	uxth	r3, r3
 800455e:	3b02      	subs	r3, #2
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b01      	cmp	r3, #1
 8004572:	d81f      	bhi.n	80045b4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	e016      	b.n	80045b4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f103 020c 	add.w	r2, r3, #12
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	7812      	ldrb	r2, [r2, #0]
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045b4:	2301      	movs	r3, #1
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045b8:	f7fd fa7e 	bl	8001ab8 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d803      	bhi.n	80045d0 <HAL_SPI_TransmitReceive+0x3c2>
 80045c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ce:	d102      	bne.n	80045d6 <HAL_SPI_TransmitReceive+0x3c8>
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d103      	bne.n	80045de <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80045dc:	e01c      	b.n	8004618 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f47f af5b 	bne.w	80044a0 <HAL_SPI_TransmitReceive+0x292>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f47f af54 	bne.w	80044a0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045f8:	69fa      	ldr	r2, [r7, #28]
 80045fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 f937 	bl	8004870 <SPI_EndRxTxTransaction>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d006      	beq.n	8004616 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	661a      	str	r2, [r3, #96]	; 0x60
 8004614:	e000      	b.n	8004618 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004616:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004628:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800462c:	4618      	mov	r0, r3
 800462e:	3728      	adds	r7, #40	; 0x28
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	4613      	mov	r3, r2
 8004642:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004644:	f7fd fa38 	bl	8001ab8 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	4413      	add	r3, r2
 8004652:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004654:	f7fd fa30 	bl	8001ab8 <HAL_GetTick>
 8004658:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800465a:	4b39      	ldr	r3, [pc, #228]	; (8004740 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	015b      	lsls	r3, r3, #5
 8004660:	0d1b      	lsrs	r3, r3, #20
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	fb02 f303 	mul.w	r3, r2, r3
 8004668:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800466a:	e054      	b.n	8004716 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004672:	d050      	beq.n	8004716 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004674:	f7fd fa20 	bl	8001ab8 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	429a      	cmp	r2, r3
 8004682:	d902      	bls.n	800468a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d13d      	bne.n	8004706 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004698:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046a2:	d111      	bne.n	80046c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ac:	d004      	beq.n	80046b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b6:	d107      	bne.n	80046c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d0:	d10f      	bne.n	80046f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e017      	b.n	8004736 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	3b01      	subs	r3, #1
 8004714:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4013      	ands	r3, r2
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	429a      	cmp	r2, r3
 8004724:	bf0c      	ite	eq
 8004726:	2301      	moveq	r3, #1
 8004728:	2300      	movne	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	429a      	cmp	r2, r3
 8004732:	d19b      	bne.n	800466c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	2000007c 	.word	0x2000007c

08004744 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08a      	sub	sp, #40	; 0x28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004752:	2300      	movs	r3, #0
 8004754:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004756:	f7fd f9af 	bl	8001ab8 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475e:	1a9b      	subs	r3, r3, r2
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	4413      	add	r3, r2
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004766:	f7fd f9a7 	bl	8001ab8 <HAL_GetTick>
 800476a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	330c      	adds	r3, #12
 8004772:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004774:	4b3d      	ldr	r3, [pc, #244]	; (800486c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	00da      	lsls	r2, r3, #3
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	0d1b      	lsrs	r3, r3, #20
 8004784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004786:	fb02 f303 	mul.w	r3, r2, r3
 800478a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800478c:	e060      	b.n	8004850 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004794:	d107      	bne.n	80047a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d104      	bne.n	80047a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80047a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ac:	d050      	beq.n	8004850 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047ae:	f7fd f983 	bl	8001ab8 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d902      	bls.n	80047c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d13d      	bne.n	8004840 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047dc:	d111      	bne.n	8004802 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047e6:	d004      	beq.n	80047f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f0:	d107      	bne.n	8004802 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004800:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800480a:	d10f      	bne.n	800482c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800482a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e010      	b.n	8004862 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	3b01      	subs	r3, #1
 800484e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4013      	ands	r3, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	429a      	cmp	r2, r3
 800485e:	d196      	bne.n	800478e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3728      	adds	r7, #40	; 0x28
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	2000007c 	.word	0x2000007c

08004870 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af02      	add	r7, sp, #8
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2200      	movs	r2, #0
 8004884:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f7ff ff5b 	bl	8004744 <SPI_WaitFifoStateUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d007      	beq.n	80048a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004898:	f043 0220 	orr.w	r2, r3, #32
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e046      	b.n	8004932 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048a4:	4b25      	ldr	r3, [pc, #148]	; (800493c <SPI_EndRxTxTransaction+0xcc>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a25      	ldr	r2, [pc, #148]	; (8004940 <SPI_EndRxTxTransaction+0xd0>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	0d5b      	lsrs	r3, r3, #21
 80048b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048b4:	fb02 f303 	mul.w	r3, r2, r3
 80048b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c2:	d112      	bne.n	80048ea <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2200      	movs	r2, #0
 80048cc:	2180      	movs	r1, #128	; 0x80
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f7ff feb0 	bl	8004634 <SPI_WaitFlagStateUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d016      	beq.n	8004908 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048de:	f043 0220 	orr.w	r2, r3, #32
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e023      	b.n	8004932 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004900:	2b80      	cmp	r3, #128	; 0x80
 8004902:	d0f2      	beq.n	80048ea <SPI_EndRxTxTransaction+0x7a>
 8004904:	e000      	b.n	8004908 <SPI_EndRxTxTransaction+0x98>
        break;
 8004906:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2200      	movs	r2, #0
 8004910:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f7ff ff15 	bl	8004744 <SPI_WaitFifoStateUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d007      	beq.n	8004930 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004924:	f043 0220 	orr.w	r2, r3, #32
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e000      	b.n	8004932 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	2000007c 	.word	0x2000007c
 8004940:	165e9f81 	.word	0x165e9f81

08004944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e049      	b.n	80049ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fc ff6c 	bl	8001848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3304      	adds	r3, #4
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f000 f9f6 	bl	8004d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d001      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e054      	b.n	8004ab6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a26      	ldr	r2, [pc, #152]	; (8004ac4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d022      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a36:	d01d      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a22      	ldr	r2, [pc, #136]	; (8004ac8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d018      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a21      	ldr	r2, [pc, #132]	; (8004acc <HAL_TIM_Base_Start_IT+0xd8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d013      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00e      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1e      	ldr	r2, [pc, #120]	; (8004ad4 <HAL_TIM_Base_Start_IT+0xe0>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d009      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0x80>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a1b      	ldr	r2, [pc, #108]	; (8004adc <HAL_TIM_Base_Start_IT+0xe8>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d115      	bne.n	8004aa0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689a      	ldr	r2, [r3, #8]
 8004a7a:	4b19      	ldr	r3, [pc, #100]	; (8004ae0 <HAL_TIM_Base_Start_IT+0xec>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b06      	cmp	r3, #6
 8004a84:	d015      	beq.n	8004ab2 <HAL_TIM_Base_Start_IT+0xbe>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a8c:	d011      	beq.n	8004ab2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0201 	orr.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a9e:	e008      	b.n	8004ab2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	e000      	b.n	8004ab4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40010000 	.word	0x40010000
 8004ac8:	40000400 	.word	0x40000400
 8004acc:	40000800 	.word	0x40000800
 8004ad0:	40000c00 	.word	0x40000c00
 8004ad4:	40010400 	.word	0x40010400
 8004ad8:	40014000 	.word	0x40014000
 8004adc:	40001800 	.word	0x40001800
 8004ae0:	00010007 	.word	0x00010007

08004ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d122      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d11b      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f06f 0202 	mvn.w	r2, #2
 8004b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f905 	bl	8004d36 <HAL_TIM_IC_CaptureCallback>
 8004b2c:	e005      	b.n	8004b3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f8f7 	bl	8004d22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f908 	bl	8004d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d122      	bne.n	8004b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d11b      	bne.n	8004b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0204 	mvn.w	r2, #4
 8004b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f8db 	bl	8004d36 <HAL_TIM_IC_CaptureCallback>
 8004b80:	e005      	b.n	8004b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f8cd 	bl	8004d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f8de 	bl	8004d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d122      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0308 	and.w	r3, r3, #8
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d11b      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0208 	mvn.w	r2, #8
 8004bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f8b1 	bl	8004d36 <HAL_TIM_IC_CaptureCallback>
 8004bd4:	e005      	b.n	8004be2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f8a3 	bl	8004d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f8b4 	bl	8004d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0310 	and.w	r3, r3, #16
 8004bf2:	2b10      	cmp	r3, #16
 8004bf4:	d122      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0310 	and.w	r3, r3, #16
 8004c00:	2b10      	cmp	r3, #16
 8004c02:	d11b      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0210 	mvn.w	r2, #16
 8004c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2208      	movs	r2, #8
 8004c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f887 	bl	8004d36 <HAL_TIM_IC_CaptureCallback>
 8004c28:	e005      	b.n	8004c36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f879 	bl	8004d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f88a 	bl	8004d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d10e      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d107      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f06f 0201 	mvn.w	r2, #1
 8004c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fc fc62 	bl	800152c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c72:	2b80      	cmp	r3, #128	; 0x80
 8004c74:	d10e      	bne.n	8004c94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c80:	2b80      	cmp	r3, #128	; 0x80
 8004c82:	d107      	bne.n	8004c94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f9a8 	bl	8004fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca2:	d10e      	bne.n	8004cc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cae:	2b80      	cmp	r3, #128	; 0x80
 8004cb0:	d107      	bne.n	8004cc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f99b 	bl	8004ff8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ccc:	2b40      	cmp	r3, #64	; 0x40
 8004cce:	d10e      	bne.n	8004cee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cda:	2b40      	cmp	r3, #64	; 0x40
 8004cdc:	d107      	bne.n	8004cee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f838 	bl	8004d5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	d10e      	bne.n	8004d1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	d107      	bne.n	8004d1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f06f 0220 	mvn.w	r2, #32
 8004d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f95b 	bl	8004fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d1a:	bf00      	nop
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a40      	ldr	r2, [pc, #256]	; (8004e88 <TIM_Base_SetConfig+0x114>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d013      	beq.n	8004db4 <TIM_Base_SetConfig+0x40>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d92:	d00f      	beq.n	8004db4 <TIM_Base_SetConfig+0x40>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a3d      	ldr	r2, [pc, #244]	; (8004e8c <TIM_Base_SetConfig+0x118>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00b      	beq.n	8004db4 <TIM_Base_SetConfig+0x40>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a3c      	ldr	r2, [pc, #240]	; (8004e90 <TIM_Base_SetConfig+0x11c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d007      	beq.n	8004db4 <TIM_Base_SetConfig+0x40>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a3b      	ldr	r2, [pc, #236]	; (8004e94 <TIM_Base_SetConfig+0x120>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d003      	beq.n	8004db4 <TIM_Base_SetConfig+0x40>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a3a      	ldr	r2, [pc, #232]	; (8004e98 <TIM_Base_SetConfig+0x124>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d108      	bne.n	8004dc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a2f      	ldr	r2, [pc, #188]	; (8004e88 <TIM_Base_SetConfig+0x114>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d02b      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd4:	d027      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a2c      	ldr	r2, [pc, #176]	; (8004e8c <TIM_Base_SetConfig+0x118>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d023      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a2b      	ldr	r2, [pc, #172]	; (8004e90 <TIM_Base_SetConfig+0x11c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d01f      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a2a      	ldr	r2, [pc, #168]	; (8004e94 <TIM_Base_SetConfig+0x120>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01b      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a29      	ldr	r2, [pc, #164]	; (8004e98 <TIM_Base_SetConfig+0x124>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d017      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a28      	ldr	r2, [pc, #160]	; (8004e9c <TIM_Base_SetConfig+0x128>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a27      	ldr	r2, [pc, #156]	; (8004ea0 <TIM_Base_SetConfig+0x12c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00f      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a26      	ldr	r2, [pc, #152]	; (8004ea4 <TIM_Base_SetConfig+0x130>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00b      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a25      	ldr	r2, [pc, #148]	; (8004ea8 <TIM_Base_SetConfig+0x134>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d007      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a24      	ldr	r2, [pc, #144]	; (8004eac <TIM_Base_SetConfig+0x138>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d003      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a23      	ldr	r2, [pc, #140]	; (8004eb0 <TIM_Base_SetConfig+0x13c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d108      	bne.n	8004e38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a0a      	ldr	r2, [pc, #40]	; (8004e88 <TIM_Base_SetConfig+0x114>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d003      	beq.n	8004e6c <TIM_Base_SetConfig+0xf8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a0c      	ldr	r2, [pc, #48]	; (8004e98 <TIM_Base_SetConfig+0x124>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d103      	bne.n	8004e74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	615a      	str	r2, [r3, #20]
}
 8004e7a:	bf00      	nop
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40010000 	.word	0x40010000
 8004e8c:	40000400 	.word	0x40000400
 8004e90:	40000800 	.word	0x40000800
 8004e94:	40000c00 	.word	0x40000c00
 8004e98:	40010400 	.word	0x40010400
 8004e9c:	40014000 	.word	0x40014000
 8004ea0:	40014400 	.word	0x40014400
 8004ea4:	40014800 	.word	0x40014800
 8004ea8:	40001800 	.word	0x40001800
 8004eac:	40001c00 	.word	0x40001c00
 8004eb0:	40002000 	.word	0x40002000

08004eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e06d      	b.n	8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a30      	ldr	r2, [pc, #192]	; (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a2f      	ldr	r2, [pc, #188]	; (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d108      	bne.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a20      	ldr	r2, [pc, #128]	; (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d022      	beq.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3e:	d01d      	beq.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a1d      	ldr	r2, [pc, #116]	; (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d018      	beq.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a1c      	ldr	r2, [pc, #112]	; (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d013      	beq.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a1a      	ldr	r2, [pc, #104]	; (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00e      	beq.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a15      	ldr	r2, [pc, #84]	; (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d009      	beq.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a16      	ldr	r2, [pc, #88]	; (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d004      	beq.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a15      	ldr	r2, [pc, #84]	; (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d10c      	bne.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	40010000 	.word	0x40010000
 8004fb8:	40010400 	.word	0x40010400
 8004fbc:	40000400 	.word	0x40000400
 8004fc0:	40000800 	.word	0x40000800
 8004fc4:	40000c00 	.word	0x40000c00
 8004fc8:	40014000 	.word	0x40014000
 8004fcc:	40001800 	.word	0x40001800

08004fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e040      	b.n	80050a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005022:	2b00      	cmp	r3, #0
 8005024:	d106      	bne.n	8005034 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7fc fc60 	bl	80018f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2224      	movs	r2, #36	; 0x24
 8005038:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0201 	bic.w	r2, r2, #1
 8005048:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fbe0 	bl	8005810 <UART_SetConfig>
 8005050:	4603      	mov	r3, r0
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e022      	b.n	80050a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fe38 	bl	8005cd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005076:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005086:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 febf 	bl	8005e1c <UART_CheckIdleState>
 800509e:	4603      	mov	r3, r0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b08b      	sub	sp, #44	; 0x2c
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	4613      	mov	r3, r2
 80050b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	d147      	bne.n	800514e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <HAL_UART_Transmit_IT+0x22>
 80050c4:	88fb      	ldrh	r3, [r7, #6]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e040      	b.n	8005150 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	88fa      	ldrh	r2, [r7, #6]
 80050d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	88fa      	ldrh	r2, [r7, #6]
 80050e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2221      	movs	r2, #33	; 0x21
 80050f6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005100:	d107      	bne.n	8005112 <HAL_UART_Transmit_IT+0x6a>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4a13      	ldr	r2, [pc, #76]	; (800515c <HAL_UART_Transmit_IT+0xb4>)
 800510e:	66da      	str	r2, [r3, #108]	; 0x6c
 8005110:	e002      	b.n	8005118 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4a12      	ldr	r2, [pc, #72]	; (8005160 <HAL_UART_Transmit_IT+0xb8>)
 8005116:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	e853 3f00 	ldrex	r3, [r3]
 8005124:	613b      	str	r3, [r7, #16]
   return(result);
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	623b      	str	r3, [r7, #32]
 8005138:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	69f9      	ldr	r1, [r7, #28]
 800513c:	6a3a      	ldr	r2, [r7, #32]
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	61bb      	str	r3, [r7, #24]
   return(result);
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1e6      	bne.n	8005118 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	e000      	b.n	8005150 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800514e:	2302      	movs	r3, #2
  }
}
 8005150:	4618      	mov	r0, r3
 8005152:	372c      	adds	r7, #44	; 0x2c
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	0800637b 	.word	0x0800637b
 8005160:	080062c5 	.word	0x080062c5

08005164 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08a      	sub	sp, #40	; 0x28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	4613      	mov	r3, r2
 8005170:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005178:	2b20      	cmp	r3, #32
 800517a:	d132      	bne.n	80051e2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <HAL_UART_Receive_IT+0x24>
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e02b      	b.n	80051e4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d018      	beq.n	80051d2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	613b      	str	r3, [r7, #16]
   return(result);
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	623b      	str	r3, [r7, #32]
 80051c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	69f9      	ldr	r1, [r7, #28]
 80051c4:	6a3a      	ldr	r2, [r7, #32]
 80051c6:	e841 2300 	strex	r3, r2, [r1]
 80051ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1e6      	bne.n	80051a0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	461a      	mov	r2, r3
 80051d6:	68b9      	ldr	r1, [r7, #8]
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 ff33 	bl	8006044 <UART_Start_Receive_IT>
 80051de:	4603      	mov	r3, r0
 80051e0:	e000      	b.n	80051e4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80051e2:	2302      	movs	r3, #2
  }
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3728      	adds	r7, #40	; 0x28
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b0ba      	sub	sp, #232	; 0xe8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005212:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005216:	f640 030f 	movw	r3, #2063	; 0x80f
 800521a:	4013      	ands	r3, r2
 800521c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005220:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005224:	2b00      	cmp	r3, #0
 8005226:	d115      	bne.n	8005254 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800522c:	f003 0320 	and.w	r3, r3, #32
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00f      	beq.n	8005254 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	2b00      	cmp	r3, #0
 800523e:	d009      	beq.n	8005254 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 82ac 	beq.w	80057a2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	4798      	blx	r3
      }
      return;
 8005252:	e2a6      	b.n	80057a2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 8117 	beq.w	800548c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800525e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800526a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800526e:	4b85      	ldr	r3, [pc, #532]	; (8005484 <HAL_UART_IRQHandler+0x298>)
 8005270:	4013      	ands	r3, r2
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 810a 	beq.w	800548c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	d011      	beq.n	80052a8 <HAL_UART_IRQHandler+0xbc>
 8005284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00b      	beq.n	80052a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2201      	movs	r2, #1
 8005296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800529e:	f043 0201 	orr.w	r2, r3, #1
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d011      	beq.n	80052d8 <HAL_UART_IRQHandler+0xec>
 80052b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00b      	beq.n	80052d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2202      	movs	r2, #2
 80052c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ce:	f043 0204 	orr.w	r2, r3, #4
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d011      	beq.n	8005308 <HAL_UART_IRQHandler+0x11c>
 80052e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00b      	beq.n	8005308 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2204      	movs	r2, #4
 80052f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052fe:	f043 0202 	orr.w	r2, r3, #2
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530c:	f003 0308 	and.w	r3, r3, #8
 8005310:	2b00      	cmp	r3, #0
 8005312:	d017      	beq.n	8005344 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005318:	f003 0320 	and.w	r3, r3, #32
 800531c:	2b00      	cmp	r3, #0
 800531e:	d105      	bne.n	800532c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005324:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00b      	beq.n	8005344 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2208      	movs	r2, #8
 8005332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800533a:	f043 0208 	orr.w	r2, r3, #8
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800534c:	2b00      	cmp	r3, #0
 800534e:	d012      	beq.n	8005376 <HAL_UART_IRQHandler+0x18a>
 8005350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00c      	beq.n	8005376 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005364:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800536c:	f043 0220 	orr.w	r2, r3, #32
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 8212 	beq.w	80057a6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00d      	beq.n	80053aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800538e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d007      	beq.n	80053aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053be:	2b40      	cmp	r3, #64	; 0x40
 80053c0:	d005      	beq.n	80053ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d04f      	beq.n	800546e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fefe 	bl	80061d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	2b40      	cmp	r3, #64	; 0x40
 80053e0:	d141      	bne.n	8005466 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3308      	adds	r3, #8
 80053e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3308      	adds	r3, #8
 800540a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800540e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800541a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1d9      	bne.n	80053e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005432:	2b00      	cmp	r3, #0
 8005434:	d013      	beq.n	800545e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800543a:	4a13      	ldr	r2, [pc, #76]	; (8005488 <HAL_UART_IRQHandler+0x29c>)
 800543c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005442:	4618      	mov	r0, r3
 8005444:	f7fd faf3 	bl	8002a2e <HAL_DMA_Abort_IT>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d017      	beq.n	800547e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005458:	4610      	mov	r0, r2
 800545a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545c:	e00f      	b.n	800547e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f9b6 	bl	80057d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005464:	e00b      	b.n	800547e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f9b2 	bl	80057d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800546c:	e007      	b.n	800547e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f9ae 	bl	80057d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800547c:	e193      	b.n	80057a6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800547e:	bf00      	nop
    return;
 8005480:	e191      	b.n	80057a6 <HAL_UART_IRQHandler+0x5ba>
 8005482:	bf00      	nop
 8005484:	04000120 	.word	0x04000120
 8005488:	08006299 	.word	0x08006299

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005490:	2b01      	cmp	r3, #1
 8005492:	f040 814c 	bne.w	800572e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549a:	f003 0310 	and.w	r3, r3, #16
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 8145 	beq.w	800572e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80054a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 813e 	beq.w	800572e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2210      	movs	r2, #16
 80054b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c4:	2b40      	cmp	r3, #64	; 0x40
 80054c6:	f040 80b6 	bne.w	8005636 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 8165 	beq.w	80057aa <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054ea:	429a      	cmp	r2, r3
 80054ec:	f080 815d 	bcs.w	80057aa <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005504:	f000 8086 	beq.w	8005614 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800551c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005532:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005536:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800553e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005542:	e841 2300 	strex	r3, r2, [r1]
 8005546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800554a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1da      	bne.n	8005508 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3308      	adds	r3, #8
 8005558:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005564:	f023 0301 	bic.w	r3, r3, #1
 8005568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3308      	adds	r3, #8
 8005572:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005576:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800557a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800557e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e1      	bne.n	8005552 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3308      	adds	r3, #8
 8005594:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800559e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3308      	adds	r3, #8
 80055ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e3      	bne.n	800558e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e4:	f023 0310 	bic.w	r3, r3, #16
 80055e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	461a      	mov	r2, r3
 80055f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80055f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e4      	bne.n	80055d4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800560e:	4618      	mov	r0, r3
 8005610:	f7fd f99d 	bl	800294e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005626:	b29b      	uxth	r3, r3
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	b29b      	uxth	r3, r3
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f8d8 	bl	80057e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005634:	e0b9      	b.n	80057aa <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005642:	b29b      	uxth	r3, r3
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005650:	b29b      	uxth	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 80ab 	beq.w	80057ae <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 80a6 	beq.w	80057ae <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	e853 3f00 	ldrex	r3, [r3]
 800566e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005672:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005676:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005684:	647b      	str	r3, [r7, #68]	; 0x44
 8005686:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800568a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e4      	bne.n	8005662 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3308      	adds	r3, #8
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	e853 3f00 	ldrex	r3, [r3]
 80056a6:	623b      	str	r3, [r7, #32]
   return(result);
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3308      	adds	r3, #8
 80056b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056bc:	633a      	str	r2, [r7, #48]	; 0x30
 80056be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c4:	e841 2300 	strex	r3, r2, [r1]
 80056c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1e3      	bne.n	8005698 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f023 0310 	bic.w	r3, r3, #16
 80056f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	461a      	mov	r2, r3
 8005702:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005706:	61fb      	str	r3, [r7, #28]
 8005708:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	69b9      	ldr	r1, [r7, #24]
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	617b      	str	r3, [r7, #20]
   return(result);
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e4      	bne.n	80056e4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2202      	movs	r2, #2
 800571e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005720:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005724:	4619      	mov	r1, r3
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f85c 	bl	80057e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800572c:	e03f      	b.n	80057ae <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800572e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00e      	beq.n	8005758 <HAL_UART_IRQHandler+0x56c>
 800573a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800573e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d008      	beq.n	8005758 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800574e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f853 	bl	80057fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005756:	e02d      	b.n	80057b4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00e      	beq.n	8005782 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576c:	2b00      	cmp	r3, #0
 800576e:	d008      	beq.n	8005782 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01c      	beq.n	80057b2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	4798      	blx	r3
    }
    return;
 8005780:	e017      	b.n	80057b2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	d012      	beq.n	80057b4 <HAL_UART_IRQHandler+0x5c8>
 800578e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00c      	beq.n	80057b4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fe4d 	bl	800643a <UART_EndTransmit_IT>
    return;
 80057a0:	e008      	b.n	80057b4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80057a2:	bf00      	nop
 80057a4:	e006      	b.n	80057b4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80057a6:	bf00      	nop
 80057a8:	e004      	b.n	80057b4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80057aa:	bf00      	nop
 80057ac:	e002      	b.n	80057b4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80057ae:	bf00      	nop
 80057b0:	e000      	b.n	80057b4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80057b2:	bf00      	nop
  }

}
 80057b4:	37e8      	adds	r7, #232	; 0xe8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop

080057bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b088      	sub	sp, #32
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4ba6      	ldr	r3, [pc, #664]	; (8005ad4 <UART_SetConfig+0x2c4>)
 800583c:	4013      	ands	r3, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6812      	ldr	r2, [r2, #0]
 8005842:	6979      	ldr	r1, [r7, #20]
 8005844:	430b      	orrs	r3, r1
 8005846:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	430a      	orrs	r2, r1
 8005880:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a94      	ldr	r2, [pc, #592]	; (8005ad8 <UART_SetConfig+0x2c8>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d120      	bne.n	80058ce <UART_SetConfig+0xbe>
 800588c:	4b93      	ldr	r3, [pc, #588]	; (8005adc <UART_SetConfig+0x2cc>)
 800588e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2b03      	cmp	r3, #3
 8005898:	d816      	bhi.n	80058c8 <UART_SetConfig+0xb8>
 800589a:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <UART_SetConfig+0x90>)
 800589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a0:	080058b1 	.word	0x080058b1
 80058a4:	080058bd 	.word	0x080058bd
 80058a8:	080058b7 	.word	0x080058b7
 80058ac:	080058c3 	.word	0x080058c3
 80058b0:	2301      	movs	r3, #1
 80058b2:	77fb      	strb	r3, [r7, #31]
 80058b4:	e150      	b.n	8005b58 <UART_SetConfig+0x348>
 80058b6:	2302      	movs	r3, #2
 80058b8:	77fb      	strb	r3, [r7, #31]
 80058ba:	e14d      	b.n	8005b58 <UART_SetConfig+0x348>
 80058bc:	2304      	movs	r3, #4
 80058be:	77fb      	strb	r3, [r7, #31]
 80058c0:	e14a      	b.n	8005b58 <UART_SetConfig+0x348>
 80058c2:	2308      	movs	r3, #8
 80058c4:	77fb      	strb	r3, [r7, #31]
 80058c6:	e147      	b.n	8005b58 <UART_SetConfig+0x348>
 80058c8:	2310      	movs	r3, #16
 80058ca:	77fb      	strb	r3, [r7, #31]
 80058cc:	e144      	b.n	8005b58 <UART_SetConfig+0x348>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a83      	ldr	r2, [pc, #524]	; (8005ae0 <UART_SetConfig+0x2d0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d132      	bne.n	800593e <UART_SetConfig+0x12e>
 80058d8:	4b80      	ldr	r3, [pc, #512]	; (8005adc <UART_SetConfig+0x2cc>)
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058de:	f003 030c 	and.w	r3, r3, #12
 80058e2:	2b0c      	cmp	r3, #12
 80058e4:	d828      	bhi.n	8005938 <UART_SetConfig+0x128>
 80058e6:	a201      	add	r2, pc, #4	; (adr r2, 80058ec <UART_SetConfig+0xdc>)
 80058e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ec:	08005921 	.word	0x08005921
 80058f0:	08005939 	.word	0x08005939
 80058f4:	08005939 	.word	0x08005939
 80058f8:	08005939 	.word	0x08005939
 80058fc:	0800592d 	.word	0x0800592d
 8005900:	08005939 	.word	0x08005939
 8005904:	08005939 	.word	0x08005939
 8005908:	08005939 	.word	0x08005939
 800590c:	08005927 	.word	0x08005927
 8005910:	08005939 	.word	0x08005939
 8005914:	08005939 	.word	0x08005939
 8005918:	08005939 	.word	0x08005939
 800591c:	08005933 	.word	0x08005933
 8005920:	2300      	movs	r3, #0
 8005922:	77fb      	strb	r3, [r7, #31]
 8005924:	e118      	b.n	8005b58 <UART_SetConfig+0x348>
 8005926:	2302      	movs	r3, #2
 8005928:	77fb      	strb	r3, [r7, #31]
 800592a:	e115      	b.n	8005b58 <UART_SetConfig+0x348>
 800592c:	2304      	movs	r3, #4
 800592e:	77fb      	strb	r3, [r7, #31]
 8005930:	e112      	b.n	8005b58 <UART_SetConfig+0x348>
 8005932:	2308      	movs	r3, #8
 8005934:	77fb      	strb	r3, [r7, #31]
 8005936:	e10f      	b.n	8005b58 <UART_SetConfig+0x348>
 8005938:	2310      	movs	r3, #16
 800593a:	77fb      	strb	r3, [r7, #31]
 800593c:	e10c      	b.n	8005b58 <UART_SetConfig+0x348>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a68      	ldr	r2, [pc, #416]	; (8005ae4 <UART_SetConfig+0x2d4>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d120      	bne.n	800598a <UART_SetConfig+0x17a>
 8005948:	4b64      	ldr	r3, [pc, #400]	; (8005adc <UART_SetConfig+0x2cc>)
 800594a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005952:	2b30      	cmp	r3, #48	; 0x30
 8005954:	d013      	beq.n	800597e <UART_SetConfig+0x16e>
 8005956:	2b30      	cmp	r3, #48	; 0x30
 8005958:	d814      	bhi.n	8005984 <UART_SetConfig+0x174>
 800595a:	2b20      	cmp	r3, #32
 800595c:	d009      	beq.n	8005972 <UART_SetConfig+0x162>
 800595e:	2b20      	cmp	r3, #32
 8005960:	d810      	bhi.n	8005984 <UART_SetConfig+0x174>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <UART_SetConfig+0x15c>
 8005966:	2b10      	cmp	r3, #16
 8005968:	d006      	beq.n	8005978 <UART_SetConfig+0x168>
 800596a:	e00b      	b.n	8005984 <UART_SetConfig+0x174>
 800596c:	2300      	movs	r3, #0
 800596e:	77fb      	strb	r3, [r7, #31]
 8005970:	e0f2      	b.n	8005b58 <UART_SetConfig+0x348>
 8005972:	2302      	movs	r3, #2
 8005974:	77fb      	strb	r3, [r7, #31]
 8005976:	e0ef      	b.n	8005b58 <UART_SetConfig+0x348>
 8005978:	2304      	movs	r3, #4
 800597a:	77fb      	strb	r3, [r7, #31]
 800597c:	e0ec      	b.n	8005b58 <UART_SetConfig+0x348>
 800597e:	2308      	movs	r3, #8
 8005980:	77fb      	strb	r3, [r7, #31]
 8005982:	e0e9      	b.n	8005b58 <UART_SetConfig+0x348>
 8005984:	2310      	movs	r3, #16
 8005986:	77fb      	strb	r3, [r7, #31]
 8005988:	e0e6      	b.n	8005b58 <UART_SetConfig+0x348>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a56      	ldr	r2, [pc, #344]	; (8005ae8 <UART_SetConfig+0x2d8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d120      	bne.n	80059d6 <UART_SetConfig+0x1c6>
 8005994:	4b51      	ldr	r3, [pc, #324]	; (8005adc <UART_SetConfig+0x2cc>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800599e:	2bc0      	cmp	r3, #192	; 0xc0
 80059a0:	d013      	beq.n	80059ca <UART_SetConfig+0x1ba>
 80059a2:	2bc0      	cmp	r3, #192	; 0xc0
 80059a4:	d814      	bhi.n	80059d0 <UART_SetConfig+0x1c0>
 80059a6:	2b80      	cmp	r3, #128	; 0x80
 80059a8:	d009      	beq.n	80059be <UART_SetConfig+0x1ae>
 80059aa:	2b80      	cmp	r3, #128	; 0x80
 80059ac:	d810      	bhi.n	80059d0 <UART_SetConfig+0x1c0>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <UART_SetConfig+0x1a8>
 80059b2:	2b40      	cmp	r3, #64	; 0x40
 80059b4:	d006      	beq.n	80059c4 <UART_SetConfig+0x1b4>
 80059b6:	e00b      	b.n	80059d0 <UART_SetConfig+0x1c0>
 80059b8:	2300      	movs	r3, #0
 80059ba:	77fb      	strb	r3, [r7, #31]
 80059bc:	e0cc      	b.n	8005b58 <UART_SetConfig+0x348>
 80059be:	2302      	movs	r3, #2
 80059c0:	77fb      	strb	r3, [r7, #31]
 80059c2:	e0c9      	b.n	8005b58 <UART_SetConfig+0x348>
 80059c4:	2304      	movs	r3, #4
 80059c6:	77fb      	strb	r3, [r7, #31]
 80059c8:	e0c6      	b.n	8005b58 <UART_SetConfig+0x348>
 80059ca:	2308      	movs	r3, #8
 80059cc:	77fb      	strb	r3, [r7, #31]
 80059ce:	e0c3      	b.n	8005b58 <UART_SetConfig+0x348>
 80059d0:	2310      	movs	r3, #16
 80059d2:	77fb      	strb	r3, [r7, #31]
 80059d4:	e0c0      	b.n	8005b58 <UART_SetConfig+0x348>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a44      	ldr	r2, [pc, #272]	; (8005aec <UART_SetConfig+0x2dc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d125      	bne.n	8005a2c <UART_SetConfig+0x21c>
 80059e0:	4b3e      	ldr	r3, [pc, #248]	; (8005adc <UART_SetConfig+0x2cc>)
 80059e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ee:	d017      	beq.n	8005a20 <UART_SetConfig+0x210>
 80059f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059f4:	d817      	bhi.n	8005a26 <UART_SetConfig+0x216>
 80059f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059fa:	d00b      	beq.n	8005a14 <UART_SetConfig+0x204>
 80059fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a00:	d811      	bhi.n	8005a26 <UART_SetConfig+0x216>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <UART_SetConfig+0x1fe>
 8005a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a0a:	d006      	beq.n	8005a1a <UART_SetConfig+0x20a>
 8005a0c:	e00b      	b.n	8005a26 <UART_SetConfig+0x216>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	77fb      	strb	r3, [r7, #31]
 8005a12:	e0a1      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a14:	2302      	movs	r3, #2
 8005a16:	77fb      	strb	r3, [r7, #31]
 8005a18:	e09e      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a1a:	2304      	movs	r3, #4
 8005a1c:	77fb      	strb	r3, [r7, #31]
 8005a1e:	e09b      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a20:	2308      	movs	r3, #8
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e098      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a26:	2310      	movs	r3, #16
 8005a28:	77fb      	strb	r3, [r7, #31]
 8005a2a:	e095      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a2f      	ldr	r2, [pc, #188]	; (8005af0 <UART_SetConfig+0x2e0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d125      	bne.n	8005a82 <UART_SetConfig+0x272>
 8005a36:	4b29      	ldr	r3, [pc, #164]	; (8005adc <UART_SetConfig+0x2cc>)
 8005a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a44:	d017      	beq.n	8005a76 <UART_SetConfig+0x266>
 8005a46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a4a:	d817      	bhi.n	8005a7c <UART_SetConfig+0x26c>
 8005a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a50:	d00b      	beq.n	8005a6a <UART_SetConfig+0x25a>
 8005a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a56:	d811      	bhi.n	8005a7c <UART_SetConfig+0x26c>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <UART_SetConfig+0x254>
 8005a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a60:	d006      	beq.n	8005a70 <UART_SetConfig+0x260>
 8005a62:	e00b      	b.n	8005a7c <UART_SetConfig+0x26c>
 8005a64:	2301      	movs	r3, #1
 8005a66:	77fb      	strb	r3, [r7, #31]
 8005a68:	e076      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	77fb      	strb	r3, [r7, #31]
 8005a6e:	e073      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a70:	2304      	movs	r3, #4
 8005a72:	77fb      	strb	r3, [r7, #31]
 8005a74:	e070      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a76:	2308      	movs	r3, #8
 8005a78:	77fb      	strb	r3, [r7, #31]
 8005a7a:	e06d      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a7c:	2310      	movs	r3, #16
 8005a7e:	77fb      	strb	r3, [r7, #31]
 8005a80:	e06a      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1b      	ldr	r2, [pc, #108]	; (8005af4 <UART_SetConfig+0x2e4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d138      	bne.n	8005afe <UART_SetConfig+0x2ee>
 8005a8c:	4b13      	ldr	r3, [pc, #76]	; (8005adc <UART_SetConfig+0x2cc>)
 8005a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a92:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a9a:	d017      	beq.n	8005acc <UART_SetConfig+0x2bc>
 8005a9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005aa0:	d82a      	bhi.n	8005af8 <UART_SetConfig+0x2e8>
 8005aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa6:	d00b      	beq.n	8005ac0 <UART_SetConfig+0x2b0>
 8005aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aac:	d824      	bhi.n	8005af8 <UART_SetConfig+0x2e8>
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <UART_SetConfig+0x2aa>
 8005ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab6:	d006      	beq.n	8005ac6 <UART_SetConfig+0x2b6>
 8005ab8:	e01e      	b.n	8005af8 <UART_SetConfig+0x2e8>
 8005aba:	2300      	movs	r3, #0
 8005abc:	77fb      	strb	r3, [r7, #31]
 8005abe:	e04b      	b.n	8005b58 <UART_SetConfig+0x348>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	77fb      	strb	r3, [r7, #31]
 8005ac4:	e048      	b.n	8005b58 <UART_SetConfig+0x348>
 8005ac6:	2304      	movs	r3, #4
 8005ac8:	77fb      	strb	r3, [r7, #31]
 8005aca:	e045      	b.n	8005b58 <UART_SetConfig+0x348>
 8005acc:	2308      	movs	r3, #8
 8005ace:	77fb      	strb	r3, [r7, #31]
 8005ad0:	e042      	b.n	8005b58 <UART_SetConfig+0x348>
 8005ad2:	bf00      	nop
 8005ad4:	efff69f3 	.word	0xefff69f3
 8005ad8:	40011000 	.word	0x40011000
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	40004400 	.word	0x40004400
 8005ae4:	40004800 	.word	0x40004800
 8005ae8:	40004c00 	.word	0x40004c00
 8005aec:	40005000 	.word	0x40005000
 8005af0:	40011400 	.word	0x40011400
 8005af4:	40007800 	.word	0x40007800
 8005af8:	2310      	movs	r3, #16
 8005afa:	77fb      	strb	r3, [r7, #31]
 8005afc:	e02c      	b.n	8005b58 <UART_SetConfig+0x348>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a72      	ldr	r2, [pc, #456]	; (8005ccc <UART_SetConfig+0x4bc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d125      	bne.n	8005b54 <UART_SetConfig+0x344>
 8005b08:	4b71      	ldr	r3, [pc, #452]	; (8005cd0 <UART_SetConfig+0x4c0>)
 8005b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b16:	d017      	beq.n	8005b48 <UART_SetConfig+0x338>
 8005b18:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b1c:	d817      	bhi.n	8005b4e <UART_SetConfig+0x33e>
 8005b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b22:	d00b      	beq.n	8005b3c <UART_SetConfig+0x32c>
 8005b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b28:	d811      	bhi.n	8005b4e <UART_SetConfig+0x33e>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <UART_SetConfig+0x326>
 8005b2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b32:	d006      	beq.n	8005b42 <UART_SetConfig+0x332>
 8005b34:	e00b      	b.n	8005b4e <UART_SetConfig+0x33e>
 8005b36:	2300      	movs	r3, #0
 8005b38:	77fb      	strb	r3, [r7, #31]
 8005b3a:	e00d      	b.n	8005b58 <UART_SetConfig+0x348>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	77fb      	strb	r3, [r7, #31]
 8005b40:	e00a      	b.n	8005b58 <UART_SetConfig+0x348>
 8005b42:	2304      	movs	r3, #4
 8005b44:	77fb      	strb	r3, [r7, #31]
 8005b46:	e007      	b.n	8005b58 <UART_SetConfig+0x348>
 8005b48:	2308      	movs	r3, #8
 8005b4a:	77fb      	strb	r3, [r7, #31]
 8005b4c:	e004      	b.n	8005b58 <UART_SetConfig+0x348>
 8005b4e:	2310      	movs	r3, #16
 8005b50:	77fb      	strb	r3, [r7, #31]
 8005b52:	e001      	b.n	8005b58 <UART_SetConfig+0x348>
 8005b54:	2310      	movs	r3, #16
 8005b56:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b60:	d15b      	bne.n	8005c1a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005b62:	7ffb      	ldrb	r3, [r7, #31]
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d828      	bhi.n	8005bba <UART_SetConfig+0x3aa>
 8005b68:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <UART_SetConfig+0x360>)
 8005b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6e:	bf00      	nop
 8005b70:	08005b95 	.word	0x08005b95
 8005b74:	08005b9d 	.word	0x08005b9d
 8005b78:	08005ba5 	.word	0x08005ba5
 8005b7c:	08005bbb 	.word	0x08005bbb
 8005b80:	08005bab 	.word	0x08005bab
 8005b84:	08005bbb 	.word	0x08005bbb
 8005b88:	08005bbb 	.word	0x08005bbb
 8005b8c:	08005bbb 	.word	0x08005bbb
 8005b90:	08005bb3 	.word	0x08005bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b94:	f7fd fe40 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 8005b98:	61b8      	str	r0, [r7, #24]
        break;
 8005b9a:	e013      	b.n	8005bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b9c:	f7fd fe50 	bl	8003840 <HAL_RCC_GetPCLK2Freq>
 8005ba0:	61b8      	str	r0, [r7, #24]
        break;
 8005ba2:	e00f      	b.n	8005bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba4:	4b4b      	ldr	r3, [pc, #300]	; (8005cd4 <UART_SetConfig+0x4c4>)
 8005ba6:	61bb      	str	r3, [r7, #24]
        break;
 8005ba8:	e00c      	b.n	8005bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005baa:	f7fd fd23 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 8005bae:	61b8      	str	r0, [r7, #24]
        break;
 8005bb0:	e008      	b.n	8005bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bb6:	61bb      	str	r3, [r7, #24]
        break;
 8005bb8:	e004      	b.n	8005bc4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	77bb      	strb	r3, [r7, #30]
        break;
 8005bc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d074      	beq.n	8005cb4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	005a      	lsls	r2, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	085b      	lsrs	r3, r3, #1
 8005bd4:	441a      	add	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2b0f      	cmp	r3, #15
 8005be4:	d916      	bls.n	8005c14 <UART_SetConfig+0x404>
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bec:	d212      	bcs.n	8005c14 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f023 030f 	bic.w	r3, r3, #15
 8005bf6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	89fb      	ldrh	r3, [r7, #14]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	89fa      	ldrh	r2, [r7, #14]
 8005c10:	60da      	str	r2, [r3, #12]
 8005c12:	e04f      	b.n	8005cb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	77bb      	strb	r3, [r7, #30]
 8005c18:	e04c      	b.n	8005cb4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c1a:	7ffb      	ldrb	r3, [r7, #31]
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d828      	bhi.n	8005c72 <UART_SetConfig+0x462>
 8005c20:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <UART_SetConfig+0x418>)
 8005c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c26:	bf00      	nop
 8005c28:	08005c4d 	.word	0x08005c4d
 8005c2c:	08005c55 	.word	0x08005c55
 8005c30:	08005c5d 	.word	0x08005c5d
 8005c34:	08005c73 	.word	0x08005c73
 8005c38:	08005c63 	.word	0x08005c63
 8005c3c:	08005c73 	.word	0x08005c73
 8005c40:	08005c73 	.word	0x08005c73
 8005c44:	08005c73 	.word	0x08005c73
 8005c48:	08005c6b 	.word	0x08005c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c4c:	f7fd fde4 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 8005c50:	61b8      	str	r0, [r7, #24]
        break;
 8005c52:	e013      	b.n	8005c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c54:	f7fd fdf4 	bl	8003840 <HAL_RCC_GetPCLK2Freq>
 8005c58:	61b8      	str	r0, [r7, #24]
        break;
 8005c5a:	e00f      	b.n	8005c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c5c:	4b1d      	ldr	r3, [pc, #116]	; (8005cd4 <UART_SetConfig+0x4c4>)
 8005c5e:	61bb      	str	r3, [r7, #24]
        break;
 8005c60:	e00c      	b.n	8005c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c62:	f7fd fcc7 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 8005c66:	61b8      	str	r0, [r7, #24]
        break;
 8005c68:	e008      	b.n	8005c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c6e:	61bb      	str	r3, [r7, #24]
        break;
 8005c70:	e004      	b.n	8005c7c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	77bb      	strb	r3, [r7, #30]
        break;
 8005c7a:	bf00      	nop
    }

    if (pclk != 0U)
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d018      	beq.n	8005cb4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	085a      	lsrs	r2, r3, #1
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	441a      	add	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	2b0f      	cmp	r3, #15
 8005c9a:	d909      	bls.n	8005cb0 <UART_SetConfig+0x4a0>
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca2:	d205      	bcs.n	8005cb0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	60da      	str	r2, [r3, #12]
 8005cae:	e001      	b.n	8005cb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005cc0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3720      	adds	r7, #32
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	40007c00 	.word	0x40007c00
 8005cd0:	40023800 	.word	0x40023800
 8005cd4:	00f42400 	.word	0x00f42400

08005cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	f003 0310 	and.w	r3, r3, #16
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01a      	beq.n	8005dee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dd6:	d10a      	bne.n	8005dee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	605a      	str	r2, [r3, #4]
  }
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e2c:	f7fb fe44 	bl	8001ab8 <HAL_GetTick>
 8005e30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0308 	and.w	r3, r3, #8
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d10e      	bne.n	8005e5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f831 	bl	8005eb6 <UART_WaitOnFlagUntilTimeout>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e027      	b.n	8005eae <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	d10e      	bne.n	8005e8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f81b 	bl	8005eb6 <UART_WaitOnFlagUntilTimeout>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e011      	b.n	8005eae <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b09c      	sub	sp, #112	; 0x70
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	60f8      	str	r0, [r7, #12]
 8005ebe:	60b9      	str	r1, [r7, #8]
 8005ec0:	603b      	str	r3, [r7, #0]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ec6:	e0a7      	b.n	8006018 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ece:	f000 80a3 	beq.w	8006018 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ed2:	f7fb fdf1 	bl	8001ab8 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d302      	bcc.n	8005ee8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005ee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d13f      	bne.n	8005f68 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ef8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005efc:	667b      	str	r3, [r7, #100]	; 0x64
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e6      	bne.n	8005ee8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3308      	adds	r3, #8
 8005f20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2c:	f023 0301 	bic.w	r3, r3, #1
 8005f30:	663b      	str	r3, [r7, #96]	; 0x60
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3308      	adds	r3, #8
 8005f38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e5      	bne.n	8005f1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2220      	movs	r2, #32
 8005f52:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e068      	b.n	800603a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0304 	and.w	r3, r3, #4
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d050      	beq.n	8006018 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f84:	d148      	bne.n	8006018 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f8e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fa4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fae:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e6      	bne.n	8005f90 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3308      	adds	r3, #8
 8005fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f023 0301 	bic.w	r3, r3, #1
 8005fd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3308      	adds	r3, #8
 8005fe0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fe2:	623a      	str	r2, [r7, #32]
 8005fe4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe6:	69f9      	ldr	r1, [r7, #28]
 8005fe8:	6a3a      	ldr	r2, [r7, #32]
 8005fea:	e841 2300 	strex	r3, r2, [r1]
 8005fee:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1e5      	bne.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2220      	movs	r2, #32
 8006008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e010      	b.n	800603a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69da      	ldr	r2, [r3, #28]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	4013      	ands	r3, r2
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	429a      	cmp	r2, r3
 8006026:	bf0c      	ite	eq
 8006028:	2301      	moveq	r3, #1
 800602a:	2300      	movne	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	461a      	mov	r2, r3
 8006030:	79fb      	ldrb	r3, [r7, #7]
 8006032:	429a      	cmp	r2, r3
 8006034:	f43f af48 	beq.w	8005ec8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3770      	adds	r7, #112	; 0x70
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006044:	b480      	push	{r7}
 8006046:	b097      	sub	sp, #92	; 0x5c
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	4613      	mov	r3, r2
 8006050:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	88fa      	ldrh	r2, [r7, #6]
 800605c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	88fa      	ldrh	r2, [r7, #6]
 8006064:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006076:	d10e      	bne.n	8006096 <UART_Start_Receive_IT+0x52>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d105      	bne.n	800608c <UART_Start_Receive_IT+0x48>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006086:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800608a:	e02d      	b.n	80060e8 <UART_Start_Receive_IT+0xa4>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	22ff      	movs	r2, #255	; 0xff
 8006090:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006094:	e028      	b.n	80060e8 <UART_Start_Receive_IT+0xa4>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10d      	bne.n	80060ba <UART_Start_Receive_IT+0x76>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d104      	bne.n	80060b0 <UART_Start_Receive_IT+0x6c>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	22ff      	movs	r2, #255	; 0xff
 80060aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060ae:	e01b      	b.n	80060e8 <UART_Start_Receive_IT+0xa4>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	227f      	movs	r2, #127	; 0x7f
 80060b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060b8:	e016      	b.n	80060e8 <UART_Start_Receive_IT+0xa4>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060c2:	d10d      	bne.n	80060e0 <UART_Start_Receive_IT+0x9c>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d104      	bne.n	80060d6 <UART_Start_Receive_IT+0x92>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	227f      	movs	r2, #127	; 0x7f
 80060d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060d4:	e008      	b.n	80060e8 <UART_Start_Receive_IT+0xa4>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	223f      	movs	r2, #63	; 0x3f
 80060da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060de:	e003      	b.n	80060e8 <UART_Start_Receive_IT+0xa4>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2222      	movs	r2, #34	; 0x22
 80060f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3308      	adds	r3, #8
 80060fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006102:	e853 3f00 	ldrex	r3, [r3]
 8006106:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610a:	f043 0301 	orr.w	r3, r3, #1
 800610e:	657b      	str	r3, [r7, #84]	; 0x54
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3308      	adds	r3, #8
 8006116:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006118:	64ba      	str	r2, [r7, #72]	; 0x48
 800611a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800611e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006120:	e841 2300 	strex	r3, r2, [r1]
 8006124:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1e5      	bne.n	80060f8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006134:	d107      	bne.n	8006146 <UART_Start_Receive_IT+0x102>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d103      	bne.n	8006146 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4a21      	ldr	r2, [pc, #132]	; (80061c8 <UART_Start_Receive_IT+0x184>)
 8006142:	669a      	str	r2, [r3, #104]	; 0x68
 8006144:	e002      	b.n	800614c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4a20      	ldr	r2, [pc, #128]	; (80061cc <UART_Start_Receive_IT+0x188>)
 800614a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d019      	beq.n	8006188 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006168:	64fb      	str	r3, [r7, #76]	; 0x4c
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006172:	637b      	str	r3, [r7, #52]	; 0x34
 8006174:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e6      	bne.n	8006154 <UART_Start_Receive_IT+0x110>
 8006186:	e018      	b.n	80061ba <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	613b      	str	r3, [r7, #16]
   return(result);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f043 0320 	orr.w	r3, r3, #32
 800619c:	653b      	str	r3, [r7, #80]	; 0x50
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061a6:	623b      	str	r3, [r7, #32]
 80061a8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061aa:	69f9      	ldr	r1, [r7, #28]
 80061ac:	6a3a      	ldr	r2, [r7, #32]
 80061ae:	e841 2300 	strex	r3, r2, [r1]
 80061b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1e6      	bne.n	8006188 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	375c      	adds	r7, #92	; 0x5c
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	080065f5 	.word	0x080065f5
 80061cc:	0800648f 	.word	0x0800648f

080061d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b095      	sub	sp, #84	; 0x54
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f6:	643b      	str	r3, [r7, #64]	; 0x40
 80061f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e6      	bne.n	80061d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3308      	adds	r3, #8
 8006210:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	61fb      	str	r3, [r7, #28]
   return(result);
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	f023 0301 	bic.w	r3, r3, #1
 8006220:	64bb      	str	r3, [r7, #72]	; 0x48
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3308      	adds	r3, #8
 8006228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800622a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800622c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e5      	bne.n	800620a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006242:	2b01      	cmp	r3, #1
 8006244:	d118      	bne.n	8006278 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	e853 3f00 	ldrex	r3, [r3]
 8006252:	60bb      	str	r3, [r7, #8]
   return(result);
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f023 0310 	bic.w	r3, r3, #16
 800625a:	647b      	str	r3, [r7, #68]	; 0x44
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	461a      	mov	r2, r3
 8006262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006264:	61bb      	str	r3, [r7, #24]
 8006266:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006268:	6979      	ldr	r1, [r7, #20]
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	e841 2300 	strex	r3, r2, [r1]
 8006270:	613b      	str	r3, [r7, #16]
   return(result);
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1e6      	bne.n	8006246 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2220      	movs	r2, #32
 800627c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800628c:	bf00      	nop
 800628e:	3754      	adds	r7, #84	; 0x54
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f7ff fa8a 	bl	80057d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062bc:	bf00      	nop
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b08f      	sub	sp, #60	; 0x3c
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d0:	2b21      	cmp	r3, #33	; 0x21
 80062d2:	d14c      	bne.n	800636e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062da:	b29b      	uxth	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d132      	bne.n	8006346 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062f4:	637b      	str	r3, [r7, #52]	; 0x34
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006300:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006302:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006306:	e841 2300 	strex	r3, r2, [r1]
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1e6      	bne.n	80062e0 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	e853 3f00 	ldrex	r3, [r3]
 800631e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006326:	633b      	str	r3, [r7, #48]	; 0x30
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006334:	6979      	ldr	r1, [r7, #20]
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	e841 2300 	strex	r3, r2, [r1]
 800633c:	613b      	str	r3, [r7, #16]
   return(result);
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1e6      	bne.n	8006312 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006344:	e013      	b.n	800636e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800634a:	781a      	ldrb	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006362:	b29b      	uxth	r3, r3
 8006364:	3b01      	subs	r3, #1
 8006366:	b29a      	uxth	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800636e:	bf00      	nop
 8006370:	373c      	adds	r7, #60	; 0x3c
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800637a:	b480      	push	{r7}
 800637c:	b091      	sub	sp, #68	; 0x44
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006386:	2b21      	cmp	r3, #33	; 0x21
 8006388:	d151      	bne.n	800642e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d132      	bne.n	80063fc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	e853 3f00 	ldrex	r3, [r3]
 80063a2:	623b      	str	r3, [r7, #32]
   return(result);
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	461a      	mov	r2, r3
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	633b      	str	r3, [r7, #48]	; 0x30
 80063b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063bc:	e841 2300 	strex	r3, r2, [r1]
 80063c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1e6      	bne.n	8006396 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063dc:	637b      	str	r3, [r7, #52]	; 0x34
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	461a      	mov	r2, r3
 80063e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e6:	61fb      	str	r3, [r7, #28]
 80063e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	69b9      	ldr	r1, [r7, #24]
 80063ec:	69fa      	ldr	r2, [r7, #28]
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	617b      	str	r3, [r7, #20]
   return(result);
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1e6      	bne.n	80063c8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80063fa:	e018      	b.n	800642e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006400:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006410:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006416:	1c9a      	adds	r2, r3, #2
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006422:	b29b      	uxth	r3, r3
 8006424:	3b01      	subs	r3, #1
 8006426:	b29a      	uxth	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800642e:	bf00      	nop
 8006430:	3744      	adds	r7, #68	; 0x44
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b088      	sub	sp, #32
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	e853 3f00 	ldrex	r3, [r3]
 800644e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006456:	61fb      	str	r3, [r7, #28]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	461a      	mov	r2, r3
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	61bb      	str	r3, [r7, #24]
 8006462:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006464:	6979      	ldr	r1, [r7, #20]
 8006466:	69ba      	ldr	r2, [r7, #24]
 8006468:	e841 2300 	strex	r3, r2, [r1]
 800646c:	613b      	str	r3, [r7, #16]
   return(result);
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1e6      	bne.n	8006442 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2220      	movs	r2, #32
 8006478:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7ff f99b 	bl	80057bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006486:	bf00      	nop
 8006488:	3720      	adds	r7, #32
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b096      	sub	sp, #88	; 0x58
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800649c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064a6:	2b22      	cmp	r3, #34	; 0x22
 80064a8:	f040 8098 	bne.w	80065dc <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80064b6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80064ba:	b2d9      	uxtb	r1, r3
 80064bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c6:	400a      	ands	r2, r1
 80064c8:	b2d2      	uxtb	r2, r2
 80064ca:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064dc:	b29b      	uxth	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d17b      	bne.n	80065ec <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006504:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006508:	653b      	str	r3, [r7, #80]	; 0x50
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006512:	647b      	str	r3, [r7, #68]	; 0x44
 8006514:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e6      	bne.n	80064f4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3308      	adds	r3, #8
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	623b      	str	r3, [r7, #32]
   return(result);
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	f023 0301 	bic.w	r3, r3, #1
 800653c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3308      	adds	r3, #8
 8006544:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006546:	633a      	str	r2, [r7, #48]	; 0x30
 8006548:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800654c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e5      	bne.n	8006526 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2220      	movs	r2, #32
 800655e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006572:	2b01      	cmp	r3, #1
 8006574:	d12e      	bne.n	80065d4 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	60fb      	str	r3, [r7, #12]
   return(result);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f023 0310 	bic.w	r3, r3, #16
 8006590:	64bb      	str	r3, [r7, #72]	; 0x48
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800659a:	61fb      	str	r3, [r7, #28]
 800659c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659e:	69b9      	ldr	r1, [r7, #24]
 80065a0:	69fa      	ldr	r2, [r7, #28]
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	617b      	str	r3, [r7, #20]
   return(result);
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e6      	bne.n	800657c <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	f003 0310 	and.w	r3, r3, #16
 80065b8:	2b10      	cmp	r3, #16
 80065ba:	d103      	bne.n	80065c4 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2210      	movs	r2, #16
 80065c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80065ca:	4619      	mov	r1, r3
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7ff f909 	bl	80057e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065d2:	e00b      	b.n	80065ec <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7fa ffbb 	bl	8001550 <HAL_UART_RxCpltCallback>
}
 80065da:	e007      	b.n	80065ec <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699a      	ldr	r2, [r3, #24]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0208 	orr.w	r2, r2, #8
 80065ea:	619a      	str	r2, [r3, #24]
}
 80065ec:	bf00      	nop
 80065ee:	3758      	adds	r7, #88	; 0x58
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b096      	sub	sp, #88	; 0x58
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006602:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800660c:	2b22      	cmp	r3, #34	; 0x22
 800660e:	f040 8098 	bne.w	8006742 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006620:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006622:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006626:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800662a:	4013      	ands	r3, r2
 800662c:	b29a      	uxth	r2, r3
 800662e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006630:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006636:	1c9a      	adds	r2, r3, #2
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006642:	b29b      	uxth	r3, r3
 8006644:	3b01      	subs	r3, #1
 8006646:	b29a      	uxth	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006654:	b29b      	uxth	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d17b      	bne.n	8006752 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006662:	e853 3f00 	ldrex	r3, [r3]
 8006666:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800666e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	461a      	mov	r2, r3
 8006676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006678:	643b      	str	r3, [r7, #64]	; 0x40
 800667a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800667e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006680:	e841 2300 	strex	r3, r2, [r1]
 8006684:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1e6      	bne.n	800665a <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3308      	adds	r3, #8
 8006692:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	e853 3f00 	ldrex	r3, [r3]
 800669a:	61fb      	str	r3, [r7, #28]
   return(result);
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	f023 0301 	bic.w	r3, r3, #1
 80066a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3308      	adds	r3, #8
 80066aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b4:	e841 2300 	strex	r3, r2, [r1]
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e5      	bne.n	800668c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d12e      	bne.n	800673a <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f023 0310 	bic.w	r3, r3, #16
 80066f6:	647b      	str	r3, [r7, #68]	; 0x44
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	461a      	mov	r2, r3
 80066fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006700:	61bb      	str	r3, [r7, #24]
 8006702:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	6979      	ldr	r1, [r7, #20]
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	613b      	str	r3, [r7, #16]
   return(result);
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e6      	bne.n	80066e2 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	f003 0310 	and.w	r3, r3, #16
 800671e:	2b10      	cmp	r3, #16
 8006720:	d103      	bne.n	800672a <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2210      	movs	r2, #16
 8006728:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff f856 	bl	80057e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006738:	e00b      	b.n	8006752 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fa ff08 	bl	8001550 <HAL_UART_RxCpltCallback>
}
 8006740:	e007      	b.n	8006752 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	699a      	ldr	r2, [r3, #24]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f042 0208 	orr.w	r2, r2, #8
 8006750:	619a      	str	r2, [r3, #24]
}
 8006752:	bf00      	nop
 8006754:	3758      	adds	r7, #88	; 0x58
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <__errno>:
 800675c:	4b01      	ldr	r3, [pc, #4]	; (8006764 <__errno+0x8>)
 800675e:	6818      	ldr	r0, [r3, #0]
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	20000088 	.word	0x20000088

08006768 <__libc_init_array>:
 8006768:	b570      	push	{r4, r5, r6, lr}
 800676a:	4d0d      	ldr	r5, [pc, #52]	; (80067a0 <__libc_init_array+0x38>)
 800676c:	4c0d      	ldr	r4, [pc, #52]	; (80067a4 <__libc_init_array+0x3c>)
 800676e:	1b64      	subs	r4, r4, r5
 8006770:	10a4      	asrs	r4, r4, #2
 8006772:	2600      	movs	r6, #0
 8006774:	42a6      	cmp	r6, r4
 8006776:	d109      	bne.n	800678c <__libc_init_array+0x24>
 8006778:	4d0b      	ldr	r5, [pc, #44]	; (80067a8 <__libc_init_array+0x40>)
 800677a:	4c0c      	ldr	r4, [pc, #48]	; (80067ac <__libc_init_array+0x44>)
 800677c:	f000 fc8e 	bl	800709c <_init>
 8006780:	1b64      	subs	r4, r4, r5
 8006782:	10a4      	asrs	r4, r4, #2
 8006784:	2600      	movs	r6, #0
 8006786:	42a6      	cmp	r6, r4
 8006788:	d105      	bne.n	8006796 <__libc_init_array+0x2e>
 800678a:	bd70      	pop	{r4, r5, r6, pc}
 800678c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006790:	4798      	blx	r3
 8006792:	3601      	adds	r6, #1
 8006794:	e7ee      	b.n	8006774 <__libc_init_array+0xc>
 8006796:	f855 3b04 	ldr.w	r3, [r5], #4
 800679a:	4798      	blx	r3
 800679c:	3601      	adds	r6, #1
 800679e:	e7f2      	b.n	8006786 <__libc_init_array+0x1e>
 80067a0:	08007254 	.word	0x08007254
 80067a4:	08007254 	.word	0x08007254
 80067a8:	08007254 	.word	0x08007254
 80067ac:	08007258 	.word	0x08007258

080067b0 <memset>:
 80067b0:	4402      	add	r2, r0
 80067b2:	4603      	mov	r3, r0
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d100      	bne.n	80067ba <memset+0xa>
 80067b8:	4770      	bx	lr
 80067ba:	f803 1b01 	strb.w	r1, [r3], #1
 80067be:	e7f9      	b.n	80067b4 <memset+0x4>

080067c0 <siprintf>:
 80067c0:	b40e      	push	{r1, r2, r3}
 80067c2:	b500      	push	{lr}
 80067c4:	b09c      	sub	sp, #112	; 0x70
 80067c6:	ab1d      	add	r3, sp, #116	; 0x74
 80067c8:	9002      	str	r0, [sp, #8]
 80067ca:	9006      	str	r0, [sp, #24]
 80067cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067d0:	4809      	ldr	r0, [pc, #36]	; (80067f8 <siprintf+0x38>)
 80067d2:	9107      	str	r1, [sp, #28]
 80067d4:	9104      	str	r1, [sp, #16]
 80067d6:	4909      	ldr	r1, [pc, #36]	; (80067fc <siprintf+0x3c>)
 80067d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80067dc:	9105      	str	r1, [sp, #20]
 80067de:	6800      	ldr	r0, [r0, #0]
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	a902      	add	r1, sp, #8
 80067e4:	f000 f868 	bl	80068b8 <_svfiprintf_r>
 80067e8:	9b02      	ldr	r3, [sp, #8]
 80067ea:	2200      	movs	r2, #0
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	b01c      	add	sp, #112	; 0x70
 80067f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067f4:	b003      	add	sp, #12
 80067f6:	4770      	bx	lr
 80067f8:	20000088 	.word	0x20000088
 80067fc:	ffff0208 	.word	0xffff0208

08006800 <__ssputs_r>:
 8006800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006804:	688e      	ldr	r6, [r1, #8]
 8006806:	429e      	cmp	r6, r3
 8006808:	4682      	mov	sl, r0
 800680a:	460c      	mov	r4, r1
 800680c:	4690      	mov	r8, r2
 800680e:	461f      	mov	r7, r3
 8006810:	d838      	bhi.n	8006884 <__ssputs_r+0x84>
 8006812:	898a      	ldrh	r2, [r1, #12]
 8006814:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006818:	d032      	beq.n	8006880 <__ssputs_r+0x80>
 800681a:	6825      	ldr	r5, [r4, #0]
 800681c:	6909      	ldr	r1, [r1, #16]
 800681e:	eba5 0901 	sub.w	r9, r5, r1
 8006822:	6965      	ldr	r5, [r4, #20]
 8006824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006828:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800682c:	3301      	adds	r3, #1
 800682e:	444b      	add	r3, r9
 8006830:	106d      	asrs	r5, r5, #1
 8006832:	429d      	cmp	r5, r3
 8006834:	bf38      	it	cc
 8006836:	461d      	movcc	r5, r3
 8006838:	0553      	lsls	r3, r2, #21
 800683a:	d531      	bpl.n	80068a0 <__ssputs_r+0xa0>
 800683c:	4629      	mov	r1, r5
 800683e:	f000 fb63 	bl	8006f08 <_malloc_r>
 8006842:	4606      	mov	r6, r0
 8006844:	b950      	cbnz	r0, 800685c <__ssputs_r+0x5c>
 8006846:	230c      	movs	r3, #12
 8006848:	f8ca 3000 	str.w	r3, [sl]
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006852:	81a3      	strh	r3, [r4, #12]
 8006854:	f04f 30ff 	mov.w	r0, #4294967295
 8006858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800685c:	6921      	ldr	r1, [r4, #16]
 800685e:	464a      	mov	r2, r9
 8006860:	f000 fabe 	bl	8006de0 <memcpy>
 8006864:	89a3      	ldrh	r3, [r4, #12]
 8006866:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800686a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686e:	81a3      	strh	r3, [r4, #12]
 8006870:	6126      	str	r6, [r4, #16]
 8006872:	6165      	str	r5, [r4, #20]
 8006874:	444e      	add	r6, r9
 8006876:	eba5 0509 	sub.w	r5, r5, r9
 800687a:	6026      	str	r6, [r4, #0]
 800687c:	60a5      	str	r5, [r4, #8]
 800687e:	463e      	mov	r6, r7
 8006880:	42be      	cmp	r6, r7
 8006882:	d900      	bls.n	8006886 <__ssputs_r+0x86>
 8006884:	463e      	mov	r6, r7
 8006886:	6820      	ldr	r0, [r4, #0]
 8006888:	4632      	mov	r2, r6
 800688a:	4641      	mov	r1, r8
 800688c:	f000 fab6 	bl	8006dfc <memmove>
 8006890:	68a3      	ldr	r3, [r4, #8]
 8006892:	1b9b      	subs	r3, r3, r6
 8006894:	60a3      	str	r3, [r4, #8]
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	4433      	add	r3, r6
 800689a:	6023      	str	r3, [r4, #0]
 800689c:	2000      	movs	r0, #0
 800689e:	e7db      	b.n	8006858 <__ssputs_r+0x58>
 80068a0:	462a      	mov	r2, r5
 80068a2:	f000 fba5 	bl	8006ff0 <_realloc_r>
 80068a6:	4606      	mov	r6, r0
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d1e1      	bne.n	8006870 <__ssputs_r+0x70>
 80068ac:	6921      	ldr	r1, [r4, #16]
 80068ae:	4650      	mov	r0, sl
 80068b0:	f000 fabe 	bl	8006e30 <_free_r>
 80068b4:	e7c7      	b.n	8006846 <__ssputs_r+0x46>
	...

080068b8 <_svfiprintf_r>:
 80068b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068bc:	4698      	mov	r8, r3
 80068be:	898b      	ldrh	r3, [r1, #12]
 80068c0:	061b      	lsls	r3, r3, #24
 80068c2:	b09d      	sub	sp, #116	; 0x74
 80068c4:	4607      	mov	r7, r0
 80068c6:	460d      	mov	r5, r1
 80068c8:	4614      	mov	r4, r2
 80068ca:	d50e      	bpl.n	80068ea <_svfiprintf_r+0x32>
 80068cc:	690b      	ldr	r3, [r1, #16]
 80068ce:	b963      	cbnz	r3, 80068ea <_svfiprintf_r+0x32>
 80068d0:	2140      	movs	r1, #64	; 0x40
 80068d2:	f000 fb19 	bl	8006f08 <_malloc_r>
 80068d6:	6028      	str	r0, [r5, #0]
 80068d8:	6128      	str	r0, [r5, #16]
 80068da:	b920      	cbnz	r0, 80068e6 <_svfiprintf_r+0x2e>
 80068dc:	230c      	movs	r3, #12
 80068de:	603b      	str	r3, [r7, #0]
 80068e0:	f04f 30ff 	mov.w	r0, #4294967295
 80068e4:	e0d1      	b.n	8006a8a <_svfiprintf_r+0x1d2>
 80068e6:	2340      	movs	r3, #64	; 0x40
 80068e8:	616b      	str	r3, [r5, #20]
 80068ea:	2300      	movs	r3, #0
 80068ec:	9309      	str	r3, [sp, #36]	; 0x24
 80068ee:	2320      	movs	r3, #32
 80068f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80068f8:	2330      	movs	r3, #48	; 0x30
 80068fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006aa4 <_svfiprintf_r+0x1ec>
 80068fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006902:	f04f 0901 	mov.w	r9, #1
 8006906:	4623      	mov	r3, r4
 8006908:	469a      	mov	sl, r3
 800690a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800690e:	b10a      	cbz	r2, 8006914 <_svfiprintf_r+0x5c>
 8006910:	2a25      	cmp	r2, #37	; 0x25
 8006912:	d1f9      	bne.n	8006908 <_svfiprintf_r+0x50>
 8006914:	ebba 0b04 	subs.w	fp, sl, r4
 8006918:	d00b      	beq.n	8006932 <_svfiprintf_r+0x7a>
 800691a:	465b      	mov	r3, fp
 800691c:	4622      	mov	r2, r4
 800691e:	4629      	mov	r1, r5
 8006920:	4638      	mov	r0, r7
 8006922:	f7ff ff6d 	bl	8006800 <__ssputs_r>
 8006926:	3001      	adds	r0, #1
 8006928:	f000 80aa 	beq.w	8006a80 <_svfiprintf_r+0x1c8>
 800692c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800692e:	445a      	add	r2, fp
 8006930:	9209      	str	r2, [sp, #36]	; 0x24
 8006932:	f89a 3000 	ldrb.w	r3, [sl]
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 80a2 	beq.w	8006a80 <_svfiprintf_r+0x1c8>
 800693c:	2300      	movs	r3, #0
 800693e:	f04f 32ff 	mov.w	r2, #4294967295
 8006942:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006946:	f10a 0a01 	add.w	sl, sl, #1
 800694a:	9304      	str	r3, [sp, #16]
 800694c:	9307      	str	r3, [sp, #28]
 800694e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006952:	931a      	str	r3, [sp, #104]	; 0x68
 8006954:	4654      	mov	r4, sl
 8006956:	2205      	movs	r2, #5
 8006958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800695c:	4851      	ldr	r0, [pc, #324]	; (8006aa4 <_svfiprintf_r+0x1ec>)
 800695e:	f7f9 fc6f 	bl	8000240 <memchr>
 8006962:	9a04      	ldr	r2, [sp, #16]
 8006964:	b9d8      	cbnz	r0, 800699e <_svfiprintf_r+0xe6>
 8006966:	06d0      	lsls	r0, r2, #27
 8006968:	bf44      	itt	mi
 800696a:	2320      	movmi	r3, #32
 800696c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006970:	0711      	lsls	r1, r2, #28
 8006972:	bf44      	itt	mi
 8006974:	232b      	movmi	r3, #43	; 0x2b
 8006976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800697a:	f89a 3000 	ldrb.w	r3, [sl]
 800697e:	2b2a      	cmp	r3, #42	; 0x2a
 8006980:	d015      	beq.n	80069ae <_svfiprintf_r+0xf6>
 8006982:	9a07      	ldr	r2, [sp, #28]
 8006984:	4654      	mov	r4, sl
 8006986:	2000      	movs	r0, #0
 8006988:	f04f 0c0a 	mov.w	ip, #10
 800698c:	4621      	mov	r1, r4
 800698e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006992:	3b30      	subs	r3, #48	; 0x30
 8006994:	2b09      	cmp	r3, #9
 8006996:	d94e      	bls.n	8006a36 <_svfiprintf_r+0x17e>
 8006998:	b1b0      	cbz	r0, 80069c8 <_svfiprintf_r+0x110>
 800699a:	9207      	str	r2, [sp, #28]
 800699c:	e014      	b.n	80069c8 <_svfiprintf_r+0x110>
 800699e:	eba0 0308 	sub.w	r3, r0, r8
 80069a2:	fa09 f303 	lsl.w	r3, r9, r3
 80069a6:	4313      	orrs	r3, r2
 80069a8:	9304      	str	r3, [sp, #16]
 80069aa:	46a2      	mov	sl, r4
 80069ac:	e7d2      	b.n	8006954 <_svfiprintf_r+0x9c>
 80069ae:	9b03      	ldr	r3, [sp, #12]
 80069b0:	1d19      	adds	r1, r3, #4
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	9103      	str	r1, [sp, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	bfbb      	ittet	lt
 80069ba:	425b      	neglt	r3, r3
 80069bc:	f042 0202 	orrlt.w	r2, r2, #2
 80069c0:	9307      	strge	r3, [sp, #28]
 80069c2:	9307      	strlt	r3, [sp, #28]
 80069c4:	bfb8      	it	lt
 80069c6:	9204      	strlt	r2, [sp, #16]
 80069c8:	7823      	ldrb	r3, [r4, #0]
 80069ca:	2b2e      	cmp	r3, #46	; 0x2e
 80069cc:	d10c      	bne.n	80069e8 <_svfiprintf_r+0x130>
 80069ce:	7863      	ldrb	r3, [r4, #1]
 80069d0:	2b2a      	cmp	r3, #42	; 0x2a
 80069d2:	d135      	bne.n	8006a40 <_svfiprintf_r+0x188>
 80069d4:	9b03      	ldr	r3, [sp, #12]
 80069d6:	1d1a      	adds	r2, r3, #4
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	9203      	str	r2, [sp, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	bfb8      	it	lt
 80069e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80069e4:	3402      	adds	r4, #2
 80069e6:	9305      	str	r3, [sp, #20]
 80069e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ab4 <_svfiprintf_r+0x1fc>
 80069ec:	7821      	ldrb	r1, [r4, #0]
 80069ee:	2203      	movs	r2, #3
 80069f0:	4650      	mov	r0, sl
 80069f2:	f7f9 fc25 	bl	8000240 <memchr>
 80069f6:	b140      	cbz	r0, 8006a0a <_svfiprintf_r+0x152>
 80069f8:	2340      	movs	r3, #64	; 0x40
 80069fa:	eba0 000a 	sub.w	r0, r0, sl
 80069fe:	fa03 f000 	lsl.w	r0, r3, r0
 8006a02:	9b04      	ldr	r3, [sp, #16]
 8006a04:	4303      	orrs	r3, r0
 8006a06:	3401      	adds	r4, #1
 8006a08:	9304      	str	r3, [sp, #16]
 8006a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a0e:	4826      	ldr	r0, [pc, #152]	; (8006aa8 <_svfiprintf_r+0x1f0>)
 8006a10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a14:	2206      	movs	r2, #6
 8006a16:	f7f9 fc13 	bl	8000240 <memchr>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d038      	beq.n	8006a90 <_svfiprintf_r+0x1d8>
 8006a1e:	4b23      	ldr	r3, [pc, #140]	; (8006aac <_svfiprintf_r+0x1f4>)
 8006a20:	bb1b      	cbnz	r3, 8006a6a <_svfiprintf_r+0x1b2>
 8006a22:	9b03      	ldr	r3, [sp, #12]
 8006a24:	3307      	adds	r3, #7
 8006a26:	f023 0307 	bic.w	r3, r3, #7
 8006a2a:	3308      	adds	r3, #8
 8006a2c:	9303      	str	r3, [sp, #12]
 8006a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a30:	4433      	add	r3, r6
 8006a32:	9309      	str	r3, [sp, #36]	; 0x24
 8006a34:	e767      	b.n	8006906 <_svfiprintf_r+0x4e>
 8006a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	2001      	movs	r0, #1
 8006a3e:	e7a5      	b.n	800698c <_svfiprintf_r+0xd4>
 8006a40:	2300      	movs	r3, #0
 8006a42:	3401      	adds	r4, #1
 8006a44:	9305      	str	r3, [sp, #20]
 8006a46:	4619      	mov	r1, r3
 8006a48:	f04f 0c0a 	mov.w	ip, #10
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a52:	3a30      	subs	r2, #48	; 0x30
 8006a54:	2a09      	cmp	r2, #9
 8006a56:	d903      	bls.n	8006a60 <_svfiprintf_r+0x1a8>
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0c5      	beq.n	80069e8 <_svfiprintf_r+0x130>
 8006a5c:	9105      	str	r1, [sp, #20]
 8006a5e:	e7c3      	b.n	80069e8 <_svfiprintf_r+0x130>
 8006a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a64:	4604      	mov	r4, r0
 8006a66:	2301      	movs	r3, #1
 8006a68:	e7f0      	b.n	8006a4c <_svfiprintf_r+0x194>
 8006a6a:	ab03      	add	r3, sp, #12
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	462a      	mov	r2, r5
 8006a70:	4b0f      	ldr	r3, [pc, #60]	; (8006ab0 <_svfiprintf_r+0x1f8>)
 8006a72:	a904      	add	r1, sp, #16
 8006a74:	4638      	mov	r0, r7
 8006a76:	f3af 8000 	nop.w
 8006a7a:	1c42      	adds	r2, r0, #1
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	d1d6      	bne.n	8006a2e <_svfiprintf_r+0x176>
 8006a80:	89ab      	ldrh	r3, [r5, #12]
 8006a82:	065b      	lsls	r3, r3, #25
 8006a84:	f53f af2c 	bmi.w	80068e0 <_svfiprintf_r+0x28>
 8006a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a8a:	b01d      	add	sp, #116	; 0x74
 8006a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a90:	ab03      	add	r3, sp, #12
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	462a      	mov	r2, r5
 8006a96:	4b06      	ldr	r3, [pc, #24]	; (8006ab0 <_svfiprintf_r+0x1f8>)
 8006a98:	a904      	add	r1, sp, #16
 8006a9a:	4638      	mov	r0, r7
 8006a9c:	f000 f87a 	bl	8006b94 <_printf_i>
 8006aa0:	e7eb      	b.n	8006a7a <_svfiprintf_r+0x1c2>
 8006aa2:	bf00      	nop
 8006aa4:	08007218 	.word	0x08007218
 8006aa8:	08007222 	.word	0x08007222
 8006aac:	00000000 	.word	0x00000000
 8006ab0:	08006801 	.word	0x08006801
 8006ab4:	0800721e 	.word	0x0800721e

08006ab8 <_printf_common>:
 8006ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006abc:	4616      	mov	r6, r2
 8006abe:	4699      	mov	r9, r3
 8006ac0:	688a      	ldr	r2, [r1, #8]
 8006ac2:	690b      	ldr	r3, [r1, #16]
 8006ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	bfb8      	it	lt
 8006acc:	4613      	movlt	r3, r2
 8006ace:	6033      	str	r3, [r6, #0]
 8006ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	b10a      	cbz	r2, 8006ade <_printf_common+0x26>
 8006ada:	3301      	adds	r3, #1
 8006adc:	6033      	str	r3, [r6, #0]
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	0699      	lsls	r1, r3, #26
 8006ae2:	bf42      	ittt	mi
 8006ae4:	6833      	ldrmi	r3, [r6, #0]
 8006ae6:	3302      	addmi	r3, #2
 8006ae8:	6033      	strmi	r3, [r6, #0]
 8006aea:	6825      	ldr	r5, [r4, #0]
 8006aec:	f015 0506 	ands.w	r5, r5, #6
 8006af0:	d106      	bne.n	8006b00 <_printf_common+0x48>
 8006af2:	f104 0a19 	add.w	sl, r4, #25
 8006af6:	68e3      	ldr	r3, [r4, #12]
 8006af8:	6832      	ldr	r2, [r6, #0]
 8006afa:	1a9b      	subs	r3, r3, r2
 8006afc:	42ab      	cmp	r3, r5
 8006afe:	dc26      	bgt.n	8006b4e <_printf_common+0x96>
 8006b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b04:	1e13      	subs	r3, r2, #0
 8006b06:	6822      	ldr	r2, [r4, #0]
 8006b08:	bf18      	it	ne
 8006b0a:	2301      	movne	r3, #1
 8006b0c:	0692      	lsls	r2, r2, #26
 8006b0e:	d42b      	bmi.n	8006b68 <_printf_common+0xb0>
 8006b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b14:	4649      	mov	r1, r9
 8006b16:	4638      	mov	r0, r7
 8006b18:	47c0      	blx	r8
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	d01e      	beq.n	8006b5c <_printf_common+0xa4>
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	68e5      	ldr	r5, [r4, #12]
 8006b22:	6832      	ldr	r2, [r6, #0]
 8006b24:	f003 0306 	and.w	r3, r3, #6
 8006b28:	2b04      	cmp	r3, #4
 8006b2a:	bf08      	it	eq
 8006b2c:	1aad      	subeq	r5, r5, r2
 8006b2e:	68a3      	ldr	r3, [r4, #8]
 8006b30:	6922      	ldr	r2, [r4, #16]
 8006b32:	bf0c      	ite	eq
 8006b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b38:	2500      	movne	r5, #0
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	bfc4      	itt	gt
 8006b3e:	1a9b      	subgt	r3, r3, r2
 8006b40:	18ed      	addgt	r5, r5, r3
 8006b42:	2600      	movs	r6, #0
 8006b44:	341a      	adds	r4, #26
 8006b46:	42b5      	cmp	r5, r6
 8006b48:	d11a      	bne.n	8006b80 <_printf_common+0xc8>
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	e008      	b.n	8006b60 <_printf_common+0xa8>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	4652      	mov	r2, sl
 8006b52:	4649      	mov	r1, r9
 8006b54:	4638      	mov	r0, r7
 8006b56:	47c0      	blx	r8
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d103      	bne.n	8006b64 <_printf_common+0xac>
 8006b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b64:	3501      	adds	r5, #1
 8006b66:	e7c6      	b.n	8006af6 <_printf_common+0x3e>
 8006b68:	18e1      	adds	r1, r4, r3
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	2030      	movs	r0, #48	; 0x30
 8006b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b72:	4422      	add	r2, r4
 8006b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b7c:	3302      	adds	r3, #2
 8006b7e:	e7c7      	b.n	8006b10 <_printf_common+0x58>
 8006b80:	2301      	movs	r3, #1
 8006b82:	4622      	mov	r2, r4
 8006b84:	4649      	mov	r1, r9
 8006b86:	4638      	mov	r0, r7
 8006b88:	47c0      	blx	r8
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	d0e6      	beq.n	8006b5c <_printf_common+0xa4>
 8006b8e:	3601      	adds	r6, #1
 8006b90:	e7d9      	b.n	8006b46 <_printf_common+0x8e>
	...

08006b94 <_printf_i>:
 8006b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b98:	7e0f      	ldrb	r7, [r1, #24]
 8006b9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b9c:	2f78      	cmp	r7, #120	; 0x78
 8006b9e:	4691      	mov	r9, r2
 8006ba0:	4680      	mov	r8, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	469a      	mov	sl, r3
 8006ba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006baa:	d807      	bhi.n	8006bbc <_printf_i+0x28>
 8006bac:	2f62      	cmp	r7, #98	; 0x62
 8006bae:	d80a      	bhi.n	8006bc6 <_printf_i+0x32>
 8006bb0:	2f00      	cmp	r7, #0
 8006bb2:	f000 80d8 	beq.w	8006d66 <_printf_i+0x1d2>
 8006bb6:	2f58      	cmp	r7, #88	; 0x58
 8006bb8:	f000 80a3 	beq.w	8006d02 <_printf_i+0x16e>
 8006bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bc4:	e03a      	b.n	8006c3c <_printf_i+0xa8>
 8006bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bca:	2b15      	cmp	r3, #21
 8006bcc:	d8f6      	bhi.n	8006bbc <_printf_i+0x28>
 8006bce:	a101      	add	r1, pc, #4	; (adr r1, 8006bd4 <_printf_i+0x40>)
 8006bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bd4:	08006c2d 	.word	0x08006c2d
 8006bd8:	08006c41 	.word	0x08006c41
 8006bdc:	08006bbd 	.word	0x08006bbd
 8006be0:	08006bbd 	.word	0x08006bbd
 8006be4:	08006bbd 	.word	0x08006bbd
 8006be8:	08006bbd 	.word	0x08006bbd
 8006bec:	08006c41 	.word	0x08006c41
 8006bf0:	08006bbd 	.word	0x08006bbd
 8006bf4:	08006bbd 	.word	0x08006bbd
 8006bf8:	08006bbd 	.word	0x08006bbd
 8006bfc:	08006bbd 	.word	0x08006bbd
 8006c00:	08006d4d 	.word	0x08006d4d
 8006c04:	08006c71 	.word	0x08006c71
 8006c08:	08006d2f 	.word	0x08006d2f
 8006c0c:	08006bbd 	.word	0x08006bbd
 8006c10:	08006bbd 	.word	0x08006bbd
 8006c14:	08006d6f 	.word	0x08006d6f
 8006c18:	08006bbd 	.word	0x08006bbd
 8006c1c:	08006c71 	.word	0x08006c71
 8006c20:	08006bbd 	.word	0x08006bbd
 8006c24:	08006bbd 	.word	0x08006bbd
 8006c28:	08006d37 	.word	0x08006d37
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	1d1a      	adds	r2, r3, #4
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	602a      	str	r2, [r5, #0]
 8006c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e0a3      	b.n	8006d88 <_printf_i+0x1f4>
 8006c40:	6820      	ldr	r0, [r4, #0]
 8006c42:	6829      	ldr	r1, [r5, #0]
 8006c44:	0606      	lsls	r6, r0, #24
 8006c46:	f101 0304 	add.w	r3, r1, #4
 8006c4a:	d50a      	bpl.n	8006c62 <_printf_i+0xce>
 8006c4c:	680e      	ldr	r6, [r1, #0]
 8006c4e:	602b      	str	r3, [r5, #0]
 8006c50:	2e00      	cmp	r6, #0
 8006c52:	da03      	bge.n	8006c5c <_printf_i+0xc8>
 8006c54:	232d      	movs	r3, #45	; 0x2d
 8006c56:	4276      	negs	r6, r6
 8006c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c5c:	485e      	ldr	r0, [pc, #376]	; (8006dd8 <_printf_i+0x244>)
 8006c5e:	230a      	movs	r3, #10
 8006c60:	e019      	b.n	8006c96 <_printf_i+0x102>
 8006c62:	680e      	ldr	r6, [r1, #0]
 8006c64:	602b      	str	r3, [r5, #0]
 8006c66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c6a:	bf18      	it	ne
 8006c6c:	b236      	sxthne	r6, r6
 8006c6e:	e7ef      	b.n	8006c50 <_printf_i+0xbc>
 8006c70:	682b      	ldr	r3, [r5, #0]
 8006c72:	6820      	ldr	r0, [r4, #0]
 8006c74:	1d19      	adds	r1, r3, #4
 8006c76:	6029      	str	r1, [r5, #0]
 8006c78:	0601      	lsls	r1, r0, #24
 8006c7a:	d501      	bpl.n	8006c80 <_printf_i+0xec>
 8006c7c:	681e      	ldr	r6, [r3, #0]
 8006c7e:	e002      	b.n	8006c86 <_printf_i+0xf2>
 8006c80:	0646      	lsls	r6, r0, #25
 8006c82:	d5fb      	bpl.n	8006c7c <_printf_i+0xe8>
 8006c84:	881e      	ldrh	r6, [r3, #0]
 8006c86:	4854      	ldr	r0, [pc, #336]	; (8006dd8 <_printf_i+0x244>)
 8006c88:	2f6f      	cmp	r7, #111	; 0x6f
 8006c8a:	bf0c      	ite	eq
 8006c8c:	2308      	moveq	r3, #8
 8006c8e:	230a      	movne	r3, #10
 8006c90:	2100      	movs	r1, #0
 8006c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c96:	6865      	ldr	r5, [r4, #4]
 8006c98:	60a5      	str	r5, [r4, #8]
 8006c9a:	2d00      	cmp	r5, #0
 8006c9c:	bfa2      	ittt	ge
 8006c9e:	6821      	ldrge	r1, [r4, #0]
 8006ca0:	f021 0104 	bicge.w	r1, r1, #4
 8006ca4:	6021      	strge	r1, [r4, #0]
 8006ca6:	b90e      	cbnz	r6, 8006cac <_printf_i+0x118>
 8006ca8:	2d00      	cmp	r5, #0
 8006caa:	d04d      	beq.n	8006d48 <_printf_i+0x1b4>
 8006cac:	4615      	mov	r5, r2
 8006cae:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cb2:	fb03 6711 	mls	r7, r3, r1, r6
 8006cb6:	5dc7      	ldrb	r7, [r0, r7]
 8006cb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cbc:	4637      	mov	r7, r6
 8006cbe:	42bb      	cmp	r3, r7
 8006cc0:	460e      	mov	r6, r1
 8006cc2:	d9f4      	bls.n	8006cae <_printf_i+0x11a>
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d10b      	bne.n	8006ce0 <_printf_i+0x14c>
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	07de      	lsls	r6, r3, #31
 8006ccc:	d508      	bpl.n	8006ce0 <_printf_i+0x14c>
 8006cce:	6923      	ldr	r3, [r4, #16]
 8006cd0:	6861      	ldr	r1, [r4, #4]
 8006cd2:	4299      	cmp	r1, r3
 8006cd4:	bfde      	ittt	le
 8006cd6:	2330      	movle	r3, #48	; 0x30
 8006cd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ce0:	1b52      	subs	r2, r2, r5
 8006ce2:	6122      	str	r2, [r4, #16]
 8006ce4:	f8cd a000 	str.w	sl, [sp]
 8006ce8:	464b      	mov	r3, r9
 8006cea:	aa03      	add	r2, sp, #12
 8006cec:	4621      	mov	r1, r4
 8006cee:	4640      	mov	r0, r8
 8006cf0:	f7ff fee2 	bl	8006ab8 <_printf_common>
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	d14c      	bne.n	8006d92 <_printf_i+0x1fe>
 8006cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfc:	b004      	add	sp, #16
 8006cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d02:	4835      	ldr	r0, [pc, #212]	; (8006dd8 <_printf_i+0x244>)
 8006d04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d08:	6829      	ldr	r1, [r5, #0]
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d10:	6029      	str	r1, [r5, #0]
 8006d12:	061d      	lsls	r5, r3, #24
 8006d14:	d514      	bpl.n	8006d40 <_printf_i+0x1ac>
 8006d16:	07df      	lsls	r7, r3, #31
 8006d18:	bf44      	itt	mi
 8006d1a:	f043 0320 	orrmi.w	r3, r3, #32
 8006d1e:	6023      	strmi	r3, [r4, #0]
 8006d20:	b91e      	cbnz	r6, 8006d2a <_printf_i+0x196>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	f023 0320 	bic.w	r3, r3, #32
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	2310      	movs	r3, #16
 8006d2c:	e7b0      	b.n	8006c90 <_printf_i+0xfc>
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	f043 0320 	orr.w	r3, r3, #32
 8006d34:	6023      	str	r3, [r4, #0]
 8006d36:	2378      	movs	r3, #120	; 0x78
 8006d38:	4828      	ldr	r0, [pc, #160]	; (8006ddc <_printf_i+0x248>)
 8006d3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d3e:	e7e3      	b.n	8006d08 <_printf_i+0x174>
 8006d40:	0659      	lsls	r1, r3, #25
 8006d42:	bf48      	it	mi
 8006d44:	b2b6      	uxthmi	r6, r6
 8006d46:	e7e6      	b.n	8006d16 <_printf_i+0x182>
 8006d48:	4615      	mov	r5, r2
 8006d4a:	e7bb      	b.n	8006cc4 <_printf_i+0x130>
 8006d4c:	682b      	ldr	r3, [r5, #0]
 8006d4e:	6826      	ldr	r6, [r4, #0]
 8006d50:	6961      	ldr	r1, [r4, #20]
 8006d52:	1d18      	adds	r0, r3, #4
 8006d54:	6028      	str	r0, [r5, #0]
 8006d56:	0635      	lsls	r5, r6, #24
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	d501      	bpl.n	8006d60 <_printf_i+0x1cc>
 8006d5c:	6019      	str	r1, [r3, #0]
 8006d5e:	e002      	b.n	8006d66 <_printf_i+0x1d2>
 8006d60:	0670      	lsls	r0, r6, #25
 8006d62:	d5fb      	bpl.n	8006d5c <_printf_i+0x1c8>
 8006d64:	8019      	strh	r1, [r3, #0]
 8006d66:	2300      	movs	r3, #0
 8006d68:	6123      	str	r3, [r4, #16]
 8006d6a:	4615      	mov	r5, r2
 8006d6c:	e7ba      	b.n	8006ce4 <_printf_i+0x150>
 8006d6e:	682b      	ldr	r3, [r5, #0]
 8006d70:	1d1a      	adds	r2, r3, #4
 8006d72:	602a      	str	r2, [r5, #0]
 8006d74:	681d      	ldr	r5, [r3, #0]
 8006d76:	6862      	ldr	r2, [r4, #4]
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f7f9 fa60 	bl	8000240 <memchr>
 8006d80:	b108      	cbz	r0, 8006d86 <_printf_i+0x1f2>
 8006d82:	1b40      	subs	r0, r0, r5
 8006d84:	6060      	str	r0, [r4, #4]
 8006d86:	6863      	ldr	r3, [r4, #4]
 8006d88:	6123      	str	r3, [r4, #16]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d90:	e7a8      	b.n	8006ce4 <_printf_i+0x150>
 8006d92:	6923      	ldr	r3, [r4, #16]
 8006d94:	462a      	mov	r2, r5
 8006d96:	4649      	mov	r1, r9
 8006d98:	4640      	mov	r0, r8
 8006d9a:	47d0      	blx	sl
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	d0ab      	beq.n	8006cf8 <_printf_i+0x164>
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	079b      	lsls	r3, r3, #30
 8006da4:	d413      	bmi.n	8006dce <_printf_i+0x23a>
 8006da6:	68e0      	ldr	r0, [r4, #12]
 8006da8:	9b03      	ldr	r3, [sp, #12]
 8006daa:	4298      	cmp	r0, r3
 8006dac:	bfb8      	it	lt
 8006dae:	4618      	movlt	r0, r3
 8006db0:	e7a4      	b.n	8006cfc <_printf_i+0x168>
 8006db2:	2301      	movs	r3, #1
 8006db4:	4632      	mov	r2, r6
 8006db6:	4649      	mov	r1, r9
 8006db8:	4640      	mov	r0, r8
 8006dba:	47d0      	blx	sl
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	d09b      	beq.n	8006cf8 <_printf_i+0x164>
 8006dc0:	3501      	adds	r5, #1
 8006dc2:	68e3      	ldr	r3, [r4, #12]
 8006dc4:	9903      	ldr	r1, [sp, #12]
 8006dc6:	1a5b      	subs	r3, r3, r1
 8006dc8:	42ab      	cmp	r3, r5
 8006dca:	dcf2      	bgt.n	8006db2 <_printf_i+0x21e>
 8006dcc:	e7eb      	b.n	8006da6 <_printf_i+0x212>
 8006dce:	2500      	movs	r5, #0
 8006dd0:	f104 0619 	add.w	r6, r4, #25
 8006dd4:	e7f5      	b.n	8006dc2 <_printf_i+0x22e>
 8006dd6:	bf00      	nop
 8006dd8:	08007229 	.word	0x08007229
 8006ddc:	0800723a 	.word	0x0800723a

08006de0 <memcpy>:
 8006de0:	440a      	add	r2, r1
 8006de2:	4291      	cmp	r1, r2
 8006de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006de8:	d100      	bne.n	8006dec <memcpy+0xc>
 8006dea:	4770      	bx	lr
 8006dec:	b510      	push	{r4, lr}
 8006dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006df2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006df6:	4291      	cmp	r1, r2
 8006df8:	d1f9      	bne.n	8006dee <memcpy+0xe>
 8006dfa:	bd10      	pop	{r4, pc}

08006dfc <memmove>:
 8006dfc:	4288      	cmp	r0, r1
 8006dfe:	b510      	push	{r4, lr}
 8006e00:	eb01 0402 	add.w	r4, r1, r2
 8006e04:	d902      	bls.n	8006e0c <memmove+0x10>
 8006e06:	4284      	cmp	r4, r0
 8006e08:	4623      	mov	r3, r4
 8006e0a:	d807      	bhi.n	8006e1c <memmove+0x20>
 8006e0c:	1e43      	subs	r3, r0, #1
 8006e0e:	42a1      	cmp	r1, r4
 8006e10:	d008      	beq.n	8006e24 <memmove+0x28>
 8006e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e1a:	e7f8      	b.n	8006e0e <memmove+0x12>
 8006e1c:	4402      	add	r2, r0
 8006e1e:	4601      	mov	r1, r0
 8006e20:	428a      	cmp	r2, r1
 8006e22:	d100      	bne.n	8006e26 <memmove+0x2a>
 8006e24:	bd10      	pop	{r4, pc}
 8006e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e2e:	e7f7      	b.n	8006e20 <memmove+0x24>

08006e30 <_free_r>:
 8006e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e32:	2900      	cmp	r1, #0
 8006e34:	d044      	beq.n	8006ec0 <_free_r+0x90>
 8006e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e3a:	9001      	str	r0, [sp, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f1a1 0404 	sub.w	r4, r1, #4
 8006e42:	bfb8      	it	lt
 8006e44:	18e4      	addlt	r4, r4, r3
 8006e46:	f000 f913 	bl	8007070 <__malloc_lock>
 8006e4a:	4a1e      	ldr	r2, [pc, #120]	; (8006ec4 <_free_r+0x94>)
 8006e4c:	9801      	ldr	r0, [sp, #4]
 8006e4e:	6813      	ldr	r3, [r2, #0]
 8006e50:	b933      	cbnz	r3, 8006e60 <_free_r+0x30>
 8006e52:	6063      	str	r3, [r4, #4]
 8006e54:	6014      	str	r4, [r2, #0]
 8006e56:	b003      	add	sp, #12
 8006e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e5c:	f000 b90e 	b.w	800707c <__malloc_unlock>
 8006e60:	42a3      	cmp	r3, r4
 8006e62:	d908      	bls.n	8006e76 <_free_r+0x46>
 8006e64:	6825      	ldr	r5, [r4, #0]
 8006e66:	1961      	adds	r1, r4, r5
 8006e68:	428b      	cmp	r3, r1
 8006e6a:	bf01      	itttt	eq
 8006e6c:	6819      	ldreq	r1, [r3, #0]
 8006e6e:	685b      	ldreq	r3, [r3, #4]
 8006e70:	1949      	addeq	r1, r1, r5
 8006e72:	6021      	streq	r1, [r4, #0]
 8006e74:	e7ed      	b.n	8006e52 <_free_r+0x22>
 8006e76:	461a      	mov	r2, r3
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	b10b      	cbz	r3, 8006e80 <_free_r+0x50>
 8006e7c:	42a3      	cmp	r3, r4
 8006e7e:	d9fa      	bls.n	8006e76 <_free_r+0x46>
 8006e80:	6811      	ldr	r1, [r2, #0]
 8006e82:	1855      	adds	r5, r2, r1
 8006e84:	42a5      	cmp	r5, r4
 8006e86:	d10b      	bne.n	8006ea0 <_free_r+0x70>
 8006e88:	6824      	ldr	r4, [r4, #0]
 8006e8a:	4421      	add	r1, r4
 8006e8c:	1854      	adds	r4, r2, r1
 8006e8e:	42a3      	cmp	r3, r4
 8006e90:	6011      	str	r1, [r2, #0]
 8006e92:	d1e0      	bne.n	8006e56 <_free_r+0x26>
 8006e94:	681c      	ldr	r4, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	6053      	str	r3, [r2, #4]
 8006e9a:	4421      	add	r1, r4
 8006e9c:	6011      	str	r1, [r2, #0]
 8006e9e:	e7da      	b.n	8006e56 <_free_r+0x26>
 8006ea0:	d902      	bls.n	8006ea8 <_free_r+0x78>
 8006ea2:	230c      	movs	r3, #12
 8006ea4:	6003      	str	r3, [r0, #0]
 8006ea6:	e7d6      	b.n	8006e56 <_free_r+0x26>
 8006ea8:	6825      	ldr	r5, [r4, #0]
 8006eaa:	1961      	adds	r1, r4, r5
 8006eac:	428b      	cmp	r3, r1
 8006eae:	bf04      	itt	eq
 8006eb0:	6819      	ldreq	r1, [r3, #0]
 8006eb2:	685b      	ldreq	r3, [r3, #4]
 8006eb4:	6063      	str	r3, [r4, #4]
 8006eb6:	bf04      	itt	eq
 8006eb8:	1949      	addeq	r1, r1, r5
 8006eba:	6021      	streq	r1, [r4, #0]
 8006ebc:	6054      	str	r4, [r2, #4]
 8006ebe:	e7ca      	b.n	8006e56 <_free_r+0x26>
 8006ec0:	b003      	add	sp, #12
 8006ec2:	bd30      	pop	{r4, r5, pc}
 8006ec4:	2000037c 	.word	0x2000037c

08006ec8 <sbrk_aligned>:
 8006ec8:	b570      	push	{r4, r5, r6, lr}
 8006eca:	4e0e      	ldr	r6, [pc, #56]	; (8006f04 <sbrk_aligned+0x3c>)
 8006ecc:	460c      	mov	r4, r1
 8006ece:	6831      	ldr	r1, [r6, #0]
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	b911      	cbnz	r1, 8006eda <sbrk_aligned+0x12>
 8006ed4:	f000 f8bc 	bl	8007050 <_sbrk_r>
 8006ed8:	6030      	str	r0, [r6, #0]
 8006eda:	4621      	mov	r1, r4
 8006edc:	4628      	mov	r0, r5
 8006ede:	f000 f8b7 	bl	8007050 <_sbrk_r>
 8006ee2:	1c43      	adds	r3, r0, #1
 8006ee4:	d00a      	beq.n	8006efc <sbrk_aligned+0x34>
 8006ee6:	1cc4      	adds	r4, r0, #3
 8006ee8:	f024 0403 	bic.w	r4, r4, #3
 8006eec:	42a0      	cmp	r0, r4
 8006eee:	d007      	beq.n	8006f00 <sbrk_aligned+0x38>
 8006ef0:	1a21      	subs	r1, r4, r0
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	f000 f8ac 	bl	8007050 <_sbrk_r>
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d101      	bne.n	8006f00 <sbrk_aligned+0x38>
 8006efc:	f04f 34ff 	mov.w	r4, #4294967295
 8006f00:	4620      	mov	r0, r4
 8006f02:	bd70      	pop	{r4, r5, r6, pc}
 8006f04:	20000380 	.word	0x20000380

08006f08 <_malloc_r>:
 8006f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0c:	1ccd      	adds	r5, r1, #3
 8006f0e:	f025 0503 	bic.w	r5, r5, #3
 8006f12:	3508      	adds	r5, #8
 8006f14:	2d0c      	cmp	r5, #12
 8006f16:	bf38      	it	cc
 8006f18:	250c      	movcc	r5, #12
 8006f1a:	2d00      	cmp	r5, #0
 8006f1c:	4607      	mov	r7, r0
 8006f1e:	db01      	blt.n	8006f24 <_malloc_r+0x1c>
 8006f20:	42a9      	cmp	r1, r5
 8006f22:	d905      	bls.n	8006f30 <_malloc_r+0x28>
 8006f24:	230c      	movs	r3, #12
 8006f26:	603b      	str	r3, [r7, #0]
 8006f28:	2600      	movs	r6, #0
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f30:	4e2e      	ldr	r6, [pc, #184]	; (8006fec <_malloc_r+0xe4>)
 8006f32:	f000 f89d 	bl	8007070 <__malloc_lock>
 8006f36:	6833      	ldr	r3, [r6, #0]
 8006f38:	461c      	mov	r4, r3
 8006f3a:	bb34      	cbnz	r4, 8006f8a <_malloc_r+0x82>
 8006f3c:	4629      	mov	r1, r5
 8006f3e:	4638      	mov	r0, r7
 8006f40:	f7ff ffc2 	bl	8006ec8 <sbrk_aligned>
 8006f44:	1c43      	adds	r3, r0, #1
 8006f46:	4604      	mov	r4, r0
 8006f48:	d14d      	bne.n	8006fe6 <_malloc_r+0xde>
 8006f4a:	6834      	ldr	r4, [r6, #0]
 8006f4c:	4626      	mov	r6, r4
 8006f4e:	2e00      	cmp	r6, #0
 8006f50:	d140      	bne.n	8006fd4 <_malloc_r+0xcc>
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	4631      	mov	r1, r6
 8006f56:	4638      	mov	r0, r7
 8006f58:	eb04 0803 	add.w	r8, r4, r3
 8006f5c:	f000 f878 	bl	8007050 <_sbrk_r>
 8006f60:	4580      	cmp	r8, r0
 8006f62:	d13a      	bne.n	8006fda <_malloc_r+0xd2>
 8006f64:	6821      	ldr	r1, [r4, #0]
 8006f66:	3503      	adds	r5, #3
 8006f68:	1a6d      	subs	r5, r5, r1
 8006f6a:	f025 0503 	bic.w	r5, r5, #3
 8006f6e:	3508      	adds	r5, #8
 8006f70:	2d0c      	cmp	r5, #12
 8006f72:	bf38      	it	cc
 8006f74:	250c      	movcc	r5, #12
 8006f76:	4629      	mov	r1, r5
 8006f78:	4638      	mov	r0, r7
 8006f7a:	f7ff ffa5 	bl	8006ec8 <sbrk_aligned>
 8006f7e:	3001      	adds	r0, #1
 8006f80:	d02b      	beq.n	8006fda <_malloc_r+0xd2>
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	442b      	add	r3, r5
 8006f86:	6023      	str	r3, [r4, #0]
 8006f88:	e00e      	b.n	8006fa8 <_malloc_r+0xa0>
 8006f8a:	6822      	ldr	r2, [r4, #0]
 8006f8c:	1b52      	subs	r2, r2, r5
 8006f8e:	d41e      	bmi.n	8006fce <_malloc_r+0xc6>
 8006f90:	2a0b      	cmp	r2, #11
 8006f92:	d916      	bls.n	8006fc2 <_malloc_r+0xba>
 8006f94:	1961      	adds	r1, r4, r5
 8006f96:	42a3      	cmp	r3, r4
 8006f98:	6025      	str	r5, [r4, #0]
 8006f9a:	bf18      	it	ne
 8006f9c:	6059      	strne	r1, [r3, #4]
 8006f9e:	6863      	ldr	r3, [r4, #4]
 8006fa0:	bf08      	it	eq
 8006fa2:	6031      	streq	r1, [r6, #0]
 8006fa4:	5162      	str	r2, [r4, r5]
 8006fa6:	604b      	str	r3, [r1, #4]
 8006fa8:	4638      	mov	r0, r7
 8006faa:	f104 060b 	add.w	r6, r4, #11
 8006fae:	f000 f865 	bl	800707c <__malloc_unlock>
 8006fb2:	f026 0607 	bic.w	r6, r6, #7
 8006fb6:	1d23      	adds	r3, r4, #4
 8006fb8:	1af2      	subs	r2, r6, r3
 8006fba:	d0b6      	beq.n	8006f2a <_malloc_r+0x22>
 8006fbc:	1b9b      	subs	r3, r3, r6
 8006fbe:	50a3      	str	r3, [r4, r2]
 8006fc0:	e7b3      	b.n	8006f2a <_malloc_r+0x22>
 8006fc2:	6862      	ldr	r2, [r4, #4]
 8006fc4:	42a3      	cmp	r3, r4
 8006fc6:	bf0c      	ite	eq
 8006fc8:	6032      	streq	r2, [r6, #0]
 8006fca:	605a      	strne	r2, [r3, #4]
 8006fcc:	e7ec      	b.n	8006fa8 <_malloc_r+0xa0>
 8006fce:	4623      	mov	r3, r4
 8006fd0:	6864      	ldr	r4, [r4, #4]
 8006fd2:	e7b2      	b.n	8006f3a <_malloc_r+0x32>
 8006fd4:	4634      	mov	r4, r6
 8006fd6:	6876      	ldr	r6, [r6, #4]
 8006fd8:	e7b9      	b.n	8006f4e <_malloc_r+0x46>
 8006fda:	230c      	movs	r3, #12
 8006fdc:	603b      	str	r3, [r7, #0]
 8006fde:	4638      	mov	r0, r7
 8006fe0:	f000 f84c 	bl	800707c <__malloc_unlock>
 8006fe4:	e7a1      	b.n	8006f2a <_malloc_r+0x22>
 8006fe6:	6025      	str	r5, [r4, #0]
 8006fe8:	e7de      	b.n	8006fa8 <_malloc_r+0xa0>
 8006fea:	bf00      	nop
 8006fec:	2000037c 	.word	0x2000037c

08006ff0 <_realloc_r>:
 8006ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff4:	4680      	mov	r8, r0
 8006ff6:	4614      	mov	r4, r2
 8006ff8:	460e      	mov	r6, r1
 8006ffa:	b921      	cbnz	r1, 8007006 <_realloc_r+0x16>
 8006ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007000:	4611      	mov	r1, r2
 8007002:	f7ff bf81 	b.w	8006f08 <_malloc_r>
 8007006:	b92a      	cbnz	r2, 8007014 <_realloc_r+0x24>
 8007008:	f7ff ff12 	bl	8006e30 <_free_r>
 800700c:	4625      	mov	r5, r4
 800700e:	4628      	mov	r0, r5
 8007010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007014:	f000 f838 	bl	8007088 <_malloc_usable_size_r>
 8007018:	4284      	cmp	r4, r0
 800701a:	4607      	mov	r7, r0
 800701c:	d802      	bhi.n	8007024 <_realloc_r+0x34>
 800701e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007022:	d812      	bhi.n	800704a <_realloc_r+0x5a>
 8007024:	4621      	mov	r1, r4
 8007026:	4640      	mov	r0, r8
 8007028:	f7ff ff6e 	bl	8006f08 <_malloc_r>
 800702c:	4605      	mov	r5, r0
 800702e:	2800      	cmp	r0, #0
 8007030:	d0ed      	beq.n	800700e <_realloc_r+0x1e>
 8007032:	42bc      	cmp	r4, r7
 8007034:	4622      	mov	r2, r4
 8007036:	4631      	mov	r1, r6
 8007038:	bf28      	it	cs
 800703a:	463a      	movcs	r2, r7
 800703c:	f7ff fed0 	bl	8006de0 <memcpy>
 8007040:	4631      	mov	r1, r6
 8007042:	4640      	mov	r0, r8
 8007044:	f7ff fef4 	bl	8006e30 <_free_r>
 8007048:	e7e1      	b.n	800700e <_realloc_r+0x1e>
 800704a:	4635      	mov	r5, r6
 800704c:	e7df      	b.n	800700e <_realloc_r+0x1e>
	...

08007050 <_sbrk_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4d06      	ldr	r5, [pc, #24]	; (800706c <_sbrk_r+0x1c>)
 8007054:	2300      	movs	r3, #0
 8007056:	4604      	mov	r4, r0
 8007058:	4608      	mov	r0, r1
 800705a:	602b      	str	r3, [r5, #0]
 800705c:	f7fa fb74 	bl	8001748 <_sbrk>
 8007060:	1c43      	adds	r3, r0, #1
 8007062:	d102      	bne.n	800706a <_sbrk_r+0x1a>
 8007064:	682b      	ldr	r3, [r5, #0]
 8007066:	b103      	cbz	r3, 800706a <_sbrk_r+0x1a>
 8007068:	6023      	str	r3, [r4, #0]
 800706a:	bd38      	pop	{r3, r4, r5, pc}
 800706c:	20000384 	.word	0x20000384

08007070 <__malloc_lock>:
 8007070:	4801      	ldr	r0, [pc, #4]	; (8007078 <__malloc_lock+0x8>)
 8007072:	f000 b811 	b.w	8007098 <__retarget_lock_acquire_recursive>
 8007076:	bf00      	nop
 8007078:	20000388 	.word	0x20000388

0800707c <__malloc_unlock>:
 800707c:	4801      	ldr	r0, [pc, #4]	; (8007084 <__malloc_unlock+0x8>)
 800707e:	f000 b80c 	b.w	800709a <__retarget_lock_release_recursive>
 8007082:	bf00      	nop
 8007084:	20000388 	.word	0x20000388

08007088 <_malloc_usable_size_r>:
 8007088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800708c:	1f18      	subs	r0, r3, #4
 800708e:	2b00      	cmp	r3, #0
 8007090:	bfbc      	itt	lt
 8007092:	580b      	ldrlt	r3, [r1, r0]
 8007094:	18c0      	addlt	r0, r0, r3
 8007096:	4770      	bx	lr

08007098 <__retarget_lock_acquire_recursive>:
 8007098:	4770      	bx	lr

0800709a <__retarget_lock_release_recursive>:
 800709a:	4770      	bx	lr

0800709c <_init>:
 800709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709e:	bf00      	nop
 80070a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070a2:	bc08      	pop	{r3}
 80070a4:	469e      	mov	lr, r3
 80070a6:	4770      	bx	lr

080070a8 <_fini>:
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	bf00      	nop
 80070ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ae:	bc08      	pop	{r3}
 80070b0:	469e      	mov	lr, r3
 80070b2:	4770      	bx	lr
