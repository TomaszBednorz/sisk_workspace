
CAN_Master1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bb8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08006db8  08006db8  00016db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070a0  080070a0  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  080070a0  080070a0  000170a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070a8  080070a8  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070a8  080070a8  000170a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070ac  080070ac  000170ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  080070b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000c0  08007170  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000160  08007210  00020160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008f0  20000200  080072b0  00020200  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000af0  080072b0  00020af0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c06f  00000000  00000000  0002022e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003be3  00000000  00000000  0003c29d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015f0  00000000  00000000  0003fe80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001448  00000000  00000000  00041470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002bc32  00000000  00000000  000428b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001be81  00000000  00000000  0006e4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00107c98  00000000  00000000  0008a36b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00192003  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005f64  00000000  00000000  00192054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000200 	.word	0x20000200
 800021c:	00000000 	.word	0x00000000
 8000220:	08006da0 	.word	0x08006da0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000204 	.word	0x20000204
 800023c:	08006da0 	.word	0x08006da0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <AppCan_Init>:
/***********************************************************************************************************
 ******************************************* Exported functions ********************************************
 ***********************************************************************************************************/

void AppCan_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_CAN_Start(&hcan1);
 80005e8:	4802      	ldr	r0, [pc, #8]	; (80005f4 <AppCan_Init+0x10>)
 80005ea:	f001 facc 	bl	8001b86 <HAL_CAN_Start>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200003e4 	.word	0x200003e4

080005f8 <AppCan_Task>:

void AppCan_Task(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	static uint32_t my_tim = 0U;
	static uint8_t enable_tx = 0U;
	static uint32_t latch_period = 0U;

	if((my_tim % 10U) == 0U)
 80005fc:	4b30      	ldr	r3, [pc, #192]	; (80006c0 <AppCan_Task+0xc8>)
 80005fe:	6819      	ldr	r1, [r3, #0]
 8000600:	4b30      	ldr	r3, [pc, #192]	; (80006c4 <AppCan_Task+0xcc>)
 8000602:	fba3 2301 	umull	r2, r3, r3, r1
 8000606:	08da      	lsrs	r2, r3, #3
 8000608:	4613      	mov	r3, r2
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4413      	add	r3, r2
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	1aca      	subs	r2, r1, r3
 8000612:	2a00      	cmp	r2, #0
 8000614:	d10d      	bne.n	8000632 <AppCan_Task+0x3a>
	{
		enable_tx = 1U;
 8000616:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <AppCan_Task+0xd0>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
		latch_period = my_tim / 10U;
 800061c:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <AppCan_Task+0xc8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a28      	ldr	r2, [pc, #160]	; (80006c4 <AppCan_Task+0xcc>)
 8000622:	fba2 2303 	umull	r2, r3, r2, r3
 8000626:	08db      	lsrs	r3, r3, #3
 8000628:	4a28      	ldr	r2, [pc, #160]	; (80006cc <AppCan_Task+0xd4>)
 800062a:	6013      	str	r3, [r2, #0]
		AppCan_CurrentFrame = 0U;
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <AppCan_Task+0xd8>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
	}

	if(enable_tx == 1U)
 8000632:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <AppCan_Task+0xd0>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d13a      	bne.n	80006b0 <AppCan_Task+0xb8>
	{
		if(AppCan_CurrentFrame < AppCan_HowManyScheaduledFrames)
 800063a:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <AppCan_Task+0xd8>)
 800063c:	781a      	ldrb	r2, [r3, #0]
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <AppCan_Task+0xdc>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	429a      	cmp	r2, r3
 8000644:	d234      	bcs.n	80006b0 <AppCan_Task+0xb8>
		{
			if((latch_period % AppCan_CanFrames[AppCan_CurrentFrame].period) == 0U)
 8000646:	4b21      	ldr	r3, [pc, #132]	; (80006cc <AppCan_Task+0xd4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <AppCan_Task+0xd8>)
 800064c:	7812      	ldrb	r2, [r2, #0]
 800064e:	4922      	ldr	r1, [pc, #136]	; (80006d8 <AppCan_Task+0xe0>)
 8000650:	0112      	lsls	r2, r2, #4
 8000652:	440a      	add	r2, r1
 8000654:	320c      	adds	r2, #12
 8000656:	6812      	ldr	r2, [r2, #0]
 8000658:	fbb3 f1f2 	udiv	r1, r3, r2
 800065c:	fb01 f202 	mul.w	r2, r1, r2
 8000660:	1a9b      	subs	r3, r3, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	d115      	bne.n	8000692 <AppCan_Task+0x9a>
			{
				AppCan_TxFrame(AppCan_CanFrames[AppCan_CurrentFrame].data, \
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <AppCan_Task+0xd8>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	011b      	lsls	r3, r3, #4
 800066c:	4a1a      	ldr	r2, [pc, #104]	; (80006d8 <AppCan_Task+0xe0>)
 800066e:	1898      	adds	r0, r3, r2
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <AppCan_Task+0xd8>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4a18      	ldr	r2, [pc, #96]	; (80006d8 <AppCan_Task+0xe0>)
 8000676:	011b      	lsls	r3, r3, #4
 8000678:	4413      	add	r3, r2
 800067a:	3308      	adds	r3, #8
 800067c:	7819      	ldrb	r1, [r3, #0]
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <AppCan_Task+0xd8>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <AppCan_Task+0xe0>)
 8000684:	011b      	lsls	r3, r3, #4
 8000686:	4413      	add	r3, r2
 8000688:	330a      	adds	r3, #10
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	f000 f825 	bl	80006dc <AppCan_TxFrame>
							   AppCan_CanFrames[AppCan_CurrentFrame].dlc, \
							   AppCan_CanFrames[AppCan_CurrentFrame].id);
			}
			AppCan_CurrentFrame++;
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <AppCan_Task+0xd8>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	3301      	adds	r3, #1
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <AppCan_Task+0xd8>)
 800069c:	701a      	strb	r2, [r3, #0]

			if(AppCan_CurrentFrame >= AppCan_HowManyScheaduledFrames)
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <AppCan_Task+0xd8>)
 80006a0:	781a      	ldrb	r2, [r3, #0]
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <AppCan_Task+0xdc>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d302      	bcc.n	80006b0 <AppCan_Task+0xb8>
			{
				enable_tx = 0U;
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <AppCan_Task+0xd0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	my_tim++;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <AppCan_Task+0xc8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	4a02      	ldr	r2, [pc, #8]	; (80006c0 <AppCan_Task+0xc8>)
 80006b8:	6013      	str	r3, [r2, #0]
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200002c0 	.word	0x200002c0
 80006c4:	cccccccd 	.word	0xcccccccd
 80006c8:	200002c4 	.word	0x200002c4
 80006cc:	200002c8 	.word	0x200002c8
 80006d0:	200002bd 	.word	0x200002bd
 80006d4:	200002bc 	.word	0x200002bc
 80006d8:	2000021c 	.word	0x2000021c

080006dc <AppCan_TxFrame>:

void AppCan_TxFrame(uint8_t* buffer, uint8_t len, uint16_t id)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]
 80006e8:	4613      	mov	r3, r2
 80006ea:	803b      	strh	r3, [r7, #0]
	CAN_TxHeaderTypeDef tx_header;
	uint32_t tx_mailbox;

	tx_header.DLC = len;
 80006ec:	78fb      	ldrb	r3, [r7, #3]
 80006ee:	623b      	str	r3, [r7, #32]
	tx_header.StdId = id;
 80006f0:	883b      	ldrh	r3, [r7, #0]
 80006f2:	613b      	str	r3, [r7, #16]
	tx_header.IDE = CAN_ID_STD;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]
	tx_header.RTR = CAN_RTR_DATA;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]

	HAL_CAN_AddTxMessage(&hcan1, &tx_header, buffer, &tx_mailbox);
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	f107 0110 	add.w	r1, r7, #16
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	4808      	ldr	r0, [pc, #32]	; (8000728 <AppCan_TxFrame+0x4c>)
 8000708:	f001 fa81 	bl	8001c0e <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&hcan1, tx_mailbox));
 800070c:	bf00      	nop
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <AppCan_TxFrame+0x4c>)
 8000714:	f001 fb4b 	bl	8001dae <HAL_CAN_IsTxMessagePending>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1f7      	bne.n	800070e <AppCan_TxFrame+0x32>
}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	; 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200003e4 	.word	0x200003e4

0800072c <AppCan_AddToScheaduler>:

void AppCan_AddToScheaduler(uint8_t* buffer, uint8_t len, uint16_t id, uint32_t period)
{
 800072c:	b490      	push	{r4, r7}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	460b      	mov	r3, r1
 8000738:	72fb      	strb	r3, [r7, #11]
 800073a:	4613      	mov	r3, r2
 800073c:	813b      	strh	r3, [r7, #8]
	for(uint8_t i = 0; i  < len; i++)
 800073e:	2300      	movs	r3, #0
 8000740:	75fb      	strb	r3, [r7, #23]
 8000742:	e010      	b.n	8000766 <AppCan_AddToScheaduler+0x3a>
	{
		AppCan_CanFrames[AppCan_HowManyScheaduledFrames].data[i] = buffer[i];
 8000744:	7dfb      	ldrb	r3, [r7, #23]
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	441a      	add	r2, r3
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <AppCan_AddToScheaduler+0x88>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	461c      	mov	r4, r3
 8000750:	7dfb      	ldrb	r3, [r7, #23]
 8000752:	7810      	ldrb	r0, [r2, #0]
 8000754:	4918      	ldr	r1, [pc, #96]	; (80007b8 <AppCan_AddToScheaduler+0x8c>)
 8000756:	0122      	lsls	r2, r4, #4
 8000758:	440a      	add	r2, r1
 800075a:	4413      	add	r3, r2
 800075c:	4602      	mov	r2, r0
 800075e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i  < len; i++)
 8000760:	7dfb      	ldrb	r3, [r7, #23]
 8000762:	3301      	adds	r3, #1
 8000764:	75fb      	strb	r3, [r7, #23]
 8000766:	7dfa      	ldrb	r2, [r7, #23]
 8000768:	7afb      	ldrb	r3, [r7, #11]
 800076a:	429a      	cmp	r2, r3
 800076c:	d3ea      	bcc.n	8000744 <AppCan_AddToScheaduler+0x18>
	}

	AppCan_CanFrames[AppCan_HowManyScheaduledFrames].dlc = len;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <AppCan_AddToScheaduler+0x88>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4a11      	ldr	r2, [pc, #68]	; (80007b8 <AppCan_AddToScheaduler+0x8c>)
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	4413      	add	r3, r2
 8000778:	3308      	adds	r3, #8
 800077a:	7afa      	ldrb	r2, [r7, #11]
 800077c:	701a      	strb	r2, [r3, #0]
	AppCan_CanFrames[AppCan_HowManyScheaduledFrames].id = id;
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <AppCan_AddToScheaduler+0x88>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <AppCan_AddToScheaduler+0x8c>)
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	4413      	add	r3, r2
 8000788:	330a      	adds	r3, #10
 800078a:	893a      	ldrh	r2, [r7, #8]
 800078c:	801a      	strh	r2, [r3, #0]
	AppCan_CanFrames[AppCan_HowManyScheaduledFrames].period = period;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <AppCan_AddToScheaduler+0x88>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	4a09      	ldr	r2, [pc, #36]	; (80007b8 <AppCan_AddToScheaduler+0x8c>)
 8000794:	011b      	lsls	r3, r3, #4
 8000796:	4413      	add	r3, r2
 8000798:	330c      	adds	r3, #12
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	601a      	str	r2, [r3, #0]

	AppCan_HowManyScheaduledFrames++;
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <AppCan_AddToScheaduler+0x88>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	3301      	adds	r3, #1
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <AppCan_AddToScheaduler+0x88>)
 80007a8:	701a      	strb	r2, [r3, #0]
}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc90      	pop	{r4, r7}
 80007b2:	4770      	bx	lr
 80007b4:	200002bc 	.word	0x200002bc
 80007b8:	2000021c 	.word	0x2000021c

080007bc <AppUart_Init>:
/***********************************************************************************************************
 ******************************************* Exported functions ********************************************
 ***********************************************************************************************************/

void AppUart_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	sprintf(AppUart_Msg, "Use the serial port to transmit a CAN frame or\r\n" \
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <AppUart_Init+0x2c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	4909      	ldr	r1, [pc, #36]	; (80007ec <AppUart_Init+0x30>)
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <AppUart_Init+0x34>)
 80007ca:	f005 fe7b 	bl	80064c4 <siprintf>
						 "add a CAN frame to the scheduler.\r\n" \
						 "The required number of characters is present in parentheses.\r\n%s", \
						 AppCan_MsgTable[APP_STATE_1_MODE]);
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)AppUart_Msg, sizeof(AppUart_Msg));
 80007ce:	22fa      	movs	r2, #250	; 0xfa
 80007d0:	4907      	ldr	r1, [pc, #28]	; (80007f0 <AppUart_Init+0x34>)
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <AppUart_Init+0x38>)
 80007d4:	f003 fff6 	bl	80047c4 <HAL_UART_Transmit_IT>

	HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 1);
 80007d8:	2201      	movs	r2, #1
 80007da:	4907      	ldr	r1, [pc, #28]	; (80007f8 <AppUart_Init+0x3c>)
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <AppUart_Init+0x38>)
 80007de:	f004 f84f 	bl	8004880 <HAL_UART_Receive_IT>
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000000 	.word	0x20000000
 80007ec:	08006fc0 	.word	0x08006fc0
 80007f0:	200002d0 	.word	0x200002d0
 80007f4:	2000054c 	.word	0x2000054c
 80007f8:	200003cc 	.word	0x200003cc

080007fc <AppUart_ProcessInput>:

void AppUart_ProcessInput(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	switch (AppUart_StateMachine) {
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <AppUart_ProcessInput+0xc0>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b0d      	cmp	r3, #13
 8000806:	d851      	bhi.n	80008ac <AppUart_ProcessInput+0xb0>
 8000808:	a201      	add	r2, pc, #4	; (adr r2, 8000810 <AppUart_ProcessInput+0x14>)
 800080a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080e:	bf00      	nop
 8000810:	08000849 	.word	0x08000849
 8000814:	0800084f 	.word	0x0800084f
 8000818:	08000855 	.word	0x08000855
 800081c:	0800085b 	.word	0x0800085b
 8000820:	08000863 	.word	0x08000863
 8000824:	0800086b 	.word	0x0800086b
 8000828:	08000873 	.word	0x08000873
 800082c:	0800087b 	.word	0x0800087b
 8000830:	08000883 	.word	0x08000883
 8000834:	0800088b 	.word	0x0800088b
 8000838:	08000893 	.word	0x08000893
 800083c:	0800089b 	.word	0x0800089b
 8000840:	080008a1 	.word	0x080008a1
 8000844:	080008a7 	.word	0x080008a7
		case APP_STATE_1_MODE:
			AppUart_ProcessMode();
 8000848:	f000 f966 	bl	8000b18 <AppUart_ProcessMode>
			break;
 800084c:	e02f      	b.n	80008ae <AppUart_ProcessInput+0xb2>
		case APP_STATE_2_ID:
			AppUart_ProcessId();
 800084e:	f000 f995 	bl	8000b7c <AppUart_ProcessId>
			break;
 8000852:	e02c      	b.n	80008ae <AppUart_ProcessInput+0xb2>
		case APP_STATE_3_DLC:
			AppUart_ProcessDlc();
 8000854:	f000 f9bc 	bl	8000bd0 <AppUart_ProcessDlc>
			break;
 8000858:	e029      	b.n	80008ae <AppUart_ProcessInput+0xb2>
		case APP_STATE_4_DATA_1:
			AppUart_ProcessData(1U);
 800085a:	2001      	movs	r0, #1
 800085c:	f000 f9fa 	bl	8000c54 <AppUart_ProcessData>
			break;
 8000860:	e025      	b.n	80008ae <AppUart_ProcessInput+0xb2>
		case APP_STATE_5_DATA_2:
			AppUart_ProcessData(2U);
 8000862:	2002      	movs	r0, #2
 8000864:	f000 f9f6 	bl	8000c54 <AppUart_ProcessData>
			break;
 8000868:	e021      	b.n	80008ae <AppUart_ProcessInput+0xb2>
		case APP_STATE_6_DATA_3:
			AppUart_ProcessData(3U);
 800086a:	2003      	movs	r0, #3
 800086c:	f000 f9f2 	bl	8000c54 <AppUart_ProcessData>
			break;
 8000870:	e01d      	b.n	80008ae <AppUart_ProcessInput+0xb2>
		case APP_STATE_7_DATA_4:
			AppUart_ProcessData(4U);
 8000872:	2004      	movs	r0, #4
 8000874:	f000 f9ee 	bl	8000c54 <AppUart_ProcessData>
			break;
 8000878:	e019      	b.n	80008ae <AppUart_ProcessInput+0xb2>
		case APP_STATE_8_DATA_5:
			AppUart_ProcessData(5U);
 800087a:	2005      	movs	r0, #5
 800087c:	f000 f9ea 	bl	8000c54 <AppUart_ProcessData>
			break;
 8000880:	e015      	b.n	80008ae <AppUart_ProcessInput+0xb2>
		case APP_STATE_9_DATA_6:
			AppUart_ProcessData(6U);
 8000882:	2006      	movs	r0, #6
 8000884:	f000 f9e6 	bl	8000c54 <AppUart_ProcessData>
			break;
 8000888:	e011      	b.n	80008ae <AppUart_ProcessInput+0xb2>
		case APP_STATE_10_DATA_7:
			AppUart_ProcessData(7U);
 800088a:	2007      	movs	r0, #7
 800088c:	f000 f9e2 	bl	8000c54 <AppUart_ProcessData>
			break;
 8000890:	e00d      	b.n	80008ae <AppUart_ProcessInput+0xb2>
		case APP_STATE_11_DATA_8:
			AppUart_ProcessData(8U);
 8000892:	2008      	movs	r0, #8
 8000894:	f000 f9de 	bl	8000c54 <AppUart_ProcessData>
			break;
 8000898:	e009      	b.n	80008ae <AppUart_ProcessInput+0xb2>
		case APP_STATE_12_PERIOD:
			AppUart_ProcessPeriod();
 800089a:	f000 fa21 	bl	8000ce0 <AppUart_ProcessPeriod>
			break;
 800089e:	e006      	b.n	80008ae <AppUart_ProcessInput+0xb2>
		case APP_STATE_13_SUMMARY:
			AppUart_ProcessSummary();
 80008a0:	f000 fa48 	bl	8000d34 <AppUart_ProcessSummary>
			break;
 80008a4:	e003      	b.n	80008ae <AppUart_ProcessInput+0xb2>
		case APP_STATE_14_ERROR:
			AppUart_ProcessError();
 80008a6:	f000 fa77 	bl	8000d98 <AppUart_ProcessError>
			break;
 80008aa:	e000      	b.n	80008ae <AppUart_ProcessInput+0xb2>
		default:
			break;
 80008ac:	bf00      	nop
	}

	AppUart_SendInfo(AppUart_StateMachine);
 80008ae:	4b03      	ldr	r3, [pc, #12]	; (80008bc <AppUart_ProcessInput+0xc0>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f804 	bl	80008c0 <AppUart_SendInfo>
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200002cc 	.word	0x200002cc

080008c0 <AppUart_SendInfo>:
/***********************************************************************************************************
 ******************************************** Local functions **********************************************
 ***********************************************************************************************************/

void AppUart_SendInfo(AppUart_StateMachine_t state)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	memset(AppUart_Msg, '\0', sizeof(AppUart_Msg));
 80008ca:	22fa      	movs	r2, #250	; 0xfa
 80008cc:	2100      	movs	r1, #0
 80008ce:	4849      	ldr	r0, [pc, #292]	; (80009f4 <AppUart_SendInfo+0x134>)
 80008d0:	f005 fdf0 	bl	80064b4 <memset>

	switch (AppUart_StateMachine) {
 80008d4:	4b48      	ldr	r3, [pc, #288]	; (80009f8 <AppUart_SendInfo+0x138>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b0d      	cmp	r3, #13
 80008da:	f200 8081 	bhi.w	80009e0 <AppUart_SendInfo+0x120>
 80008de:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <AppUart_SendInfo+0x24>)
 80008e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e4:	0800091d 	.word	0x0800091d
 80008e8:	0800092b 	.word	0x0800092b
 80008ec:	08000939 	.word	0x08000939
 80008f0:	08000947 	.word	0x08000947
 80008f4:	08000955 	.word	0x08000955
 80008f8:	08000963 	.word	0x08000963
 80008fc:	08000971 	.word	0x08000971
 8000900:	0800097f 	.word	0x0800097f
 8000904:	0800098d 	.word	0x0800098d
 8000908:	0800099b 	.word	0x0800099b
 800090c:	080009a9 	.word	0x080009a9
 8000910:	080009b7 	.word	0x080009b7
 8000914:	080009c5 	.word	0x080009c5
 8000918:	080009d3 	.word	0x080009d3
		case APP_STATE_1_MODE:
			sprintf(AppUart_Msg, AppCan_MsgTable[APP_STATE_1_MODE]);
 800091c:	4b37      	ldr	r3, [pc, #220]	; (80009fc <AppUart_SendInfo+0x13c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	4834      	ldr	r0, [pc, #208]	; (80009f4 <AppUart_SendInfo+0x134>)
 8000924:	f005 fdce 	bl	80064c4 <siprintf>
			break;
 8000928:	e05b      	b.n	80009e2 <AppUart_SendInfo+0x122>
		case APP_STATE_2_ID:
			sprintf(AppUart_Msg, AppCan_MsgTable[APP_STATE_2_ID]);
 800092a:	4b34      	ldr	r3, [pc, #208]	; (80009fc <AppUart_SendInfo+0x13c>)
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	4619      	mov	r1, r3
 8000930:	4830      	ldr	r0, [pc, #192]	; (80009f4 <AppUart_SendInfo+0x134>)
 8000932:	f005 fdc7 	bl	80064c4 <siprintf>
			break;
 8000936:	e054      	b.n	80009e2 <AppUart_SendInfo+0x122>
		case APP_STATE_3_DLC:
			sprintf(AppUart_Msg, AppCan_MsgTable[APP_STATE_3_DLC]);
 8000938:	4b30      	ldr	r3, [pc, #192]	; (80009fc <AppUart_SendInfo+0x13c>)
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	4619      	mov	r1, r3
 800093e:	482d      	ldr	r0, [pc, #180]	; (80009f4 <AppUart_SendInfo+0x134>)
 8000940:	f005 fdc0 	bl	80064c4 <siprintf>
			break;
 8000944:	e04d      	b.n	80009e2 <AppUart_SendInfo+0x122>
		case APP_STATE_4_DATA_1:
			sprintf(AppUart_Msg, AppCan_MsgTable[APP_STATE_4_DATA_1]);
 8000946:	4b2d      	ldr	r3, [pc, #180]	; (80009fc <AppUart_SendInfo+0x13c>)
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	4619      	mov	r1, r3
 800094c:	4829      	ldr	r0, [pc, #164]	; (80009f4 <AppUart_SendInfo+0x134>)
 800094e:	f005 fdb9 	bl	80064c4 <siprintf>
			break;
 8000952:	e046      	b.n	80009e2 <AppUart_SendInfo+0x122>
		case APP_STATE_5_DATA_2:
			sprintf(AppUart_Msg, AppCan_MsgTable[APP_STATE_5_DATA_2]);
 8000954:	4b29      	ldr	r3, [pc, #164]	; (80009fc <AppUart_SendInfo+0x13c>)
 8000956:	691b      	ldr	r3, [r3, #16]
 8000958:	4619      	mov	r1, r3
 800095a:	4826      	ldr	r0, [pc, #152]	; (80009f4 <AppUart_SendInfo+0x134>)
 800095c:	f005 fdb2 	bl	80064c4 <siprintf>
			break;
 8000960:	e03f      	b.n	80009e2 <AppUart_SendInfo+0x122>
		case APP_STATE_6_DATA_3:
			sprintf(AppUart_Msg, AppCan_MsgTable[APP_STATE_6_DATA_3]);
 8000962:	4b26      	ldr	r3, [pc, #152]	; (80009fc <AppUart_SendInfo+0x13c>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4619      	mov	r1, r3
 8000968:	4822      	ldr	r0, [pc, #136]	; (80009f4 <AppUart_SendInfo+0x134>)
 800096a:	f005 fdab 	bl	80064c4 <siprintf>
			break;
 800096e:	e038      	b.n	80009e2 <AppUart_SendInfo+0x122>
		case APP_STATE_7_DATA_4:
			sprintf(AppUart_Msg, AppCan_MsgTable[APP_STATE_7_DATA_4]);
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <AppUart_SendInfo+0x13c>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4619      	mov	r1, r3
 8000976:	481f      	ldr	r0, [pc, #124]	; (80009f4 <AppUart_SendInfo+0x134>)
 8000978:	f005 fda4 	bl	80064c4 <siprintf>
			break;
 800097c:	e031      	b.n	80009e2 <AppUart_SendInfo+0x122>
		case APP_STATE_8_DATA_5:
			sprintf(AppUart_Msg, AppCan_MsgTable[APP_STATE_8_DATA_5]);
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <AppUart_SendInfo+0x13c>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	4619      	mov	r1, r3
 8000984:	481b      	ldr	r0, [pc, #108]	; (80009f4 <AppUart_SendInfo+0x134>)
 8000986:	f005 fd9d 	bl	80064c4 <siprintf>
			break;
 800098a:	e02a      	b.n	80009e2 <AppUart_SendInfo+0x122>
		case APP_STATE_9_DATA_6:
			sprintf(AppUart_Msg, AppCan_MsgTable[APP_STATE_9_DATA_6]);
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <AppUart_SendInfo+0x13c>)
 800098e:	6a1b      	ldr	r3, [r3, #32]
 8000990:	4619      	mov	r1, r3
 8000992:	4818      	ldr	r0, [pc, #96]	; (80009f4 <AppUart_SendInfo+0x134>)
 8000994:	f005 fd96 	bl	80064c4 <siprintf>
			break;
 8000998:	e023      	b.n	80009e2 <AppUart_SendInfo+0x122>
		case APP_STATE_10_DATA_7:
			sprintf(AppUart_Msg, AppCan_MsgTable[APP_STATE_10_DATA_7]);
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <AppUart_SendInfo+0x13c>)
 800099c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800099e:	4619      	mov	r1, r3
 80009a0:	4814      	ldr	r0, [pc, #80]	; (80009f4 <AppUart_SendInfo+0x134>)
 80009a2:	f005 fd8f 	bl	80064c4 <siprintf>
			break;
 80009a6:	e01c      	b.n	80009e2 <AppUart_SendInfo+0x122>
		case APP_STATE_11_DATA_8:
			sprintf(AppUart_Msg, AppCan_MsgTable[APP_STATE_11_DATA_8]);
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <AppUart_SendInfo+0x13c>)
 80009aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4811      	ldr	r0, [pc, #68]	; (80009f4 <AppUart_SendInfo+0x134>)
 80009b0:	f005 fd88 	bl	80064c4 <siprintf>
			break;
 80009b4:	e015      	b.n	80009e2 <AppUart_SendInfo+0x122>
		case APP_STATE_12_PERIOD:
			sprintf(AppUart_Msg, AppCan_MsgTable[APP_STATE_12_PERIOD]);
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <AppUart_SendInfo+0x13c>)
 80009b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ba:	4619      	mov	r1, r3
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <AppUart_SendInfo+0x134>)
 80009be:	f005 fd81 	bl	80064c4 <siprintf>
			break;
 80009c2:	e00e      	b.n	80009e2 <AppUart_SendInfo+0x122>
		case APP_STATE_13_SUMMARY:
			sprintf(AppUart_Msg, AppCan_MsgTable[APP_STATE_13_SUMMARY]);
 80009c4:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <AppUart_SendInfo+0x13c>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	4619      	mov	r1, r3
 80009ca:	480a      	ldr	r0, [pc, #40]	; (80009f4 <AppUart_SendInfo+0x134>)
 80009cc:	f005 fd7a 	bl	80064c4 <siprintf>
			break;
 80009d0:	e007      	b.n	80009e2 <AppUart_SendInfo+0x122>
		case APP_STATE_14_ERROR:
			sprintf(AppUart_Msg, AppCan_MsgTable[APP_STATE_14_ERROR]);
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <AppUart_SendInfo+0x13c>)
 80009d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009d6:	4619      	mov	r1, r3
 80009d8:	4806      	ldr	r0, [pc, #24]	; (80009f4 <AppUart_SendInfo+0x134>)
 80009da:	f005 fd73 	bl	80064c4 <siprintf>
			break;
 80009de:	e000      	b.n	80009e2 <AppUart_SendInfo+0x122>
		default:
			break;
 80009e0:	bf00      	nop
	}

	HAL_UART_Transmit_IT(&huart3, (uint8_t*)AppUart_Msg, sizeof(AppUart_Msg));
 80009e2:	22fa      	movs	r2, #250	; 0xfa
 80009e4:	4903      	ldr	r1, [pc, #12]	; (80009f4 <AppUart_SendInfo+0x134>)
 80009e6:	4806      	ldr	r0, [pc, #24]	; (8000a00 <AppUart_SendInfo+0x140>)
 80009e8:	f003 feec 	bl	80047c4 <HAL_UART_Transmit_IT>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200002d0 	.word	0x200002d0
 80009f8:	200002cc 	.word	0x200002cc
 80009fc:	20000000 	.word	0x20000000
 8000a00:	2000054c 	.word	0x2000054c

08000a04 <AppUart_DecodeInputHex>:


uint16_t AppUart_DecodeInputHex(uint8_t len)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	static uint16_t mul[3] = {256U, 16U, 1U};
	uint16_t ret_val = 0U;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	81fb      	strh	r3, [r7, #14]

	for(uint8_t i = 0; i < len; i++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	737b      	strb	r3, [r7, #13]
 8000a16:	e018      	b.n	8000a4a <AppUart_DecodeInputHex+0x46>
	{
		ret_val += (uint16_t)AppUart_ConvertToHex(AppUart_UartRxData[i]) * mul[3-len+i];
 8000a18:	7b7b      	ldrb	r3, [r7, #13]
 8000a1a:	4a10      	ldr	r2, [pc, #64]	; (8000a5c <AppUart_DecodeInputHex+0x58>)
 8000a1c:	5cd3      	ldrb	r3, [r2, r3]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f820 	bl	8000a64 <AppUart_ConvertToHex>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4619      	mov	r1, r3
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f1c3 0203 	rsb	r2, r3, #3
 8000a2e:	7b7b      	ldrb	r3, [r7, #13]
 8000a30:	4413      	add	r3, r2
 8000a32:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <AppUart_DecodeInputHex+0x5c>)
 8000a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a38:	fb01 f303 	mul.w	r3, r1, r3
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	89fb      	ldrh	r3, [r7, #14]
 8000a40:	4413      	add	r3, r2
 8000a42:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 8000a44:	7b7b      	ldrb	r3, [r7, #13]
 8000a46:	3301      	adds	r3, #1
 8000a48:	737b      	strb	r3, [r7, #13]
 8000a4a:	7b7a      	ldrb	r2, [r7, #13]
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d3e2      	bcc.n	8000a18 <AppUart_DecodeInputHex+0x14>
	}

	return ret_val;
 8000a52:	89fb      	ldrh	r3, [r7, #14]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200003cc 	.word	0x200003cc
 8000a60:	20000038 	.word	0x20000038

08000a64 <AppUart_ConvertToHex>:

static uint8_t AppUart_ConvertToHex(uint8_t in)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret_val = 0U;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	73fb      	strb	r3, [r7, #15]

	if((in >= 48U) && (in <= 57U))
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b2f      	cmp	r3, #47	; 0x2f
 8000a76:	d906      	bls.n	8000a86 <AppUart_ConvertToHex+0x22>
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b39      	cmp	r3, #57	; 0x39
 8000a7c:	d803      	bhi.n	8000a86 <AppUart_ConvertToHex+0x22>
	{
		ret_val = in - 48U;
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	3b30      	subs	r3, #48	; 0x30
 8000a82:	73fb      	strb	r3, [r7, #15]
 8000a84:	e012      	b.n	8000aac <AppUart_ConvertToHex+0x48>
	}
	else if((in >= 65U) && (in <= 70U))
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b40      	cmp	r3, #64	; 0x40
 8000a8a:	d906      	bls.n	8000a9a <AppUart_ConvertToHex+0x36>
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2b46      	cmp	r3, #70	; 0x46
 8000a90:	d803      	bhi.n	8000a9a <AppUart_ConvertToHex+0x36>
	{
		ret_val = in - 55U;
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	3b37      	subs	r3, #55	; 0x37
 8000a96:	73fb      	strb	r3, [r7, #15]
 8000a98:	e008      	b.n	8000aac <AppUart_ConvertToHex+0x48>
	}
	else if((in >= 97U) && (in <= 102U))
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b60      	cmp	r3, #96	; 0x60
 8000a9e:	d905      	bls.n	8000aac <AppUart_ConvertToHex+0x48>
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2b66      	cmp	r3, #102	; 0x66
 8000aa4:	d802      	bhi.n	8000aac <AppUart_ConvertToHex+0x48>
	{
		ret_val = in - 87U;
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	3b57      	subs	r3, #87	; 0x57
 8000aaa:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <AppUart_DecodeInputDec>:

uint32_t AppUart_DecodeInputDec(uint8_t len)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	static uint32_t mul[4] = {1000U, 100U, 10U, 1U};
	uint32_t ret_val = 0U;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < len; i++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	72fb      	strb	r3, [r7, #11]
 8000ace:	e013      	b.n	8000af8 <AppUart_DecodeInputDec+0x3c>
	{
		ret_val += (uint32_t)APP_UART_CONVERT_TO_DEC(AppUart_UartRxData[i]) * mul[4-len+i];
 8000ad0:	7afb      	ldrb	r3, [r7, #11]
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <AppUart_DecodeInputDec+0x54>)
 8000ad4:	5cd3      	ldrb	r3, [r2, r3]
 8000ad6:	3b30      	subs	r3, #48	; 0x30
 8000ad8:	79fa      	ldrb	r2, [r7, #7]
 8000ada:	f1c2 0104 	rsb	r1, r2, #4
 8000ade:	7afa      	ldrb	r2, [r7, #11]
 8000ae0:	440a      	add	r2, r1
 8000ae2:	490c      	ldr	r1, [pc, #48]	; (8000b14 <AppUart_DecodeInputDec+0x58>)
 8000ae4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ae8:	fb02 f303 	mul.w	r3, r2, r3
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	4413      	add	r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < len; i++)
 8000af2:	7afb      	ldrb	r3, [r7, #11]
 8000af4:	3301      	adds	r3, #1
 8000af6:	72fb      	strb	r3, [r7, #11]
 8000af8:	7afa      	ldrb	r2, [r7, #11]
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d3e7      	bcc.n	8000ad0 <AppUart_DecodeInputDec+0x14>
	}

	return ret_val;
 8000b00:	68fb      	ldr	r3, [r7, #12]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	200003cc 	.word	0x200003cc
 8000b14:	20000040 	.word	0x20000040

08000b18 <AppUart_ProcessMode>:

void AppUart_ProcessMode(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
	uint8_t input;

	input = (uint8_t)AppUart_DecodeInputDec(1U);
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f7ff ffcc 	bl	8000abc <AppUart_DecodeInputDec>
 8000b24:	4603      	mov	r3, r0
 8000b26:	71fb      	strb	r3, [r7, #7]

	if((input == 1U) || (input == 2U))
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d002      	beq.n	8000b34 <AppUart_ProcessMode+0x1c>
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d10e      	bne.n	8000b52 <AppUart_ProcessMode+0x3a>
	{
		AppUart_RequestMode = input;
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <AppUart_ProcessMode+0x54>)
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	7013      	strb	r3, [r2, #0]
		AppUart_StateMachine++;
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <AppUart_ProcessMode+0x58>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <AppUart_ProcessMode+0x58>)
 8000b44:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 3);
 8000b46:	2203      	movs	r2, #3
 8000b48:	490a      	ldr	r1, [pc, #40]	; (8000b74 <AppUart_ProcessMode+0x5c>)
 8000b4a:	480b      	ldr	r0, [pc, #44]	; (8000b78 <AppUart_ProcessMode+0x60>)
 8000b4c:	f003 fe98 	bl	8004880 <HAL_UART_Receive_IT>
 8000b50:	e008      	b.n	8000b64 <AppUart_ProcessMode+0x4c>
	}
	else
	{
		AppUart_StateMachine = APP_STATE_14_ERROR;
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <AppUart_ProcessMode+0x58>)
 8000b54:	220d      	movs	r2, #13
 8000b56:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 1);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	4906      	ldr	r1, [pc, #24]	; (8000b74 <AppUart_ProcessMode+0x5c>)
 8000b5c:	4806      	ldr	r0, [pc, #24]	; (8000b78 <AppUart_ProcessMode+0x60>)
 8000b5e:	f003 fe8f 	bl	8004880 <HAL_UART_Receive_IT>
	}
}
 8000b62:	bf00      	nop
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200003d0 	.word	0x200003d0
 8000b70:	200002cc 	.word	0x200002cc
 8000b74:	200003cc 	.word	0x200003cc
 8000b78:	2000054c 	.word	0x2000054c

08000b7c <AppUart_ProcessId>:

void AppUart_ProcessId(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
	uint16_t input;

	input = (uint16_t)AppUart_DecodeInputHex(3U);
 8000b82:	2003      	movs	r0, #3
 8000b84:	f7ff ff3e 	bl	8000a04 <AppUart_DecodeInputHex>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	80fb      	strh	r3, [r7, #6]

	if(input <= 2048U)
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b92:	d809      	bhi.n	8000ba8 <AppUart_ProcessId+0x2c>
	{
		AppUart_RequestId = input;
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <AppUart_ProcessId+0x44>)
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	8013      	strh	r3, [r2, #0]
		AppUart_StateMachine++;
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <AppUart_ProcessId+0x48>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <AppUart_ProcessId+0x48>)
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	e002      	b.n	8000bae <AppUart_ProcessId+0x32>
	}
	else
	{
		AppUart_StateMachine = APP_STATE_14_ERROR;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <AppUart_ProcessId+0x48>)
 8000baa:	220d      	movs	r2, #13
 8000bac:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 1);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4905      	ldr	r1, [pc, #20]	; (8000bc8 <AppUart_ProcessId+0x4c>)
 8000bb2:	4806      	ldr	r0, [pc, #24]	; (8000bcc <AppUart_ProcessId+0x50>)
 8000bb4:	f003 fe64 	bl	8004880 <HAL_UART_Receive_IT>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200003d2 	.word	0x200003d2
 8000bc4:	200002cc 	.word	0x200002cc
 8000bc8:	200003cc 	.word	0x200003cc
 8000bcc:	2000054c 	.word	0x2000054c

08000bd0 <AppUart_ProcessDlc>:

void AppUart_ProcessDlc(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
	uint8_t input;

	input = (uint8_t)AppUart_DecodeInputDec(1U);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff ff70 	bl	8000abc <AppUart_DecodeInputDec>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	71bb      	strb	r3, [r7, #6]

	if((input <= 8U) && (input >= 1U))
 8000be0:	79bb      	ldrb	r3, [r7, #6]
 8000be2:	2b08      	cmp	r3, #8
 8000be4:	d81e      	bhi.n	8000c24 <AppUart_ProcessDlc+0x54>
 8000be6:	79bb      	ldrb	r3, [r7, #6]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d01b      	beq.n	8000c24 <AppUart_ProcessDlc+0x54>
	{
		for(uint8_t i = 0; i < 8U; i++)
 8000bec:	2300      	movs	r3, #0
 8000bee:	71fb      	strb	r3, [r7, #7]
 8000bf0:	e006      	b.n	8000c00 <AppUart_ProcessDlc+0x30>
		{
			AppUart_RequestData[i] = 0U;
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <AppUart_ProcessDlc+0x70>)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8U; i++)
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	71fb      	strb	r3, [r7, #7]
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b07      	cmp	r3, #7
 8000c04:	d9f5      	bls.n	8000bf2 <AppUart_ProcessDlc+0x22>
		}

		AppUart_RequestDlc = input;
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <AppUart_ProcessDlc+0x74>)
 8000c08:	79bb      	ldrb	r3, [r7, #6]
 8000c0a:	7013      	strb	r3, [r2, #0]
		AppUart_StateMachine++;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <AppUart_ProcessDlc+0x78>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <AppUart_ProcessDlc+0x78>)
 8000c16:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 2);
 8000c18:	2202      	movs	r2, #2
 8000c1a:	490c      	ldr	r1, [pc, #48]	; (8000c4c <AppUart_ProcessDlc+0x7c>)
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <AppUart_ProcessDlc+0x80>)
 8000c1e:	f003 fe2f 	bl	8004880 <HAL_UART_Receive_IT>
 8000c22:	e008      	b.n	8000c36 <AppUart_ProcessDlc+0x66>
	}
	else
	{
		AppUart_StateMachine = APP_STATE_14_ERROR;
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <AppUart_ProcessDlc+0x78>)
 8000c26:	220d      	movs	r2, #13
 8000c28:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 1);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4907      	ldr	r1, [pc, #28]	; (8000c4c <AppUart_ProcessDlc+0x7c>)
 8000c2e:	4808      	ldr	r0, [pc, #32]	; (8000c50 <AppUart_ProcessDlc+0x80>)
 8000c30:	f003 fe26 	bl	8004880 <HAL_UART_Receive_IT>
	}
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200003d8 	.word	0x200003d8
 8000c44:	200003d4 	.word	0x200003d4
 8000c48:	200002cc 	.word	0x200002cc
 8000c4c:	200003cc 	.word	0x200003cc
 8000c50:	2000054c 	.word	0x2000054c

08000c54 <AppUart_ProcessData>:

void AppUart_ProcessData(uint8_t num)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
	uint8_t input;

	input = (uint8_t)AppUart_DecodeInputHex(2U);
 8000c5e:	2002      	movs	r0, #2
 8000c60:	f7ff fed0 	bl	8000a04 <AppUart_DecodeInputHex>
 8000c64:	4603      	mov	r3, r0
 8000c66:	73fb      	strb	r3, [r7, #15]

	AppUart_RequestData[num-1U] = input;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	4916      	ldr	r1, [pc, #88]	; (8000cc8 <AppUart_ProcessData+0x74>)
 8000c6e:	7bfa      	ldrb	r2, [r7, #15]
 8000c70:	54ca      	strb	r2, [r1, r3]

	if(num < AppUart_RequestDlc)
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <AppUart_ProcessData+0x78>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	79fa      	ldrb	r2, [r7, #7]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d20b      	bcs.n	8000c94 <AppUart_ProcessData+0x40>
	{
		AppUart_StateMachine++;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <AppUart_ProcessData+0x7c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	3301      	adds	r3, #1
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <AppUart_ProcessData+0x7c>)
 8000c86:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 2);
 8000c88:	2202      	movs	r2, #2
 8000c8a:	4912      	ldr	r1, [pc, #72]	; (8000cd4 <AppUart_ProcessData+0x80>)
 8000c8c:	4812      	ldr	r0, [pc, #72]	; (8000cd8 <AppUart_ProcessData+0x84>)
 8000c8e:	f003 fdf7 	bl	8004880 <HAL_UART_Receive_IT>
		{
			AppUart_StateMachine = APP_STATE_12_PERIOD;
			HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 4);
		}
	}
}
 8000c92:	e014      	b.n	8000cbe <AppUart_ProcessData+0x6a>
		if(AppUart_RequestMode == 1U)
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <AppUart_ProcessData+0x88>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d108      	bne.n	8000cae <AppUart_ProcessData+0x5a>
			AppUart_StateMachine = APP_STATE_13_SUMMARY;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <AppUart_ProcessData+0x7c>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 1);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	490b      	ldr	r1, [pc, #44]	; (8000cd4 <AppUart_ProcessData+0x80>)
 8000ca6:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <AppUart_ProcessData+0x84>)
 8000ca8:	f003 fdea 	bl	8004880 <HAL_UART_Receive_IT>
}
 8000cac:	e007      	b.n	8000cbe <AppUart_ProcessData+0x6a>
			AppUart_StateMachine = APP_STATE_12_PERIOD;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <AppUart_ProcessData+0x7c>)
 8000cb0:	220b      	movs	r2, #11
 8000cb2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 4);
 8000cb4:	2204      	movs	r2, #4
 8000cb6:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <AppUart_ProcessData+0x80>)
 8000cb8:	4807      	ldr	r0, [pc, #28]	; (8000cd8 <AppUart_ProcessData+0x84>)
 8000cba:	f003 fde1 	bl	8004880 <HAL_UART_Receive_IT>
}
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200003d8 	.word	0x200003d8
 8000ccc:	200003d4 	.word	0x200003d4
 8000cd0:	200002cc 	.word	0x200002cc
 8000cd4:	200003cc 	.word	0x200003cc
 8000cd8:	2000054c 	.word	0x2000054c
 8000cdc:	200003d0 	.word	0x200003d0

08000ce0 <AppUart_ProcessPeriod>:

void AppUart_ProcessPeriod(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	uint32_t input;

	input = (uint32_t)AppUart_DecodeInputDec(4U);
 8000ce6:	2004      	movs	r0, #4
 8000ce8:	f7ff fee8 	bl	8000abc <AppUart_DecodeInputDec>
 8000cec:	6078      	str	r0, [r7, #4]

	if(input > 0U)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d00a      	beq.n	8000d0a <AppUart_ProcessPeriod+0x2a>
	{
		AppUart_RequestPeriod = input;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <AppUart_ProcessPeriod+0x44>)
 8000cfa:	801a      	strh	r2, [r3, #0]
		AppUart_StateMachine++;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <AppUart_ProcessPeriod+0x48>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <AppUart_ProcessPeriod+0x48>)
 8000d06:	701a      	strb	r2, [r3, #0]
 8000d08:	e002      	b.n	8000d10 <AppUart_ProcessPeriod+0x30>
	}
	else
	{
		AppUart_StateMachine = APP_STATE_14_ERROR;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <AppUart_ProcessPeriod+0x48>)
 8000d0c:	220d      	movs	r2, #13
 8000d0e:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 1);
 8000d10:	2201      	movs	r2, #1
 8000d12:	4906      	ldr	r1, [pc, #24]	; (8000d2c <AppUart_ProcessPeriod+0x4c>)
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <AppUart_ProcessPeriod+0x50>)
 8000d16:	f003 fdb3 	bl	8004880 <HAL_UART_Receive_IT>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200003e0 	.word	0x200003e0
 8000d28:	200002cc 	.word	0x200002cc
 8000d2c:	200003cc 	.word	0x200003cc
 8000d30:	2000054c 	.word	0x2000054c

08000d34 <AppUart_ProcessSummary>:

void AppUart_ProcessSummary(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	if(AppUart_RequestMode == 1U)
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <AppUart_ProcessSummary+0x44>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d108      	bne.n	8000d52 <AppUart_ProcessSummary+0x1e>
	{
		AppCan_TxFrame(AppUart_RequestData, AppUart_RequestDlc, AppUart_RequestId);
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <AppUart_ProcessSummary+0x48>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <AppUart_ProcessSummary+0x4c>)
 8000d46:	8812      	ldrh	r2, [r2, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <AppUart_ProcessSummary+0x50>)
 8000d4c:	f7ff fcc6 	bl	80006dc <AppCan_TxFrame>
 8000d50:	e008      	b.n	8000d64 <AppUart_ProcessSummary+0x30>
	}
	else
	{
		AppCan_AddToScheaduler(AppUart_RequestData, AppUart_RequestDlc, AppUart_RequestId, AppUart_RequestPeriod);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <AppUart_ProcessSummary+0x48>)
 8000d54:	7819      	ldrb	r1, [r3, #0]
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <AppUart_ProcessSummary+0x4c>)
 8000d58:	881a      	ldrh	r2, [r3, #0]
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <AppUart_ProcessSummary+0x54>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	4809      	ldr	r0, [pc, #36]	; (8000d84 <AppUart_ProcessSummary+0x50>)
 8000d60:	f7ff fce4 	bl	800072c <AppCan_AddToScheaduler>
	}

	AppUart_StateMachine = APP_STATE_1_MODE;
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <AppUart_ProcessSummary+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 1);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	4908      	ldr	r1, [pc, #32]	; (8000d90 <AppUart_ProcessSummary+0x5c>)
 8000d6e:	4809      	ldr	r0, [pc, #36]	; (8000d94 <AppUart_ProcessSummary+0x60>)
 8000d70:	f003 fd86 	bl	8004880 <HAL_UART_Receive_IT>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200003d0 	.word	0x200003d0
 8000d7c:	200003d4 	.word	0x200003d4
 8000d80:	200003d2 	.word	0x200003d2
 8000d84:	200003d8 	.word	0x200003d8
 8000d88:	200003e0 	.word	0x200003e0
 8000d8c:	200002cc 	.word	0x200002cc
 8000d90:	200003cc 	.word	0x200003cc
 8000d94:	2000054c 	.word	0x2000054c

08000d98 <AppUart_ProcessError>:

void AppUart_ProcessError(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	AppUart_StateMachine = APP_STATE_1_MODE;
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <AppUart_ProcessError+0x18>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart3, AppUart_UartRxData, 1);
 8000da2:	2201      	movs	r2, #1
 8000da4:	4903      	ldr	r1, [pc, #12]	; (8000db4 <AppUart_ProcessError+0x1c>)
 8000da6:	4804      	ldr	r0, [pc, #16]	; (8000db8 <AppUart_ProcessError+0x20>)
 8000da8:	f003 fd6a 	bl	8004880 <HAL_UART_Receive_IT>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200002cc 	.word	0x200002cc
 8000db4:	200003cc 	.word	0x200003cc
 8000db8:	2000054c 	.word	0x2000054c

08000dbc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <MX_CAN1_Init+0x64>)
 8000dc2:	4a18      	ldr	r2, [pc, #96]	; (8000e24 <MX_CAN1_Init+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 30;
 8000dc6:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <MX_CAN1_Init+0x64>)
 8000dc8:	221e      	movs	r2, #30
 8000dca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <MX_CAN1_Init+0x64>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <MX_CAN1_Init+0x64>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <MX_CAN1_Init+0x64>)
 8000dda:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000dde:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <MX_CAN1_Init+0x64>)
 8000de2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000de6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <MX_CAN1_Init+0x64>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <MX_CAN1_Init+0x64>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <MX_CAN1_Init+0x64>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MX_CAN1_Init+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <MX_CAN1_Init+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_CAN1_Init+0x64>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e0c:	4804      	ldr	r0, [pc, #16]	; (8000e20 <MX_CAN1_Init+0x64>)
 8000e0e:	f000 fdbf 	bl	8001990 <HAL_CAN_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000e18:	f000 fac4 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200003e4 	.word	0x200003e4
 8000e24:	40006400 	.word	0x40006400

08000e28 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a17      	ldr	r2, [pc, #92]	; (8000ea4 <HAL_CAN_MspInit+0x7c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d127      	bne.n	8000e9a <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_CAN_MspInit+0x80>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a16      	ldr	r2, [pc, #88]	; (8000ea8 <HAL_CAN_MspInit+0x80>)
 8000e50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <HAL_CAN_MspInit+0x80>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <HAL_CAN_MspInit+0x80>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <HAL_CAN_MspInit+0x80>)
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_CAN_MspInit+0x80>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0308 	and.w	r3, r3, #8
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e8a:	2309      	movs	r3, #9
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <HAL_CAN_MspInit+0x84>)
 8000e96:	f001 fc79 	bl	800278c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40006400 	.word	0x40006400
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020c00 	.word	0x40020c00

08000eb0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <MX_ETH_Init+0x84>)
 8000eb6:	4a20      	ldr	r2, [pc, #128]	; (8000f38 <MX_ETH_Init+0x88>)
 8000eb8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000eba:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <MX_ETH_Init+0x8c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <MX_ETH_Init+0x8c>)
 8000ec2:	2280      	movs	r2, #128	; 0x80
 8000ec4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <MX_ETH_Init+0x8c>)
 8000ec8:	22e1      	movs	r2, #225	; 0xe1
 8000eca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <MX_ETH_Init+0x8c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <MX_ETH_Init+0x8c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <MX_ETH_Init+0x8c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_ETH_Init+0x84>)
 8000ee0:	4a16      	ldr	r2, [pc, #88]	; (8000f3c <MX_ETH_Init+0x8c>)
 8000ee2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <MX_ETH_Init+0x84>)
 8000ee6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000eea:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_ETH_Init+0x84>)
 8000eee:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <MX_ETH_Init+0x90>)
 8000ef0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <MX_ETH_Init+0x84>)
 8000ef4:	4a13      	ldr	r2, [pc, #76]	; (8000f44 <MX_ETH_Init+0x94>)
 8000ef6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_ETH_Init+0x84>)
 8000efa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000efe:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f00:	480c      	ldr	r0, [pc, #48]	; (8000f34 <MX_ETH_Init+0x84>)
 8000f02:	f001 f91d 	bl	8002140 <HAL_ETH_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000f0c:	f000 fa4a 	bl	80013a4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f10:	2238      	movs	r2, #56	; 0x38
 8000f12:	2100      	movs	r1, #0
 8000f14:	480c      	ldr	r0, [pc, #48]	; (8000f48 <MX_ETH_Init+0x98>)
 8000f16:	f005 facd 	bl	80064b4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <MX_ETH_Init+0x98>)
 8000f1c:	2221      	movs	r2, #33	; 0x21
 8000f1e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_ETH_Init+0x98>)
 8000f22:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000f26:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <MX_ETH_Init+0x98>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000444 	.word	0x20000444
 8000f38:	40028000 	.word	0x40028000
 8000f3c:	200004f4 	.word	0x200004f4
 8000f40:	20000160 	.word	0x20000160
 8000f44:	200000c0 	.word	0x200000c0
 8000f48:	2000040c 	.word	0x2000040c

08000f4c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	; 0x38
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a4e      	ldr	r2, [pc, #312]	; (80010a4 <HAL_ETH_MspInit+0x158>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	f040 8096 	bne.w	800109c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f70:	4b4d      	ldr	r3, [pc, #308]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	4a4c      	ldr	r2, [pc, #304]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000f76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7c:	4b4a      	ldr	r3, [pc, #296]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f84:	623b      	str	r3, [r7, #32]
 8000f86:	6a3b      	ldr	r3, [r7, #32]
 8000f88:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	4a46      	ldr	r2, [pc, #280]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000f8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f92:	6313      	str	r3, [r2, #48]	; 0x30
 8000f94:	4b44      	ldr	r3, [pc, #272]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f9c:	61fb      	str	r3, [r7, #28]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	4a40      	ldr	r2, [pc, #256]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000faa:	6313      	str	r3, [r2, #48]	; 0x30
 8000fac:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb8:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	4a3a      	ldr	r2, [pc, #232]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc4:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	4a34      	ldr	r2, [pc, #208]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6313      	str	r3, [r2, #48]	; 0x30
 8000fdc:	4b32      	ldr	r3, [pc, #200]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	4a2e      	ldr	r2, [pc, #184]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff4:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001000:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 8001006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800100a:	6313      	str	r3, [r2, #48]	; 0x30
 800100c:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <HAL_ETH_MspInit+0x15c>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001018:	2332      	movs	r3, #50	; 0x32
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001028:	230b      	movs	r3, #11
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	481e      	ldr	r0, [pc, #120]	; (80010ac <HAL_ETH_MspInit+0x160>)
 8001034:	f001 fbaa 	bl	800278c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001038:	2386      	movs	r3, #134	; 0x86
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001048:	230b      	movs	r3, #11
 800104a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001050:	4619      	mov	r1, r3
 8001052:	4817      	ldr	r0, [pc, #92]	; (80010b0 <HAL_ETH_MspInit+0x164>)
 8001054:	f001 fb9a 	bl	800278c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800106a:	230b      	movs	r3, #11
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	4619      	mov	r1, r3
 8001074:	480f      	ldr	r0, [pc, #60]	; (80010b4 <HAL_ETH_MspInit+0x168>)
 8001076:	f001 fb89 	bl	800278c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800107a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800108c:	230b      	movs	r3, #11
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001094:	4619      	mov	r1, r3
 8001096:	4808      	ldr	r0, [pc, #32]	; (80010b8 <HAL_ETH_MspInit+0x16c>)
 8001098:	f001 fb78 	bl	800278c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800109c:	bf00      	nop
 800109e:	3738      	adds	r7, #56	; 0x38
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40028000 	.word	0x40028000
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40021800 	.word	0x40021800

080010bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08c      	sub	sp, #48	; 0x30
 80010c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	4b56      	ldr	r3, [pc, #344]	; (800122c <MX_GPIO_Init+0x170>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a55      	ldr	r2, [pc, #340]	; (800122c <MX_GPIO_Init+0x170>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b53      	ldr	r3, [pc, #332]	; (800122c <MX_GPIO_Init+0x170>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	61bb      	str	r3, [r7, #24]
 80010e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ea:	4b50      	ldr	r3, [pc, #320]	; (800122c <MX_GPIO_Init+0x170>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a4f      	ldr	r2, [pc, #316]	; (800122c <MX_GPIO_Init+0x170>)
 80010f0:	f043 0320 	orr.w	r3, r3, #32
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b4d      	ldr	r3, [pc, #308]	; (800122c <MX_GPIO_Init+0x170>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0320 	and.w	r3, r3, #32
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001102:	4b4a      	ldr	r3, [pc, #296]	; (800122c <MX_GPIO_Init+0x170>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a49      	ldr	r2, [pc, #292]	; (800122c <MX_GPIO_Init+0x170>)
 8001108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b47      	ldr	r3, [pc, #284]	; (800122c <MX_GPIO_Init+0x170>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	4b44      	ldr	r3, [pc, #272]	; (800122c <MX_GPIO_Init+0x170>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a43      	ldr	r2, [pc, #268]	; (800122c <MX_GPIO_Init+0x170>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b41      	ldr	r3, [pc, #260]	; (800122c <MX_GPIO_Init+0x170>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	4b3e      	ldr	r3, [pc, #248]	; (800122c <MX_GPIO_Init+0x170>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a3d      	ldr	r2, [pc, #244]	; (800122c <MX_GPIO_Init+0x170>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b3b      	ldr	r3, [pc, #236]	; (800122c <MX_GPIO_Init+0x170>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114a:	4b38      	ldr	r3, [pc, #224]	; (800122c <MX_GPIO_Init+0x170>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a37      	ldr	r2, [pc, #220]	; (800122c <MX_GPIO_Init+0x170>)
 8001150:	f043 0308 	orr.w	r3, r3, #8
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b35      	ldr	r3, [pc, #212]	; (800122c <MX_GPIO_Init+0x170>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001162:	4b32      	ldr	r3, [pc, #200]	; (800122c <MX_GPIO_Init+0x170>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a31      	ldr	r2, [pc, #196]	; (800122c <MX_GPIO_Init+0x170>)
 8001168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b2f      	ldr	r3, [pc, #188]	; (800122c <MX_GPIO_Init+0x170>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_PIN_GPIO_Port, DEBUG_PIN_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	2101      	movs	r1, #1
 800117e:	482c      	ldr	r0, [pc, #176]	; (8001230 <MX_GPIO_Init+0x174>)
 8001180:	f001 fcb0 	bl	8002ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f244 0181 	movw	r1, #16513	; 0x4081
 800118a:	482a      	ldr	r0, [pc, #168]	; (8001234 <MX_GPIO_Init+0x178>)
 800118c:	f001 fcaa 	bl	8002ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2140      	movs	r1, #64	; 0x40
 8001194:	4828      	ldr	r0, [pc, #160]	; (8001238 <MX_GPIO_Init+0x17c>)
 8001196:	f001 fca5 	bl	8002ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800119a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4619      	mov	r1, r3
 80011b0:	4822      	ldr	r0, [pc, #136]	; (800123c <MX_GPIO_Init+0x180>)
 80011b2:	f001 faeb 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEBUG_PIN_Pin;
 80011b6:	2301      	movs	r3, #1
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DEBUG_PIN_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4619      	mov	r1, r3
 80011cc:	4818      	ldr	r0, [pc, #96]	; (8001230 <MX_GPIO_Init+0x174>)
 80011ce:	f001 fadd 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011d2:	f244 0381 	movw	r3, #16513	; 0x4081
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4812      	ldr	r0, [pc, #72]	; (8001234 <MX_GPIO_Init+0x178>)
 80011ec:	f001 face 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011f0:	2340      	movs	r3, #64	; 0x40
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4619      	mov	r1, r3
 8001206:	480c      	ldr	r0, [pc, #48]	; (8001238 <MX_GPIO_Init+0x17c>)
 8001208:	f001 fac0 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <MX_GPIO_Init+0x17c>)
 8001220:	f001 fab4 	bl	800278c <HAL_GPIO_Init>

}
 8001224:	bf00      	nop
 8001226:	3730      	adds	r7, #48	; 0x30
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40023800 	.word	0x40023800
 8001230:	40021400 	.word	0x40021400
 8001234:	40020400 	.word	0x40020400
 8001238:	40021800 	.word	0x40021800
 800123c:	40020800 	.word	0x40020800

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001244:	f000 fb23 	bl	800188e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001248:	f000 f816 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124c:	f7ff ff36 	bl	80010bc <MX_GPIO_Init>
  MX_ETH_Init();
 8001250:	f7ff fe2e 	bl	8000eb0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001254:	f000 f9b2 	bl	80015bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001258:	f000 fa48 	bl	80016ec <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 800125c:	f7ff fdae 	bl	8000dbc <MX_CAN1_Init>
  MX_TIM6_Init();
 8001260:	f000 f950 	bl	8001504 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  AppCan_Init();
 8001264:	f7ff f9be 	bl	80005e4 <AppCan_Init>
  AppUart_Init();
 8001268:	f7ff faa8 	bl	80007bc <AppUart_Init>

  /* Enable TIM6 - task scheduler */
  HAL_TIM_Base_Start_IT(&htim6);
 800126c:	4801      	ldr	r0, [pc, #4]	; (8001274 <main+0x34>)
 800126e:	f002 ff4f 	bl	8004110 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001272:	e7fe      	b.n	8001272 <main+0x32>
 8001274:	20000500 	.word	0x20000500

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	; 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	2234      	movs	r2, #52	; 0x34
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f005 f914 	bl	80064b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800129c:	f001 fd84 	bl	8002da8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <SystemClock_Config+0xdc>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	4a2b      	ldr	r2, [pc, #172]	; (8001354 <SystemClock_Config+0xdc>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012aa:	6413      	str	r3, [r2, #64]	; 0x40
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <SystemClock_Config+0xdc>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012b8:	4b27      	ldr	r3, [pc, #156]	; (8001358 <SystemClock_Config+0xe0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012c0:	4a25      	ldr	r2, [pc, #148]	; (8001358 <SystemClock_Config+0xe0>)
 80012c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	4b23      	ldr	r3, [pc, #140]	; (8001358 <SystemClock_Config+0xe0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012de:	2302      	movs	r3, #2
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012e8:	2304      	movs	r3, #4
 80012ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80012ec:	2360      	movs	r3, #96	; 0x60
 80012ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f0:	2302      	movs	r3, #2
 80012f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f4:	2304      	movs	r3, #4
 80012f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4618      	mov	r0, r3
 8001302:	f001 fdb1 	bl	8002e68 <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800130c:	f000 f84a 	bl	80013a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001310:	f001 fd5a 	bl	8002dc8 <HAL_PWREx_EnableOverDrive>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800131a:	f000 f843 	bl	80013a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131e:	230f      	movs	r3, #15
 8001320:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001322:	2302      	movs	r3, #2
 8001324:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800132a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	2103      	movs	r1, #3
 800133a:	4618      	mov	r0, r3
 800133c:	f002 f842 	bl	80033c4 <HAL_RCC_ClockConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001346:	f000 f82d 	bl	80013a4 <Error_Handler>
  }
}
 800134a:	bf00      	nop
 800134c:	3750      	adds	r7, #80	; 0x50
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40007000 	.word	0x40007000

0800135c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		AppCan_Task();
 800136e:	f7ff f943 	bl	80005f8 <AppCan_Task>
	}
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40001000 	.word	0x40001000

08001380 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <HAL_UART_RxCpltCallback+0x20>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_UART_RxCpltCallback+0x16>
	{
		AppUart_ProcessInput();
 8001392:	f7ff fa33 	bl	80007fc <AppUart_ProcessInput>
	}
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40004800 	.word	0x40004800

080013a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a8:	b672      	cpsid	i
}
 80013aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ac:	e7fe      	b.n	80013ac <Error_Handler+0x8>
	...

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_MspInit+0x44>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <HAL_MspInit+0x44>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c0:	6413      	str	r3, [r2, #64]	; 0x40
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_MspInit+0x44>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_MspInit+0x44>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <HAL_MspInit+0x44>)
 80013d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d8:	6453      	str	r3, [r2, #68]	; 0x44
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_MspInit+0x44>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <NMI_Handler+0x4>

080013fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <HardFault_Handler+0x4>

08001404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <MemManage_Handler+0x4>

0800140a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <UsageFault_Handler+0x4>

08001416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001444:	f000 fa60 	bl	8001908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <USART3_IRQHandler+0x10>)
 8001452:	f003 fa59 	bl	8004908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000054c 	.word	0x2000054c

08001460 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <TIM6_DAC_IRQHandler+0x10>)
 8001466:	f002 fecb 	bl	8004200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000500 	.word	0x20000500

08001474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800147c:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <_sbrk+0x5c>)
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <_sbrk+0x60>)
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <_sbrk+0x64>)
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <_sbrk+0x68>)
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d207      	bcs.n	80014b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a4:	f004 ffdc 	bl	8006460 <__errno>
 80014a8:	4603      	mov	r3, r0
 80014aa:	220c      	movs	r2, #12
 80014ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	e009      	b.n	80014c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <_sbrk+0x64>)
 80014c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20080000 	.word	0x20080000
 80014d4:	00000400 	.word	0x00000400
 80014d8:	200004fc 	.word	0x200004fc
 80014dc:	20000af0 	.word	0x20000af0

080014e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <SystemInit+0x20>)
 80014e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ea:	4a05      	ldr	r2, [pc, #20]	; (8001500 <SystemInit+0x20>)
 80014ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_TIM6_Init+0x64>)
 8001516:	4a15      	ldr	r2, [pc, #84]	; (800156c <MX_TIM6_Init+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <MX_TIM6_Init+0x64>)
 800151c:	f242 527f 	movw	r2, #9599	; 0x257f
 8001520:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_TIM6_Init+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_TIM6_Init+0x64>)
 800152a:	2263      	movs	r2, #99	; 0x63
 800152c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_TIM6_Init+0x64>)
 8001530:	2280      	movs	r2, #128	; 0x80
 8001532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001534:	480c      	ldr	r0, [pc, #48]	; (8001568 <MX_TIM6_Init+0x64>)
 8001536:	f002 fd93 	bl	8004060 <HAL_TIM_Base_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001540:	f7ff ff30 	bl	80013a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_TIM6_Init+0x64>)
 8001552:	f003 f83d 	bl	80045d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800155c:	f7ff ff22 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000500 	.word	0x20000500
 800156c:	40001000 	.word	0x40001000

08001570 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <HAL_TIM_Base_MspInit+0x44>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d113      	bne.n	80015aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <HAL_TIM_Base_MspInit+0x48>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	4a0c      	ldr	r2, [pc, #48]	; (80015b8 <HAL_TIM_Base_MspInit+0x48>)
 8001588:	f043 0310 	orr.w	r3, r3, #16
 800158c:	6413      	str	r3, [r2, #64]	; 0x40
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_TIM_Base_MspInit+0x48>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f003 0310 	and.w	r3, r3, #16
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2102      	movs	r1, #2
 800159e:	2036      	movs	r0, #54	; 0x36
 80015a0:	f000 fd05 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015a4:	2036      	movs	r0, #54	; 0x36
 80015a6:	f000 fd1e 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40001000 	.word	0x40001000
 80015b8:	40023800 	.word	0x40023800

080015bc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_USART3_UART_Init+0x58>)
 80015c2:	4a15      	ldr	r2, [pc, #84]	; (8001618 <MX_USART3_UART_Init+0x5c>)
 80015c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_USART3_UART_Init+0x58>)
 80015c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_USART3_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MX_USART3_UART_Init+0x58>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_USART3_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <MX_USART3_UART_Init+0x58>)
 80015e2:	220c      	movs	r2, #12
 80015e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <MX_USART3_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <MX_USART3_UART_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <MX_USART3_UART_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <MX_USART3_UART_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_USART3_UART_Init+0x58>)
 8001600:	f003 f892 	bl	8004728 <HAL_UART_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800160a:	f7ff fecb 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000054c 	.word	0x2000054c
 8001618:	40004800 	.word	0x40004800

0800161c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b0ae      	sub	sp, #184	; 0xb8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2290      	movs	r2, #144	; 0x90
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f004 ff39 	bl	80064b4 <memset>
  if(uartHandle->Instance==USART3)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a26      	ldr	r2, [pc, #152]	; (80016e0 <HAL_UART_MspInit+0xc4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d144      	bne.n	80016d6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800164c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001650:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001652:	2300      	movs	r3, #0
 8001654:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4618      	mov	r0, r3
 800165c:	f002 f8d8 	bl	8003810 <HAL_RCCEx_PeriphCLKConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001666:	f7ff fe9d 	bl	80013a4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <HAL_UART_MspInit+0xc8>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a1d      	ldr	r2, [pc, #116]	; (80016e4 <HAL_UART_MspInit+0xc8>)
 8001670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
 8001676:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_UART_MspInit+0xc8>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_UART_MspInit+0xc8>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <HAL_UART_MspInit+0xc8>)
 8001688:	f043 0308 	orr.w	r3, r3, #8
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_UART_MspInit+0xc8>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800169a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800169e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016b4:	2307      	movs	r3, #7
 80016b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016be:	4619      	mov	r1, r3
 80016c0:	4809      	ldr	r0, [pc, #36]	; (80016e8 <HAL_UART_MspInit+0xcc>)
 80016c2:	f001 f863 	bl	800278c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2101      	movs	r1, #1
 80016ca:	2027      	movs	r0, #39	; 0x27
 80016cc:	f000 fc6f 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016d0:	2027      	movs	r0, #39	; 0x27
 80016d2:	f000 fc88 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016d6:	bf00      	nop
 80016d8:	37b8      	adds	r7, #184	; 0xb8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40004800 	.word	0x40004800
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020c00 	.word	0x40020c00

080016ec <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016fa:	2206      	movs	r2, #6
 80016fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001700:	2202      	movs	r2, #2
 8001702:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800170c:	2202      	movs	r2, #2
 800170e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001712:	2201      	movs	r2, #1
 8001714:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001718:	2200      	movs	r2, #0
 800171a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800171e:	2200      	movs	r2, #0
 8001720:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001724:	2201      	movs	r2, #1
 8001726:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001730:	f001 f9f1 	bl	8002b16 <HAL_PCD_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800173a:	f7ff fe33 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200005d4 	.word	0x200005d4

08001748 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b0ae      	sub	sp, #184	; 0xb8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2290      	movs	r2, #144	; 0x90
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f004 fea3 	bl	80064b4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001776:	d159      	bne.n	800182c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001778:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800177c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4618      	mov	r0, r3
 800178a:	f002 f841 	bl	8003810 <HAL_RCCEx_PeriphCLKConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001794:	f7ff fe06 	bl	80013a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	4b26      	ldr	r3, [pc, #152]	; (8001834 <HAL_PCD_MspInit+0xec>)
 800179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179c:	4a25      	ldr	r2, [pc, #148]	; (8001834 <HAL_PCD_MspInit+0xec>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6313      	str	r3, [r2, #48]	; 0x30
 80017a4:	4b23      	ldr	r3, [pc, #140]	; (8001834 <HAL_PCD_MspInit+0xec>)
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017b0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017ca:	230a      	movs	r3, #10
 80017cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017d4:	4619      	mov	r1, r3
 80017d6:	4818      	ldr	r0, [pc, #96]	; (8001838 <HAL_PCD_MspInit+0xf0>)
 80017d8:	f000 ffd8 	bl	800278c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80017dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017f4:	4619      	mov	r1, r3
 80017f6:	4810      	ldr	r0, [pc, #64]	; (8001838 <HAL_PCD_MspInit+0xf0>)
 80017f8:	f000 ffc8 	bl	800278c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017fc:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <HAL_PCD_MspInit+0xec>)
 80017fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001800:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <HAL_PCD_MspInit+0xec>)
 8001802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001806:	6353      	str	r3, [r2, #52]	; 0x34
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_PCD_MspInit+0xec>)
 800180a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <HAL_PCD_MspInit+0xec>)
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	4a06      	ldr	r2, [pc, #24]	; (8001834 <HAL_PCD_MspInit+0xec>)
 800181a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800181e:	6453      	str	r3, [r2, #68]	; 0x44
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <HAL_PCD_MspInit+0xec>)
 8001822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800182c:	bf00      	nop
 800182e:	37b8      	adds	r7, #184	; 0xb8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40023800 	.word	0x40023800
 8001838:	40020000 	.word	0x40020000

0800183c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001874 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001840:	480d      	ldr	r0, [pc, #52]	; (8001878 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001842:	490e      	ldr	r1, [pc, #56]	; (800187c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001844:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001848:	e002      	b.n	8001850 <LoopCopyDataInit>

0800184a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800184c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184e:	3304      	adds	r3, #4

08001850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001854:	d3f9      	bcc.n	800184a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001858:	4c0b      	ldr	r4, [pc, #44]	; (8001888 <LoopFillZerobss+0x26>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800185c:	e001      	b.n	8001862 <LoopFillZerobss>

0800185e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001860:	3204      	adds	r2, #4

08001862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001864:	d3fb      	bcc.n	800185e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001866:	f7ff fe3b 	bl	80014e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800186a:	f004 fdff 	bl	800646c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186e:	f7ff fce7 	bl	8001240 <main>
  bx  lr    
 8001872:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001874:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001880:	080070b0 	.word	0x080070b0
  ldr r2, =_sbss
 8001884:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001888:	20000af0 	.word	0x20000af0

0800188c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC_IRQHandler>

0800188e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001892:	2003      	movs	r0, #3
 8001894:	f000 fb80 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001898:	2000      	movs	r0, #0
 800189a:	f000 f805 	bl	80018a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800189e:	f7ff fd87 	bl	80013b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_InitTick+0x54>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x58>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fb9b 	bl	8002002 <HAL_SYSTICK_Config>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00e      	b.n	80018f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d80a      	bhi.n	80018f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f000 fb63 	bl	8001fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e8:	4a06      	ldr	r2, [pc, #24]	; (8001904 <HAL_InitTick+0x5c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e000      	b.n	80018f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000050 	.word	0x20000050
 8001900:	20000058 	.word	0x20000058
 8001904:	20000054 	.word	0x20000054

08001908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x20>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x24>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_IncTick+0x24>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000058 	.word	0x20000058
 800192c:	20000adc 	.word	0x20000adc

08001930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_GetTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000adc 	.word	0x20000adc

08001948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff ffee 	bl	8001930 <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001960:	d005      	beq.n	800196e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_Delay+0x44>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800196e:	bf00      	nop
 8001970:	f7ff ffde 	bl	8001930 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8f7      	bhi.n	8001970 <HAL_Delay+0x28>
  {
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000058 	.word	0x20000058

08001990 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e0ed      	b.n	8001b7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d102      	bne.n	80019b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff fa3a 	bl	8000e28 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0201 	orr.w	r2, r2, #1
 80019c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019c4:	f7ff ffb4 	bl	8001930 <HAL_GetTick>
 80019c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019ca:	e012      	b.n	80019f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019cc:	f7ff ffb0 	bl	8001930 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b0a      	cmp	r3, #10
 80019d8:	d90b      	bls.n	80019f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2205      	movs	r2, #5
 80019ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e0c5      	b.n	8001b7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0e5      	beq.n	80019cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0202 	bic.w	r2, r2, #2
 8001a0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a10:	f7ff ff8e 	bl	8001930 <HAL_GetTick>
 8001a14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a16:	e012      	b.n	8001a3e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a18:	f7ff ff8a 	bl	8001930 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b0a      	cmp	r3, #10
 8001a24:	d90b      	bls.n	8001a3e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2205      	movs	r2, #5
 8001a36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e09f      	b.n	8001b7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1e5      	bne.n	8001a18 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7e1b      	ldrb	r3, [r3, #24]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d108      	bne.n	8001a66 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e007      	b.n	8001a76 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7e5b      	ldrb	r3, [r3, #25]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d108      	bne.n	8001a90 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	e007      	b.n	8001aa0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7e9b      	ldrb	r3, [r3, #26]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d108      	bne.n	8001aba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0220 	orr.w	r2, r2, #32
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	e007      	b.n	8001aca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0220 	bic.w	r2, r2, #32
 8001ac8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7edb      	ldrb	r3, [r3, #27]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d108      	bne.n	8001ae4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0210 	bic.w	r2, r2, #16
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	e007      	b.n	8001af4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0210 	orr.w	r2, r2, #16
 8001af2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7f1b      	ldrb	r3, [r3, #28]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d108      	bne.n	8001b0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0208 	orr.w	r2, r2, #8
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	e007      	b.n	8001b1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0208 	bic.w	r2, r2, #8
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	7f5b      	ldrb	r3, [r3, #29]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d108      	bne.n	8001b38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 0204 	orr.w	r2, r2, #4
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	e007      	b.n	8001b48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0204 	bic.w	r2, r2, #4
 8001b46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	ea42 0103 	orr.w	r1, r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	1e5a      	subs	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d12e      	bne.n	8001bf8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0201 	bic.w	r2, r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bb2:	f7ff febd 	bl	8001930 <HAL_GetTick>
 8001bb6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bb8:	e012      	b.n	8001be0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bba:	f7ff feb9 	bl	8001930 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b0a      	cmp	r3, #10
 8001bc6:	d90b      	bls.n	8001be0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2205      	movs	r2, #5
 8001bd8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e012      	b.n	8001c06 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1e5      	bne.n	8001bba <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e006      	b.n	8001c06 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
  }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b089      	sub	sp, #36	; 0x24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c22:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c2c:	7ffb      	ldrb	r3, [r7, #31]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d003      	beq.n	8001c3a <HAL_CAN_AddTxMessage+0x2c>
 8001c32:	7ffb      	ldrb	r3, [r7, #31]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	f040 80ad 	bne.w	8001d94 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10a      	bne.n	8001c5a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d105      	bne.n	8001c5a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 8095 	beq.w	8001d84 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	0e1b      	lsrs	r3, r3, #24
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c64:	2201      	movs	r2, #1
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10d      	bne.n	8001c92 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c80:	68f9      	ldr	r1, [r7, #12]
 8001c82:	6809      	ldr	r1, [r1, #0]
 8001c84:	431a      	orrs	r2, r3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3318      	adds	r3, #24
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	440b      	add	r3, r1
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	e00f      	b.n	8001cb2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c9c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ca2:	68f9      	ldr	r1, [r7, #12]
 8001ca4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ca6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3318      	adds	r3, #24
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	440b      	add	r3, r1
 8001cb0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6819      	ldr	r1, [r3, #0]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	691a      	ldr	r2, [r3, #16]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	3318      	adds	r3, #24
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	7d1b      	ldrb	r3, [r3, #20]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d111      	bne.n	8001cf2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3318      	adds	r3, #24
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	4413      	add	r3, r2
 8001cda:	3304      	adds	r3, #4
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	6811      	ldr	r1, [r2, #0]
 8001ce2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3318      	adds	r3, #24
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	440b      	add	r3, r1
 8001cee:	3304      	adds	r3, #4
 8001cf0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3307      	adds	r3, #7
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	061a      	lsls	r2, r3, #24
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3306      	adds	r3, #6
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	041b      	lsls	r3, r3, #16
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3305      	adds	r3, #5
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	3204      	adds	r2, #4
 8001d12:	7812      	ldrb	r2, [r2, #0]
 8001d14:	4610      	mov	r0, r2
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	6811      	ldr	r1, [r2, #0]
 8001d1a:	ea43 0200 	orr.w	r2, r3, r0
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	440b      	add	r3, r1
 8001d24:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001d28:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3303      	adds	r3, #3
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	061a      	lsls	r2, r3, #24
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3302      	adds	r3, #2
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	041b      	lsls	r3, r3, #16
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	4313      	orrs	r3, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	7812      	ldrb	r2, [r2, #0]
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	6811      	ldr	r1, [r2, #0]
 8001d50:	ea43 0200 	orr.w	r2, r3, r0
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	440b      	add	r3, r1
 8001d5a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001d5e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	3318      	adds	r3, #24
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	4413      	add	r3, r2
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	6811      	ldr	r1, [r2, #0]
 8001d72:	f043 0201 	orr.w	r2, r3, #1
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3318      	adds	r3, #24
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	440b      	add	r3, r1
 8001d7e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	e00e      	b.n	8001da2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e006      	b.n	8001da2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
  }
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dc4:	7afb      	ldrb	r3, [r7, #11]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d002      	beq.n	8001dd0 <HAL_CAN_IsTxMessagePending+0x22>
 8001dca:	7afb      	ldrb	r3, [r7, #11]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d10b      	bne.n	8001de8 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	069b      	lsls	r3, r3, #26
 8001dda:	401a      	ands	r2, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	069b      	lsls	r3, r3, #26
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d001      	beq.n	8001de8 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001de4:	2301      	movs	r3, #1
 8001de6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001de8:	68fb      	ldr	r3, [r7, #12]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <__NVIC_SetPriorityGrouping+0x40>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e14:	4013      	ands	r3, r2
 8001e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e26:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <__NVIC_SetPriorityGrouping+0x40>)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	60d3      	str	r3, [r2, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00
 8001e3c:	05fa0000 	.word	0x05fa0000

08001e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <__NVIC_GetPriorityGrouping+0x18>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	f003 0307 	and.w	r3, r3, #7
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	db0b      	blt.n	8001e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	f003 021f 	and.w	r2, r3, #31
 8001e74:	4907      	ldr	r1, [pc, #28]	; (8001e94 <__NVIC_EnableIRQ+0x38>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000e100 	.word	0xe000e100

08001e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	db0a      	blt.n	8001ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	490c      	ldr	r1, [pc, #48]	; (8001ee4 <__NVIC_SetPriority+0x4c>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	0112      	lsls	r2, r2, #4
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	440b      	add	r3, r1
 8001ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec0:	e00a      	b.n	8001ed8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4908      	ldr	r1, [pc, #32]	; (8001ee8 <__NVIC_SetPriority+0x50>)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	3b04      	subs	r3, #4
 8001ed0:	0112      	lsls	r2, r2, #4
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	761a      	strb	r2, [r3, #24]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000e100 	.word	0xe000e100
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	; 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f1c3 0307 	rsb	r3, r3, #7
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	bf28      	it	cs
 8001f0a:	2304      	movcs	r3, #4
 8001f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3304      	adds	r3, #4
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d902      	bls.n	8001f1c <NVIC_EncodePriority+0x30>
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3b03      	subs	r3, #3
 8001f1a:	e000      	b.n	8001f1e <NVIC_EncodePriority+0x32>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	401a      	ands	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43d9      	mvns	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	4313      	orrs	r3, r2
         );
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3724      	adds	r7, #36	; 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f64:	d301      	bcc.n	8001f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00f      	b.n	8001f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <SysTick_Config+0x40>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f72:	210f      	movs	r1, #15
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f7ff ff8e 	bl	8001e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <SysTick_Config+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <SysTick_Config+0x40>)
 8001f84:	2207      	movs	r2, #7
 8001f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000e010 	.word	0xe000e010

08001f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff29 	bl	8001df8 <__NVIC_SetPriorityGrouping>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc0:	f7ff ff3e 	bl	8001e40 <__NVIC_GetPriorityGrouping>
 8001fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	6978      	ldr	r0, [r7, #20]
 8001fcc:	f7ff ff8e 	bl	8001eec <NVIC_EncodePriority>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff5d 	bl	8001e98 <__NVIC_SetPriority>
}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff31 	bl	8001e5c <__NVIC_EnableIRQ>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ffa2 	bl	8001f54 <SysTick_Config>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff fc82 	bl	8001930 <HAL_GetTick>
 800202c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d008      	beq.n	800204c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2280      	movs	r2, #128	; 0x80
 800203e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e052      	b.n	80020f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0216 	bic.w	r2, r2, #22
 800205a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695a      	ldr	r2, [r3, #20]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800206a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	2b00      	cmp	r3, #0
 8002072:	d103      	bne.n	800207c <HAL_DMA_Abort+0x62>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0208 	bic.w	r2, r2, #8
 800208a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800209c:	e013      	b.n	80020c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800209e:	f7ff fc47 	bl	8001930 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b05      	cmp	r3, #5
 80020aa:	d90c      	bls.n	80020c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2203      	movs	r2, #3
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e015      	b.n	80020f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1e4      	bne.n	800209e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	223f      	movs	r2, #63	; 0x3f
 80020da:	409a      	lsls	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d004      	beq.n	8002118 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2280      	movs	r2, #128	; 0x80
 8002112:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e00c      	b.n	8002132 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2205      	movs	r2, #5
 800211c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e06a      	b.n	8002228 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002158:	2b00      	cmp	r3, #0
 800215a:	d106      	bne.n	800216a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2223      	movs	r2, #35	; 0x23
 8002160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7fe fef1 	bl	8000f4c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	4b31      	ldr	r3, [pc, #196]	; (8002230 <HAL_ETH_Init+0xf0>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	4a30      	ldr	r2, [pc, #192]	; (8002230 <HAL_ETH_Init+0xf0>)
 8002170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002174:	6453      	str	r3, [r2, #68]	; 0x44
 8002176:	4b2e      	ldr	r3, [pc, #184]	; (8002230 <HAL_ETH_Init+0xf0>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002182:	4b2c      	ldr	r3, [pc, #176]	; (8002234 <HAL_ETH_Init+0xf4>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4a2b      	ldr	r2, [pc, #172]	; (8002234 <HAL_ETH_Init+0xf4>)
 8002188:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800218c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800218e:	4b29      	ldr	r3, [pc, #164]	; (8002234 <HAL_ETH_Init+0xf4>)
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	4927      	ldr	r1, [pc, #156]	; (8002234 <HAL_ETH_Init+0xf4>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800219c:	4b25      	ldr	r3, [pc, #148]	; (8002234 <HAL_ETH_Init+0xf4>)
 800219e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021b8:	f7ff fbba 	bl	8001930 <HAL_GetTick>
 80021bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021be:	e011      	b.n	80021e4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80021c0:	f7ff fbb6 	bl	8001930 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021ce:	d909      	bls.n	80021e4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2204      	movs	r2, #4
 80021d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	22e0      	movs	r2, #224	; 0xe0
 80021dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e021      	b.n	8002228 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1e4      	bne.n	80021c0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f958 	bl	80024ac <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f9ff 	bl	8002600 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 fa55 	bl	80026b2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	461a      	mov	r2, r3
 800220e:	2100      	movs	r1, #0
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f9bd 	bl	8002590 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2210      	movs	r2, #16
 8002222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40023800 	.word	0x40023800
 8002234:	40013800 	.word	0x40013800

08002238 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4b51      	ldr	r3, [pc, #324]	; (8002394 <ETH_SetMACConfig+0x15c>)
 800224e:	4013      	ands	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	7c1b      	ldrb	r3, [r3, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <ETH_SetMACConfig+0x28>
 800225a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800225e:	e000      	b.n	8002262 <ETH_SetMACConfig+0x2a>
 8002260:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	7c5b      	ldrb	r3, [r3, #17]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <ETH_SetMACConfig+0x38>
 800226a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800226e:	e000      	b.n	8002272 <ETH_SetMACConfig+0x3a>
 8002270:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002272:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002278:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	7fdb      	ldrb	r3, [r3, #31]
 800227e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002280:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002286:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	7f92      	ldrb	r2, [r2, #30]
 800228c:	2a00      	cmp	r2, #0
 800228e:	d102      	bne.n	8002296 <ETH_SetMACConfig+0x5e>
 8002290:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002294:	e000      	b.n	8002298 <ETH_SetMACConfig+0x60>
 8002296:	2200      	movs	r2, #0
                        macconf->Speed |
 8002298:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	7f1b      	ldrb	r3, [r3, #28]
 800229e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022a0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022a6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	791b      	ldrb	r3, [r3, #4]
 80022ac:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80022ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022b6:	2a00      	cmp	r2, #0
 80022b8:	d102      	bne.n	80022c0 <ETH_SetMACConfig+0x88>
 80022ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022be:	e000      	b.n	80022c2 <ETH_SetMACConfig+0x8a>
 80022c0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	7bdb      	ldrb	r3, [r3, #15]
 80022c8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022ca:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022d8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022da:	4313      	orrs	r3, r2
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f2:	2001      	movs	r0, #1
 80022f4:	f7ff fb28 	bl	8001948 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800230e:	4013      	ands	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002316:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800231e:	2a00      	cmp	r2, #0
 8002320:	d101      	bne.n	8002326 <ETH_SetMACConfig+0xee>
 8002322:	2280      	movs	r2, #128	; 0x80
 8002324:	e000      	b.n	8002328 <ETH_SetMACConfig+0xf0>
 8002326:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002328:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800232e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002336:	2a01      	cmp	r2, #1
 8002338:	d101      	bne.n	800233e <ETH_SetMACConfig+0x106>
 800233a:	2208      	movs	r2, #8
 800233c:	e000      	b.n	8002340 <ETH_SetMACConfig+0x108>
 800233e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002340:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002348:	2a01      	cmp	r2, #1
 800234a:	d101      	bne.n	8002350 <ETH_SetMACConfig+0x118>
 800234c:	2204      	movs	r2, #4
 800234e:	e000      	b.n	8002352 <ETH_SetMACConfig+0x11a>
 8002350:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002352:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800235a:	2a01      	cmp	r2, #1
 800235c:	d101      	bne.n	8002362 <ETH_SetMACConfig+0x12a>
 800235e:	2202      	movs	r2, #2
 8002360:	e000      	b.n	8002364 <ETH_SetMACConfig+0x12c>
 8002362:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002364:	4313      	orrs	r3, r2
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800237c:	2001      	movs	r0, #1
 800237e:	f7ff fae3 	bl	8001948 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	619a      	str	r2, [r3, #24]
}
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	ff20810f 	.word	0xff20810f

08002398 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4b3d      	ldr	r3, [pc, #244]	; (80024a8 <ETH_SetDMAConfig+0x110>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	7b1b      	ldrb	r3, [r3, #12]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d102      	bne.n	80023c4 <ETH_SetDMAConfig+0x2c>
 80023be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023c2:	e000      	b.n	80023c6 <ETH_SetDMAConfig+0x2e>
 80023c4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	7b5b      	ldrb	r3, [r3, #13]
 80023ca:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023cc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	7f52      	ldrb	r2, [r2, #29]
 80023d2:	2a00      	cmp	r2, #0
 80023d4:	d102      	bne.n	80023dc <ETH_SetDMAConfig+0x44>
 80023d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023da:	e000      	b.n	80023de <ETH_SetDMAConfig+0x46>
 80023dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023de:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	7b9b      	ldrb	r3, [r3, #14]
 80023e4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023e6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023ec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	7f1b      	ldrb	r3, [r3, #28]
 80023f2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80023f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	7f9b      	ldrb	r3, [r3, #30]
 80023fa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023fc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002402:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800240a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800240c:	4313      	orrs	r3, r2
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4313      	orrs	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800241c:	461a      	mov	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800242e:	2001      	movs	r0, #1
 8002430:	f7ff fa8a 	bl	8001948 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243c:	461a      	mov	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	791b      	ldrb	r3, [r3, #4]
 8002446:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800244c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002452:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002458:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002460:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002462:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800246a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002470:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800247a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800247e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800248c:	2001      	movs	r0, #1
 800248e:	f7ff fa5b 	bl	8001948 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800249a:	461a      	mov	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6013      	str	r3, [r2, #0]
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	f8de3f23 	.word	0xf8de3f23

080024ac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b0a6      	sub	sp, #152	; 0x98
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80024b4:	2301      	movs	r3, #1
 80024b6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80024c0:	2300      	movs	r3, #0
 80024c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80024d6:	2301      	movs	r3, #1
 80024d8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024e8:	2300      	movs	r3, #0
 80024ea:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800250e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002512:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002514:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002518:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002520:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002524:	4619      	mov	r1, r3
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff fe86 	bl	8002238 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800252c:	2301      	movs	r3, #1
 800252e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002530:	2301      	movs	r3, #1
 8002532:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002534:	2301      	movs	r3, #1
 8002536:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800253a:	2301      	movs	r3, #1
 800253c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002542:	2300      	movs	r3, #0
 8002544:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800254e:	2300      	movs	r3, #0
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002552:	2301      	movs	r3, #1
 8002554:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002558:	2301      	movs	r3, #1
 800255a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800255c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002560:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002562:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002566:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800256c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800256e:	2301      	movs	r3, #1
 8002570:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002574:	2300      	movs	r3, #0
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002578:	2300      	movs	r3, #0
 800257a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800257c:	f107 0308 	add.w	r3, r7, #8
 8002580:	4619      	mov	r1, r3
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ff08 	bl	8002398 <ETH_SetDMAConfig>
}
 8002588:	bf00      	nop
 800258a:	3798      	adds	r7, #152	; 0x98
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3305      	adds	r3, #5
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	3204      	adds	r2, #4
 80025a8:	7812      	ldrb	r2, [r2, #0]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <ETH_MACAddressConfig+0x68>)
 80025b2:	4413      	add	r3, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3303      	adds	r3, #3
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	061a      	lsls	r2, r3, #24
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3302      	adds	r3, #2
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	041b      	lsls	r3, r3, #16
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3301      	adds	r3, #1
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	4313      	orrs	r3, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	7812      	ldrb	r2, [r2, #0]
 80025da:	4313      	orrs	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <ETH_MACAddressConfig+0x6c>)
 80025e2:	4413      	add	r3, r2
 80025e4:	461a      	mov	r2, r3
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	6013      	str	r3, [r2, #0]
}
 80025ea:	bf00      	nop
 80025ec:	371c      	adds	r7, #28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40028040 	.word	0x40028040
 80025fc:	40028044 	.word	0x40028044

08002600 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	e03e      	b.n	800268c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68d9      	ldr	r1, [r3, #12]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	440b      	add	r3, r1
 800261e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2200      	movs	r2, #0
 800262a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2200      	movs	r2, #0
 8002636:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	3206      	adds	r2, #6
 8002640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d80c      	bhi.n	8002670 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68d9      	ldr	r1, [r3, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	440b      	add	r3, r1
 8002668:	461a      	mov	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	e004      	b.n	800267a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	461a      	mov	r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	3301      	adds	r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b03      	cmp	r3, #3
 8002690:	d9bd      	bls.n	800260e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a4:	611a      	str	r2, [r3, #16]
}
 80026a6:	bf00      	nop
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b085      	sub	sp, #20
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	e046      	b.n	800274e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6919      	ldr	r1, [r3, #16]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	440b      	add	r3, r1
 80026d0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2200      	movs	r2, #0
 80026dc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2200      	movs	r2, #0
 80026e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2200      	movs	r2, #0
 80026e8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2200      	movs	r2, #0
 80026ee:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2200      	movs	r2, #0
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80026fc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002704:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	3212      	adds	r2, #18
 800271a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d80c      	bhi.n	800273e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6919      	ldr	r1, [r3, #16]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	440b      	add	r3, r1
 8002736:	461a      	mov	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	60da      	str	r2, [r3, #12]
 800273c:	e004      	b.n	8002748 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	461a      	mov	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3301      	adds	r3, #1
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d9b5      	bls.n	80026c0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800277e:	60da      	str	r2, [r3, #12]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800278c:	b480      	push	{r7}
 800278e:	b089      	sub	sp, #36	; 0x24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	e175      	b.n	8002a98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	f040 8164 	bne.w	8002a92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d005      	beq.n	80027e2 <HAL_GPIO_Init+0x56>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d130      	bne.n	8002844 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2203      	movs	r2, #3
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 0201 	and.w	r2, r3, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b03      	cmp	r3, #3
 800284e:	d017      	beq.n	8002880 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d123      	bne.n	80028d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	08da      	lsrs	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3208      	adds	r2, #8
 8002894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	220f      	movs	r2, #15
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	08da      	lsrs	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	69b9      	ldr	r1, [r7, #24]
 80028d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0203 	and.w	r2, r3, #3
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80be 	beq.w	8002a92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	4b66      	ldr	r3, [pc, #408]	; (8002ab0 <HAL_GPIO_Init+0x324>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	4a65      	ldr	r2, [pc, #404]	; (8002ab0 <HAL_GPIO_Init+0x324>)
 800291c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002920:	6453      	str	r3, [r2, #68]	; 0x44
 8002922:	4b63      	ldr	r3, [pc, #396]	; (8002ab0 <HAL_GPIO_Init+0x324>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800292e:	4a61      	ldr	r2, [pc, #388]	; (8002ab4 <HAL_GPIO_Init+0x328>)
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	3302      	adds	r3, #2
 8002936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	220f      	movs	r2, #15
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a58      	ldr	r2, [pc, #352]	; (8002ab8 <HAL_GPIO_Init+0x32c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d037      	beq.n	80029ca <HAL_GPIO_Init+0x23e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a57      	ldr	r2, [pc, #348]	; (8002abc <HAL_GPIO_Init+0x330>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d031      	beq.n	80029c6 <HAL_GPIO_Init+0x23a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a56      	ldr	r2, [pc, #344]	; (8002ac0 <HAL_GPIO_Init+0x334>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d02b      	beq.n	80029c2 <HAL_GPIO_Init+0x236>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a55      	ldr	r2, [pc, #340]	; (8002ac4 <HAL_GPIO_Init+0x338>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d025      	beq.n	80029be <HAL_GPIO_Init+0x232>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a54      	ldr	r2, [pc, #336]	; (8002ac8 <HAL_GPIO_Init+0x33c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d01f      	beq.n	80029ba <HAL_GPIO_Init+0x22e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a53      	ldr	r2, [pc, #332]	; (8002acc <HAL_GPIO_Init+0x340>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d019      	beq.n	80029b6 <HAL_GPIO_Init+0x22a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a52      	ldr	r2, [pc, #328]	; (8002ad0 <HAL_GPIO_Init+0x344>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d013      	beq.n	80029b2 <HAL_GPIO_Init+0x226>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a51      	ldr	r2, [pc, #324]	; (8002ad4 <HAL_GPIO_Init+0x348>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00d      	beq.n	80029ae <HAL_GPIO_Init+0x222>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a50      	ldr	r2, [pc, #320]	; (8002ad8 <HAL_GPIO_Init+0x34c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d007      	beq.n	80029aa <HAL_GPIO_Init+0x21e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a4f      	ldr	r2, [pc, #316]	; (8002adc <HAL_GPIO_Init+0x350>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d101      	bne.n	80029a6 <HAL_GPIO_Init+0x21a>
 80029a2:	2309      	movs	r3, #9
 80029a4:	e012      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029a6:	230a      	movs	r3, #10
 80029a8:	e010      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029aa:	2308      	movs	r3, #8
 80029ac:	e00e      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029ae:	2307      	movs	r3, #7
 80029b0:	e00c      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029b2:	2306      	movs	r3, #6
 80029b4:	e00a      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029b6:	2305      	movs	r3, #5
 80029b8:	e008      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029ba:	2304      	movs	r3, #4
 80029bc:	e006      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029be:	2303      	movs	r3, #3
 80029c0:	e004      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e002      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_GPIO_Init+0x240>
 80029ca:	2300      	movs	r3, #0
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	f002 0203 	and.w	r2, r2, #3
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	4093      	lsls	r3, r2
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029dc:	4935      	ldr	r1, [pc, #212]	; (8002ab4 <HAL_GPIO_Init+0x328>)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	089b      	lsrs	r3, r3, #2
 80029e2:	3302      	adds	r3, #2
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ea:	4b3d      	ldr	r3, [pc, #244]	; (8002ae0 <HAL_GPIO_Init+0x354>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a0e:	4a34      	ldr	r2, [pc, #208]	; (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a14:	4b32      	ldr	r3, [pc, #200]	; (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a38:	4a29      	ldr	r2, [pc, #164]	; (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a3e:	4b28      	ldr	r3, [pc, #160]	; (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a62:	4a1f      	ldr	r2, [pc, #124]	; (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a68:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a8c:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <HAL_GPIO_Init+0x354>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	3301      	adds	r3, #1
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	2b0f      	cmp	r3, #15
 8002a9c:	f67f ae86 	bls.w	80027ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	3724      	adds	r7, #36	; 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40013800 	.word	0x40013800
 8002ab8:	40020000 	.word	0x40020000
 8002abc:	40020400 	.word	0x40020400
 8002ac0:	40020800 	.word	0x40020800
 8002ac4:	40020c00 	.word	0x40020c00
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40021400 	.word	0x40021400
 8002ad0:	40021800 	.word	0x40021800
 8002ad4:	40021c00 	.word	0x40021c00
 8002ad8:	40022000 	.word	0x40022000
 8002adc:	40022400 	.word	0x40022400
 8002ae0:	40013c00 	.word	0x40013c00

08002ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	807b      	strh	r3, [r7, #2]
 8002af0:	4613      	mov	r3, r2
 8002af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002af4:	787b      	ldrb	r3, [r7, #1]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002afa:	887a      	ldrh	r2, [r7, #2]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b00:	e003      	b.n	8002b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b02:	887b      	ldrh	r3, [r7, #2]
 8002b04:	041a      	lsls	r2, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	619a      	str	r2, [r3, #24]
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b18:	b08f      	sub	sp, #60	; 0x3c
 8002b1a:	af0a      	add	r7, sp, #40	; 0x28
 8002b1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e116      	b.n	8002d56 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fe fe00 	bl	8001748 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f003 f9de 	bl	8005f28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	687e      	ldr	r6, [r7, #4]
 8002b74:	466d      	mov	r5, sp
 8002b76:	f106 0410 	add.w	r4, r6, #16
 8002b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b86:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b8a:	1d33      	adds	r3, r6, #4
 8002b8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b8e:	6838      	ldr	r0, [r7, #0]
 8002b90:	f003 f972 	bl	8005e78 <USB_CoreInit>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d005      	beq.n	8002ba6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0d7      	b.n	8002d56 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2100      	movs	r1, #0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f003 f9cc 	bl	8005f4a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	73fb      	strb	r3, [r7, #15]
 8002bb6:	e04a      	b.n	8002c4e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	333d      	adds	r3, #61	; 0x3d
 8002bc8:	2201      	movs	r2, #1
 8002bca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	333c      	adds	r3, #60	; 0x3c
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	b298      	uxth	r0, r3
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3344      	adds	r3, #68	; 0x44
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	3340      	adds	r3, #64	; 0x40
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	3348      	adds	r3, #72	; 0x48
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c20:	7bfa      	ldrb	r2, [r7, #15]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	334c      	adds	r3, #76	; 0x4c
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	3354      	adds	r3, #84	; 0x54
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
 8002c4e:	7bfa      	ldrb	r2, [r7, #15]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d3af      	bcc.n	8002bb8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]
 8002c5c:	e044      	b.n	8002ce8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d3b5      	bcc.n	8002c5e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	687e      	ldr	r6, [r7, #4]
 8002cfa:	466d      	mov	r5, sp
 8002cfc:	f106 0410 	add.w	r4, r6, #16
 8002d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d10:	1d33      	adds	r3, r6, #4
 8002d12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d14:	6838      	ldr	r0, [r7, #0]
 8002d16:	f003 f965 	bl	8005fe4 <USB_DevInit>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e014      	b.n	8002d56 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d102      	bne.n	8002d4a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f80b 	bl	8002d60 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 fb23 	bl	800639a <USB_DevDisconnect>

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d60 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	10000003 	.word	0x10000003

08002da8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db6:	6013      	str	r3, [r2, #0]
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40007000 	.word	0x40007000

08002dc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <HAL_PWREx_EnableOverDrive+0x98>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	4a22      	ldr	r2, [pc, #136]	; (8002e60 <HAL_PWREx_EnableOverDrive+0x98>)
 8002dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dde:	4b20      	ldr	r3, [pc, #128]	; (8002e60 <HAL_PWREx_EnableOverDrive+0x98>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002dea:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a1d      	ldr	r2, [pc, #116]	; (8002e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002df6:	f7fe fd9b 	bl	8001930 <HAL_GetTick>
 8002dfa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002dfc:	e009      	b.n	8002e12 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002dfe:	f7fe fd97 	bl	8001930 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e0c:	d901      	bls.n	8002e12 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e022      	b.n	8002e58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e12:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1e:	d1ee      	bne.n	8002dfe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e20:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a0f      	ldr	r2, [pc, #60]	; (8002e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e2c:	f7fe fd80 	bl	8001930 <HAL_GetTick>
 8002e30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e32:	e009      	b.n	8002e48 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e34:	f7fe fd7c 	bl	8001930 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e42:	d901      	bls.n	8002e48 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e007      	b.n	8002e58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e54:	d1ee      	bne.n	8002e34 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40007000 	.word	0x40007000

08002e68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e70:	2300      	movs	r3, #0
 8002e72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e29b      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 8087 	beq.w	8002f9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e8c:	4b96      	ldr	r3, [pc, #600]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d00c      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e98:	4b93      	ldr	r3, [pc, #588]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 030c 	and.w	r3, r3, #12
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d112      	bne.n	8002eca <HAL_RCC_OscConfig+0x62>
 8002ea4:	4b90      	ldr	r3, [pc, #576]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eb0:	d10b      	bne.n	8002eca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb2:	4b8d      	ldr	r3, [pc, #564]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d06c      	beq.n	8002f98 <HAL_RCC_OscConfig+0x130>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d168      	bne.n	8002f98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e275      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed2:	d106      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x7a>
 8002ed4:	4b84      	ldr	r3, [pc, #528]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a83      	ldr	r2, [pc, #524]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	e02e      	b.n	8002f40 <HAL_RCC_OscConfig+0xd8>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x9c>
 8002eea:	4b7f      	ldr	r3, [pc, #508]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a7e      	ldr	r2, [pc, #504]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b7c      	ldr	r3, [pc, #496]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a7b      	ldr	r2, [pc, #492]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	e01d      	b.n	8002f40 <HAL_RCC_OscConfig+0xd8>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCC_OscConfig+0xc0>
 8002f0e:	4b76      	ldr	r3, [pc, #472]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a75      	ldr	r2, [pc, #468]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	4b73      	ldr	r3, [pc, #460]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a72      	ldr	r2, [pc, #456]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	e00b      	b.n	8002f40 <HAL_RCC_OscConfig+0xd8>
 8002f28:	4b6f      	ldr	r3, [pc, #444]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a6e      	ldr	r2, [pc, #440]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	4b6c      	ldr	r3, [pc, #432]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a6b      	ldr	r2, [pc, #428]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d013      	beq.n	8002f70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fcf2 	bl	8001930 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f50:	f7fe fcee 	bl	8001930 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	; 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e229      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f62:	4b61      	ldr	r3, [pc, #388]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0xe8>
 8002f6e:	e014      	b.n	8002f9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fe fcde 	bl	8001930 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f78:	f7fe fcda 	bl	8001930 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	; 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e215      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8a:	4b57      	ldr	r3, [pc, #348]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x110>
 8002f96:	e000      	b.n	8002f9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d069      	beq.n	800307a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fa6:	4b50      	ldr	r3, [pc, #320]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00b      	beq.n	8002fca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fb2:	4b4d      	ldr	r3, [pc, #308]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d11c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x190>
 8002fbe:	4b4a      	ldr	r3, [pc, #296]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d116      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fca:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d005      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x17a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d001      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e1e9      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe2:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	493d      	ldr	r1, [pc, #244]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff6:	e040      	b.n	800307a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d023      	beq.n	8003048 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003000:	4b39      	ldr	r3, [pc, #228]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a38      	ldr	r2, [pc, #224]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fe fc90 	bl	8001930 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003014:	f7fe fc8c 	bl	8001930 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e1c7      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003026:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003032:	4b2d      	ldr	r3, [pc, #180]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4929      	ldr	r1, [pc, #164]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
 8003046:	e018      	b.n	800307a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a26      	ldr	r2, [pc, #152]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 800304e:	f023 0301 	bic.w	r3, r3, #1
 8003052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe fc6c 	bl	8001930 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305c:	f7fe fc68 	bl	8001930 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e1a3      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306e:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d038      	beq.n	80030f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d019      	beq.n	80030c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308e:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8003090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003092:	4a15      	ldr	r2, [pc, #84]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309a:	f7fe fc49 	bl	8001930 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a2:	f7fe fc45 	bl	8001930 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e180      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 80030b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x23a>
 80030c0:	e01a      	b.n	80030f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c2:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 80030c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c6:	4a08      	ldr	r2, [pc, #32]	; (80030e8 <HAL_RCC_OscConfig+0x280>)
 80030c8:	f023 0301 	bic.w	r3, r3, #1
 80030cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ce:	f7fe fc2f 	bl	8001930 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d4:	e00a      	b.n	80030ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d6:	f7fe fc2b 	bl	8001930 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d903      	bls.n	80030ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e166      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
 80030e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ec:	4b92      	ldr	r3, [pc, #584]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80030ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1ee      	bne.n	80030d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80a4 	beq.w	800324e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003106:	4b8c      	ldr	r3, [pc, #560]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10d      	bne.n	800312e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003112:	4b89      	ldr	r3, [pc, #548]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	4a88      	ldr	r2, [pc, #544]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311c:	6413      	str	r3, [r2, #64]	; 0x40
 800311e:	4b86      	ldr	r3, [pc, #536]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312a:	2301      	movs	r3, #1
 800312c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800312e:	4b83      	ldr	r3, [pc, #524]	; (800333c <HAL_RCC_OscConfig+0x4d4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d118      	bne.n	800316c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800313a:	4b80      	ldr	r3, [pc, #512]	; (800333c <HAL_RCC_OscConfig+0x4d4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a7f      	ldr	r2, [pc, #508]	; (800333c <HAL_RCC_OscConfig+0x4d4>)
 8003140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003146:	f7fe fbf3 	bl	8001930 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314e:	f7fe fbef 	bl	8001930 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b64      	cmp	r3, #100	; 0x64
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e12a      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003160:	4b76      	ldr	r3, [pc, #472]	; (800333c <HAL_RCC_OscConfig+0x4d4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x31a>
 8003174:	4b70      	ldr	r3, [pc, #448]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003178:	4a6f      	ldr	r2, [pc, #444]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6713      	str	r3, [r2, #112]	; 0x70
 8003180:	e02d      	b.n	80031de <HAL_RCC_OscConfig+0x376>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x33c>
 800318a:	4b6b      	ldr	r3, [pc, #428]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	4a6a      	ldr	r2, [pc, #424]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003190:	f023 0301 	bic.w	r3, r3, #1
 8003194:	6713      	str	r3, [r2, #112]	; 0x70
 8003196:	4b68      	ldr	r3, [pc, #416]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	4a67      	ldr	r2, [pc, #412]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 800319c:	f023 0304 	bic.w	r3, r3, #4
 80031a0:	6713      	str	r3, [r2, #112]	; 0x70
 80031a2:	e01c      	b.n	80031de <HAL_RCC_OscConfig+0x376>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	d10c      	bne.n	80031c6 <HAL_RCC_OscConfig+0x35e>
 80031ac:	4b62      	ldr	r3, [pc, #392]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	4a61      	ldr	r2, [pc, #388]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80031b2:	f043 0304 	orr.w	r3, r3, #4
 80031b6:	6713      	str	r3, [r2, #112]	; 0x70
 80031b8:	4b5f      	ldr	r3, [pc, #380]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	4a5e      	ldr	r2, [pc, #376]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6713      	str	r3, [r2, #112]	; 0x70
 80031c4:	e00b      	b.n	80031de <HAL_RCC_OscConfig+0x376>
 80031c6:	4b5c      	ldr	r3, [pc, #368]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ca:	4a5b      	ldr	r2, [pc, #364]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80031cc:	f023 0301 	bic.w	r3, r3, #1
 80031d0:	6713      	str	r3, [r2, #112]	; 0x70
 80031d2:	4b59      	ldr	r3, [pc, #356]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	4a58      	ldr	r2, [pc, #352]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80031d8:	f023 0304 	bic.w	r3, r3, #4
 80031dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d015      	beq.n	8003212 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7fe fba3 	bl	8001930 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fe fb9f 	bl	8001930 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0d8      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003204:	4b4c      	ldr	r3, [pc, #304]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ee      	beq.n	80031ee <HAL_RCC_OscConfig+0x386>
 8003210:	e014      	b.n	800323c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003212:	f7fe fb8d 	bl	8001930 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fe fb89 	bl	8001930 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0c2      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003230:	4b41      	ldr	r3, [pc, #260]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1ee      	bne.n	800321a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d105      	bne.n	800324e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003242:	4b3d      	ldr	r3, [pc, #244]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	4a3c      	ldr	r2, [pc, #240]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80ae 	beq.w	80033b4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003258:	4b37      	ldr	r3, [pc, #220]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b08      	cmp	r3, #8
 8003262:	d06d      	beq.n	8003340 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d14b      	bne.n	8003304 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326c:	4b32      	ldr	r3, [pc, #200]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a31      	ldr	r2, [pc, #196]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7fe fb5a 	bl	8001930 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003280:	f7fe fb56 	bl	8001930 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e091      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003292:	4b29      	ldr	r3, [pc, #164]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69da      	ldr	r2, [r3, #28]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	019b      	lsls	r3, r3, #6
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	085b      	lsrs	r3, r3, #1
 80032b6:	3b01      	subs	r3, #1
 80032b8:	041b      	lsls	r3, r3, #16
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	061b      	lsls	r3, r3, #24
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	071b      	lsls	r3, r3, #28
 80032ca:	491b      	ldr	r1, [pc, #108]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a18      	ldr	r2, [pc, #96]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80032d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fe fb28 	bl	8001930 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e4:	f7fe fb24 	bl	8001930 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e05f      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f6:	4b10      	ldr	r3, [pc, #64]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0x47c>
 8003302:	e057      	b.n	80033b4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a0b      	ldr	r2, [pc, #44]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 800330a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800330e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7fe fb0e 	bl	8001930 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003318:	f7fe fb0a 	bl	8001930 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e045      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332a:	4b03      	ldr	r3, [pc, #12]	; (8003338 <HAL_RCC_OscConfig+0x4d0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x4b0>
 8003336:	e03d      	b.n	80033b4 <HAL_RCC_OscConfig+0x54c>
 8003338:	40023800 	.word	0x40023800
 800333c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003340:	4b1f      	ldr	r3, [pc, #124]	; (80033c0 <HAL_RCC_OscConfig+0x558>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d030      	beq.n	80033b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003358:	429a      	cmp	r2, r3
 800335a:	d129      	bne.n	80033b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003366:	429a      	cmp	r2, r3
 8003368:	d122      	bne.n	80033b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003370:	4013      	ands	r3, r2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003376:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003378:	4293      	cmp	r3, r2
 800337a:	d119      	bne.n	80033b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	085b      	lsrs	r3, r3, #1
 8003388:	3b01      	subs	r3, #1
 800338a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800338c:	429a      	cmp	r2, r3
 800338e:	d10f      	bne.n	80033b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800339c:	429a      	cmp	r2, r3
 800339e:	d107      	bne.n	80033b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800

080033c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0d0      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033dc:	4b6a      	ldr	r3, [pc, #424]	; (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d910      	bls.n	800340c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ea:	4b67      	ldr	r3, [pc, #412]	; (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 020f 	bic.w	r2, r3, #15
 80033f2:	4965      	ldr	r1, [pc, #404]	; (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fa:	4b63      	ldr	r3, [pc, #396]	; (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0b8      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003424:	4b59      	ldr	r3, [pc, #356]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4a58      	ldr	r2, [pc, #352]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 800342a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800342e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800343c:	4b53      	ldr	r3, [pc, #332]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4a52      	ldr	r2, [pc, #328]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003442:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003446:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003448:	4b50      	ldr	r3, [pc, #320]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	494d      	ldr	r1, [pc, #308]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d040      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	4b47      	ldr	r3, [pc, #284]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d115      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e07f      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d107      	bne.n	8003496 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003486:	4b41      	ldr	r3, [pc, #260]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e073      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003496:	4b3d      	ldr	r3, [pc, #244]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e06b      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a6:	4b39      	ldr	r3, [pc, #228]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f023 0203 	bic.w	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	4936      	ldr	r1, [pc, #216]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b8:	f7fe fa3a 	bl	8001930 <HAL_GetTick>
 80034bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c0:	f7fe fa36 	bl	8001930 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e053      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d6:	4b2d      	ldr	r3, [pc, #180]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 020c 	and.w	r2, r3, #12
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d1eb      	bne.n	80034c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034e8:	4b27      	ldr	r3, [pc, #156]	; (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d210      	bcs.n	8003518 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b24      	ldr	r3, [pc, #144]	; (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f023 020f 	bic.w	r2, r3, #15
 80034fe:	4922      	ldr	r1, [pc, #136]	; (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	4313      	orrs	r3, r2
 8003504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	4b20      	ldr	r3, [pc, #128]	; (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e032      	b.n	800357e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003524:	4b19      	ldr	r3, [pc, #100]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4916      	ldr	r1, [pc, #88]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d009      	beq.n	8003556 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003542:	4b12      	ldr	r3, [pc, #72]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	490e      	ldr	r1, [pc, #56]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003556:	f000 f821 	bl	800359c <HAL_RCC_GetSysClockFreq>
 800355a:	4602      	mov	r2, r0
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_RCC_ClockConfig+0x1c8>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	490a      	ldr	r1, [pc, #40]	; (8003590 <HAL_RCC_ClockConfig+0x1cc>)
 8003568:	5ccb      	ldrb	r3, [r1, r3]
 800356a:	fa22 f303 	lsr.w	r3, r2, r3
 800356e:	4a09      	ldr	r2, [pc, #36]	; (8003594 <HAL_RCC_ClockConfig+0x1d0>)
 8003570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <HAL_RCC_ClockConfig+0x1d4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe f996 	bl	80018a8 <HAL_InitTick>

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023c00 	.word	0x40023c00
 800358c:	40023800 	.word	0x40023800
 8003590:	08007054 	.word	0x08007054
 8003594:	20000050 	.word	0x20000050
 8003598:	20000054 	.word	0x20000054

0800359c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800359c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035a0:	b094      	sub	sp, #80	; 0x50
 80035a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	647b      	str	r3, [r7, #68]	; 0x44
 80035a8:	2300      	movs	r3, #0
 80035aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035ac:	2300      	movs	r3, #0
 80035ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035b4:	4b79      	ldr	r3, [pc, #484]	; (800379c <HAL_RCC_GetSysClockFreq+0x200>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d00d      	beq.n	80035dc <HAL_RCC_GetSysClockFreq+0x40>
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	f200 80e1 	bhi.w	8003788 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x34>
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d003      	beq.n	80035d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ce:	e0db      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035d0:	4b73      	ldr	r3, [pc, #460]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80035d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035d4:	e0db      	b.n	800378e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035d6:	4b73      	ldr	r3, [pc, #460]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80035d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035da:	e0d8      	b.n	800378e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035dc:	4b6f      	ldr	r3, [pc, #444]	; (800379c <HAL_RCC_GetSysClockFreq+0x200>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80035e6:	4b6d      	ldr	r3, [pc, #436]	; (800379c <HAL_RCC_GetSysClockFreq+0x200>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d063      	beq.n	80036ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f2:	4b6a      	ldr	r3, [pc, #424]	; (800379c <HAL_RCC_GetSysClockFreq+0x200>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	099b      	lsrs	r3, r3, #6
 80035f8:	2200      	movs	r2, #0
 80035fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80035fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003604:	633b      	str	r3, [r7, #48]	; 0x30
 8003606:	2300      	movs	r3, #0
 8003608:	637b      	str	r3, [r7, #52]	; 0x34
 800360a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800360e:	4622      	mov	r2, r4
 8003610:	462b      	mov	r3, r5
 8003612:	f04f 0000 	mov.w	r0, #0
 8003616:	f04f 0100 	mov.w	r1, #0
 800361a:	0159      	lsls	r1, r3, #5
 800361c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003620:	0150      	lsls	r0, r2, #5
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4621      	mov	r1, r4
 8003628:	1a51      	subs	r1, r2, r1
 800362a:	6139      	str	r1, [r7, #16]
 800362c:	4629      	mov	r1, r5
 800362e:	eb63 0301 	sbc.w	r3, r3, r1
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003640:	4659      	mov	r1, fp
 8003642:	018b      	lsls	r3, r1, #6
 8003644:	4651      	mov	r1, sl
 8003646:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800364a:	4651      	mov	r1, sl
 800364c:	018a      	lsls	r2, r1, #6
 800364e:	4651      	mov	r1, sl
 8003650:	ebb2 0801 	subs.w	r8, r2, r1
 8003654:	4659      	mov	r1, fp
 8003656:	eb63 0901 	sbc.w	r9, r3, r1
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003666:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800366a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800366e:	4690      	mov	r8, r2
 8003670:	4699      	mov	r9, r3
 8003672:	4623      	mov	r3, r4
 8003674:	eb18 0303 	adds.w	r3, r8, r3
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	462b      	mov	r3, r5
 800367c:	eb49 0303 	adc.w	r3, r9, r3
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800368e:	4629      	mov	r1, r5
 8003690:	024b      	lsls	r3, r1, #9
 8003692:	4621      	mov	r1, r4
 8003694:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003698:	4621      	mov	r1, r4
 800369a:	024a      	lsls	r2, r1, #9
 800369c:	4610      	mov	r0, r2
 800369e:	4619      	mov	r1, r3
 80036a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036a2:	2200      	movs	r2, #0
 80036a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036ac:	f7fc fe18 	bl	80002e0 <__aeabi_uldivmod>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4613      	mov	r3, r2
 80036b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036b8:	e058      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ba:	4b38      	ldr	r3, [pc, #224]	; (800379c <HAL_RCC_GetSysClockFreq+0x200>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	099b      	lsrs	r3, r3, #6
 80036c0:	2200      	movs	r2, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	4611      	mov	r1, r2
 80036c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036ca:	623b      	str	r3, [r7, #32]
 80036cc:	2300      	movs	r3, #0
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
 80036d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036d4:	4642      	mov	r2, r8
 80036d6:	464b      	mov	r3, r9
 80036d8:	f04f 0000 	mov.w	r0, #0
 80036dc:	f04f 0100 	mov.w	r1, #0
 80036e0:	0159      	lsls	r1, r3, #5
 80036e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036e6:	0150      	lsls	r0, r2, #5
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4641      	mov	r1, r8
 80036ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80036f2:	4649      	mov	r1, r9
 80036f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003704:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003708:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800370c:	ebb2 040a 	subs.w	r4, r2, sl
 8003710:	eb63 050b 	sbc.w	r5, r3, fp
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	00eb      	lsls	r3, r5, #3
 800371e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003722:	00e2      	lsls	r2, r4, #3
 8003724:	4614      	mov	r4, r2
 8003726:	461d      	mov	r5, r3
 8003728:	4643      	mov	r3, r8
 800372a:	18e3      	adds	r3, r4, r3
 800372c:	603b      	str	r3, [r7, #0]
 800372e:	464b      	mov	r3, r9
 8003730:	eb45 0303 	adc.w	r3, r5, r3
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003742:	4629      	mov	r1, r5
 8003744:	028b      	lsls	r3, r1, #10
 8003746:	4621      	mov	r1, r4
 8003748:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800374c:	4621      	mov	r1, r4
 800374e:	028a      	lsls	r2, r1, #10
 8003750:	4610      	mov	r0, r2
 8003752:	4619      	mov	r1, r3
 8003754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003756:	2200      	movs	r2, #0
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	61fa      	str	r2, [r7, #28]
 800375c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003760:	f7fc fdbe 	bl	80002e0 <__aeabi_uldivmod>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4613      	mov	r3, r2
 800376a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCC_GetSysClockFreq+0x200>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	0c1b      	lsrs	r3, r3, #16
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	3301      	adds	r3, #1
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800377c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800377e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003780:	fbb2 f3f3 	udiv	r3, r2, r3
 8003784:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003786:	e002      	b.n	800378e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800378a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800378c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800378e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003790:	4618      	mov	r0, r3
 8003792:	3750      	adds	r7, #80	; 0x50
 8003794:	46bd      	mov	sp, r7
 8003796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800379a:	bf00      	nop
 800379c:	40023800 	.word	0x40023800
 80037a0:	00f42400 	.word	0x00f42400
 80037a4:	007a1200 	.word	0x007a1200

080037a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ae:	681b      	ldr	r3, [r3, #0]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20000050 	.word	0x20000050

080037c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037c4:	f7ff fff0 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	0a9b      	lsrs	r3, r3, #10
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4903      	ldr	r1, [pc, #12]	; (80037e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40023800 	.word	0x40023800
 80037e4:	08007064 	.word	0x08007064

080037e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037ec:	f7ff ffdc 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037f0:	4602      	mov	r2, r0
 80037f2:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	0b5b      	lsrs	r3, r3, #13
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	4903      	ldr	r1, [pc, #12]	; (800380c <HAL_RCC_GetPCLK2Freq+0x24>)
 80037fe:	5ccb      	ldrb	r3, [r1, r3]
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003804:	4618      	mov	r0, r3
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40023800 	.word	0x40023800
 800380c:	08007064 	.word	0x08007064

08003810 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d012      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003838:	4b69      	ldr	r3, [pc, #420]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	4a68      	ldr	r2, [pc, #416]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003842:	6093      	str	r3, [r2, #8]
 8003844:	4b66      	ldr	r3, [pc, #408]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384c:	4964      	ldr	r1, [pc, #400]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800385a:	2301      	movs	r3, #1
 800385c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d017      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800386a:	4b5d      	ldr	r3, [pc, #372]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003870:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003878:	4959      	ldr	r1, [pc, #356]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003888:	d101      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800388a:	2301      	movs	r3, #1
 800388c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003896:	2301      	movs	r3, #1
 8003898:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d017      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038a6:	4b4e      	ldr	r3, [pc, #312]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	494a      	ldr	r1, [pc, #296]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038c4:	d101      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80038c6:	2301      	movs	r3, #1
 80038c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80038d2:	2301      	movs	r3, #1
 80038d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80038e2:	2301      	movs	r3, #1
 80038e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 808b 	beq.w	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038f4:	4b3a      	ldr	r3, [pc, #232]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	4a39      	ldr	r2, [pc, #228]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003900:	4b37      	ldr	r3, [pc, #220]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800390c:	4b35      	ldr	r3, [pc, #212]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a34      	ldr	r2, [pc, #208]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003918:	f7fe f80a 	bl	8001930 <HAL_GetTick>
 800391c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003920:	f7fe f806 	bl	8001930 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	; 0x64
 800392c:	d901      	bls.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e38f      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003932:	4b2c      	ldr	r3, [pc, #176]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800393e:	4b28      	ldr	r3, [pc, #160]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003946:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d035      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	429a      	cmp	r2, r3
 800395a:	d02e      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800395c:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003964:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003966:	4b1e      	ldr	r3, [pc, #120]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003972:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	4a1a      	ldr	r2, [pc, #104]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800397e:	4a18      	ldr	r2, [pc, #96]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003984:	4b16      	ldr	r3, [pc, #88]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b01      	cmp	r3, #1
 800398e:	d114      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7fd ffce 	bl	8001930 <HAL_GetTick>
 8003994:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003996:	e00a      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003998:	f7fd ffca 	bl	8001930 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e351      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ae:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0ee      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039c6:	d111      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039d4:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039d6:	400b      	ands	r3, r1
 80039d8:	4901      	ldr	r1, [pc, #4]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	608b      	str	r3, [r1, #8]
 80039de:	e00b      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40007000 	.word	0x40007000
 80039e8:	0ffffcff 	.word	0x0ffffcff
 80039ec:	4bac      	ldr	r3, [pc, #688]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	4aab      	ldr	r2, [pc, #684]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039f6:	6093      	str	r3, [r2, #8]
 80039f8:	4ba9      	ldr	r3, [pc, #676]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a04:	49a6      	ldr	r1, [pc, #664]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d010      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a16:	4ba2      	ldr	r3, [pc, #648]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a1c:	4aa0      	ldr	r2, [pc, #640]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a26:	4b9e      	ldr	r3, [pc, #632]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	499b      	ldr	r1, [pc, #620]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a44:	4b96      	ldr	r3, [pc, #600]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a52:	4993      	ldr	r1, [pc, #588]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a66:	4b8e      	ldr	r3, [pc, #568]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a74:	498a      	ldr	r1, [pc, #552]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a88:	4b85      	ldr	r3, [pc, #532]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a96:	4982      	ldr	r1, [pc, #520]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003aaa:	4b7d      	ldr	r3, [pc, #500]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab8:	4979      	ldr	r1, [pc, #484]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003acc:	4b74      	ldr	r3, [pc, #464]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	f023 0203 	bic.w	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	4971      	ldr	r1, [pc, #452]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aee:	4b6c      	ldr	r3, [pc, #432]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af4:	f023 020c 	bic.w	r2, r3, #12
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afc:	4968      	ldr	r1, [pc, #416]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b10:	4b63      	ldr	r3, [pc, #396]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1e:	4960      	ldr	r1, [pc, #384]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b32:	4b5b      	ldr	r3, [pc, #364]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b38:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b40:	4957      	ldr	r1, [pc, #348]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b54:	4b52      	ldr	r3, [pc, #328]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b62:	494f      	ldr	r1, [pc, #316]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b76:	4b4a      	ldr	r3, [pc, #296]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b84:	4946      	ldr	r1, [pc, #280]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b98:	4b41      	ldr	r3, [pc, #260]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba6:	493e      	ldr	r1, [pc, #248]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003bba:	4b39      	ldr	r3, [pc, #228]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc8:	4935      	ldr	r1, [pc, #212]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bdc:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bea:	492d      	ldr	r1, [pc, #180]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d011      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bfe:	4b28      	ldr	r3, [pc, #160]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c04:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c0c:	4924      	ldr	r1, [pc, #144]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c3e:	4b18      	ldr	r3, [pc, #96]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c44:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4c:	4914      	ldr	r1, [pc, #80]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00b      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c60:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c66:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c70:	490b      	ldr	r1, [pc, #44]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00f      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c94:	4902      	ldr	r1, [pc, #8]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c9c:	e002      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00b      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cb0:	4b8a      	ldr	r3, [pc, #552]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc0:	4986      	ldr	r1, [pc, #536]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00b      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003cd4:	4b81      	ldr	r3, [pc, #516]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ce4:	497d      	ldr	r1, [pc, #500]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d006      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80d6 	beq.w	8003eac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d00:	4b76      	ldr	r3, [pc, #472]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a75      	ldr	r2, [pc, #468]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0c:	f7fd fe10 	bl	8001930 <HAL_GetTick>
 8003d10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d14:	f7fd fe0c 	bl	8001930 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e195      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d26:	4b6d      	ldr	r3, [pc, #436]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d021      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d11d      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d46:	4b65      	ldr	r3, [pc, #404]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d4c:	0c1b      	lsrs	r3, r3, #16
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d54:	4b61      	ldr	r3, [pc, #388]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d5a:	0e1b      	lsrs	r3, r3, #24
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	019a      	lsls	r2, r3, #6
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	041b      	lsls	r3, r3, #16
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	061b      	lsls	r3, r3, #24
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	071b      	lsls	r3, r3, #28
 8003d7a:	4958      	ldr	r1, [pc, #352]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d004      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d96:	d00a      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d02e      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dac:	d129      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dae:	4b4b      	ldr	r3, [pc, #300]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db4:	0c1b      	lsrs	r3, r3, #16
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dbc:	4b47      	ldr	r3, [pc, #284]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc2:	0f1b      	lsrs	r3, r3, #28
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	019a      	lsls	r2, r3, #6
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	041b      	lsls	r3, r3, #16
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	061b      	lsls	r3, r3, #24
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	071b      	lsls	r3, r3, #28
 8003de2:	493e      	ldr	r1, [pc, #248]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003dea:	4b3c      	ldr	r3, [pc, #240]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003df0:	f023 021f 	bic.w	r2, r3, #31
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	4938      	ldr	r1, [pc, #224]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01d      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e0e:	4b33      	ldr	r3, [pc, #204]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e14:	0e1b      	lsrs	r3, r3, #24
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e1c:	4b2f      	ldr	r3, [pc, #188]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e22:	0f1b      	lsrs	r3, r3, #28
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	019a      	lsls	r2, r3, #6
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	431a      	orrs	r2, r3
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	061b      	lsls	r3, r3, #24
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	071b      	lsls	r3, r3, #28
 8003e42:	4926      	ldr	r1, [pc, #152]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d011      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	019a      	lsls	r2, r3, #6
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	041b      	lsls	r3, r3, #16
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	061b      	lsls	r3, r3, #24
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	071b      	lsls	r3, r3, #28
 8003e72:	491a      	ldr	r1, [pc, #104]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e7a:	4b18      	ldr	r3, [pc, #96]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a17      	ldr	r2, [pc, #92]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e86:	f7fd fd53 	bl	8001930 <HAL_GetTick>
 8003e8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e8e:	f7fd fd4f 	bl	8001930 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b64      	cmp	r3, #100	; 0x64
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e0d8      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ea0:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f0      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	f040 80ce 	bne.w	8004050 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003eb4:	4b09      	ldr	r3, [pc, #36]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a08      	ldr	r2, [pc, #32]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec0:	f7fd fd36 	bl	8001930 <HAL_GetTick>
 8003ec4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ec6:	e00b      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ec8:	f7fd fd32 	bl	8001930 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	; 0x64
 8003ed4:	d904      	bls.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e0bb      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003eda:	bf00      	nop
 8003edc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ee0:	4b5e      	ldr	r3, [pc, #376]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eec:	d0ec      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d02e      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d12a      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f16:	4b51      	ldr	r3, [pc, #324]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f24:	4b4d      	ldr	r3, [pc, #308]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	0f1b      	lsrs	r3, r3, #28
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	019a      	lsls	r2, r3, #6
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	041b      	lsls	r3, r3, #16
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	061b      	lsls	r3, r3, #24
 8003f44:	431a      	orrs	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	071b      	lsls	r3, r3, #28
 8003f4a:	4944      	ldr	r1, [pc, #272]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f52:	4b42      	ldr	r3, [pc, #264]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f58:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	3b01      	subs	r3, #1
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	493d      	ldr	r1, [pc, #244]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d022      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f80:	d11d      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f82:	4b36      	ldr	r3, [pc, #216]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	0e1b      	lsrs	r3, r3, #24
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f90:	4b32      	ldr	r3, [pc, #200]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f96:	0f1b      	lsrs	r3, r3, #28
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	019a      	lsls	r2, r3, #6
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	041b      	lsls	r3, r3, #16
 8003faa:	431a      	orrs	r2, r3
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	061b      	lsls	r3, r3, #24
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	071b      	lsls	r3, r3, #28
 8003fb6:	4929      	ldr	r1, [pc, #164]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d028      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fca:	4b24      	ldr	r3, [pc, #144]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd0:	0e1b      	lsrs	r3, r3, #24
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fd8:	4b20      	ldr	r3, [pc, #128]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	0c1b      	lsrs	r3, r3, #16
 8003fe0:	f003 0303 	and.w	r3, r3, #3
 8003fe4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	019a      	lsls	r2, r3, #6
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	041b      	lsls	r3, r3, #16
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	061b      	lsls	r3, r3, #24
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	071b      	lsls	r3, r3, #28
 8003ffe:	4917      	ldr	r1, [pc, #92]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004006:	4b15      	ldr	r3, [pc, #84]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800400c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	4911      	ldr	r1, [pc, #68]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800401c:	4b0f      	ldr	r3, [pc, #60]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a0e      	ldr	r2, [pc, #56]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004028:	f7fd fc82 	bl	8001930 <HAL_GetTick>
 800402c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004030:	f7fd fc7e 	bl	8001930 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	; 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e007      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004042:	4b06      	ldr	r3, [pc, #24]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800404a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800404e:	d1ef      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800

08004060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e049      	b.n	8004106 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fd fa72 	bl	8001570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	4619      	mov	r1, r3
 800409e:	4610      	mov	r0, r2
 80040a0:	f000 f9f6 	bl	8004490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d001      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e054      	b.n	80041d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0201 	orr.w	r2, r2, #1
 800413e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a26      	ldr	r2, [pc, #152]	; (80041e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d022      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004152:	d01d      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a22      	ldr	r2, [pc, #136]	; (80041e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d018      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a21      	ldr	r2, [pc, #132]	; (80041e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d013      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a1f      	ldr	r2, [pc, #124]	; (80041ec <HAL_TIM_Base_Start_IT+0xdc>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00e      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1e      	ldr	r2, [pc, #120]	; (80041f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d009      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a1c      	ldr	r2, [pc, #112]	; (80041f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d004      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x80>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a1b      	ldr	r2, [pc, #108]	; (80041f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d115      	bne.n	80041bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	4b19      	ldr	r3, [pc, #100]	; (80041fc <HAL_TIM_Base_Start_IT+0xec>)
 8004198:	4013      	ands	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b06      	cmp	r3, #6
 80041a0:	d015      	beq.n	80041ce <HAL_TIM_Base_Start_IT+0xbe>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a8:	d011      	beq.n	80041ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0201 	orr.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ba:	e008      	b.n	80041ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e000      	b.n	80041d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40010000 	.word	0x40010000
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800
 80041ec:	40000c00 	.word	0x40000c00
 80041f0:	40010400 	.word	0x40010400
 80041f4:	40014000 	.word	0x40014000
 80041f8:	40001800 	.word	0x40001800
 80041fc:	00010007 	.word	0x00010007

08004200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b02      	cmp	r3, #2
 8004214:	d122      	bne.n	800425c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b02      	cmp	r3, #2
 8004222:	d11b      	bne.n	800425c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f06f 0202 	mvn.w	r2, #2
 800422c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f905 	bl	8004452 <HAL_TIM_IC_CaptureCallback>
 8004248:	e005      	b.n	8004256 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f8f7 	bl	800443e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f908 	bl	8004466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b04      	cmp	r3, #4
 8004268:	d122      	bne.n	80042b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b04      	cmp	r3, #4
 8004276:	d11b      	bne.n	80042b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0204 	mvn.w	r2, #4
 8004280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2202      	movs	r2, #2
 8004286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f8db 	bl	8004452 <HAL_TIM_IC_CaptureCallback>
 800429c:	e005      	b.n	80042aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f8cd 	bl	800443e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f8de 	bl	8004466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d122      	bne.n	8004304 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d11b      	bne.n	8004304 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0208 	mvn.w	r2, #8
 80042d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2204      	movs	r2, #4
 80042da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f8b1 	bl	8004452 <HAL_TIM_IC_CaptureCallback>
 80042f0:	e005      	b.n	80042fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f8a3 	bl	800443e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f8b4 	bl	8004466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f003 0310 	and.w	r3, r3, #16
 800430e:	2b10      	cmp	r3, #16
 8004310:	d122      	bne.n	8004358 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b10      	cmp	r3, #16
 800431e:	d11b      	bne.n	8004358 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0210 	mvn.w	r2, #16
 8004328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2208      	movs	r2, #8
 800432e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f887 	bl	8004452 <HAL_TIM_IC_CaptureCallback>
 8004344:	e005      	b.n	8004352 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f879 	bl	800443e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f88a 	bl	8004466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b01      	cmp	r3, #1
 8004364:	d10e      	bne.n	8004384 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b01      	cmp	r3, #1
 8004372:	d107      	bne.n	8004384 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0201 	mvn.w	r2, #1
 800437c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fc ffec 	bl	800135c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438e:	2b80      	cmp	r3, #128	; 0x80
 8004390:	d10e      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439c:	2b80      	cmp	r3, #128	; 0x80
 800439e:	d107      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f9a8 	bl	8004700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043be:	d10e      	bne.n	80043de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ca:	2b80      	cmp	r3, #128	; 0x80
 80043cc:	d107      	bne.n	80043de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f99b 	bl	8004714 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e8:	2b40      	cmp	r3, #64	; 0x40
 80043ea:	d10e      	bne.n	800440a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f6:	2b40      	cmp	r3, #64	; 0x40
 80043f8:	d107      	bne.n	800440a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f838 	bl	800447a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b20      	cmp	r3, #32
 8004416:	d10e      	bne.n	8004436 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	2b20      	cmp	r3, #32
 8004424:	d107      	bne.n	8004436 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f06f 0220 	mvn.w	r2, #32
 800442e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f95b 	bl	80046ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
	...

08004490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a40      	ldr	r2, [pc, #256]	; (80045a4 <TIM_Base_SetConfig+0x114>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d013      	beq.n	80044d0 <TIM_Base_SetConfig+0x40>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ae:	d00f      	beq.n	80044d0 <TIM_Base_SetConfig+0x40>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a3d      	ldr	r2, [pc, #244]	; (80045a8 <TIM_Base_SetConfig+0x118>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00b      	beq.n	80044d0 <TIM_Base_SetConfig+0x40>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a3c      	ldr	r2, [pc, #240]	; (80045ac <TIM_Base_SetConfig+0x11c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d007      	beq.n	80044d0 <TIM_Base_SetConfig+0x40>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a3b      	ldr	r2, [pc, #236]	; (80045b0 <TIM_Base_SetConfig+0x120>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d003      	beq.n	80044d0 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a3a      	ldr	r2, [pc, #232]	; (80045b4 <TIM_Base_SetConfig+0x124>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d108      	bne.n	80044e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a2f      	ldr	r2, [pc, #188]	; (80045a4 <TIM_Base_SetConfig+0x114>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d02b      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f0:	d027      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a2c      	ldr	r2, [pc, #176]	; (80045a8 <TIM_Base_SetConfig+0x118>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d023      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a2b      	ldr	r2, [pc, #172]	; (80045ac <TIM_Base_SetConfig+0x11c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d01f      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2a      	ldr	r2, [pc, #168]	; (80045b0 <TIM_Base_SetConfig+0x120>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d01b      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a29      	ldr	r2, [pc, #164]	; (80045b4 <TIM_Base_SetConfig+0x124>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d017      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a28      	ldr	r2, [pc, #160]	; (80045b8 <TIM_Base_SetConfig+0x128>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a27      	ldr	r2, [pc, #156]	; (80045bc <TIM_Base_SetConfig+0x12c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00f      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a26      	ldr	r2, [pc, #152]	; (80045c0 <TIM_Base_SetConfig+0x130>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00b      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a25      	ldr	r2, [pc, #148]	; (80045c4 <TIM_Base_SetConfig+0x134>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d007      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a24      	ldr	r2, [pc, #144]	; (80045c8 <TIM_Base_SetConfig+0x138>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d003      	beq.n	8004542 <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a23      	ldr	r2, [pc, #140]	; (80045cc <TIM_Base_SetConfig+0x13c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d108      	bne.n	8004554 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a0a      	ldr	r2, [pc, #40]	; (80045a4 <TIM_Base_SetConfig+0x114>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d003      	beq.n	8004588 <TIM_Base_SetConfig+0xf8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a0c      	ldr	r2, [pc, #48]	; (80045b4 <TIM_Base_SetConfig+0x124>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d103      	bne.n	8004590 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	615a      	str	r2, [r3, #20]
}
 8004596:	bf00      	nop
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	40010000 	.word	0x40010000
 80045a8:	40000400 	.word	0x40000400
 80045ac:	40000800 	.word	0x40000800
 80045b0:	40000c00 	.word	0x40000c00
 80045b4:	40010400 	.word	0x40010400
 80045b8:	40014000 	.word	0x40014000
 80045bc:	40014400 	.word	0x40014400
 80045c0:	40014800 	.word	0x40014800
 80045c4:	40001800 	.word	0x40001800
 80045c8:	40001c00 	.word	0x40001c00
 80045cc:	40002000 	.word	0x40002000

080045d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e06d      	b.n	80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a30      	ldr	r2, [pc, #192]	; (80046d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d004      	beq.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a2f      	ldr	r2, [pc, #188]	; (80046d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d108      	bne.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004622:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004634:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a20      	ldr	r2, [pc, #128]	; (80046d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d022      	beq.n	8004698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465a:	d01d      	beq.n	8004698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a1d      	ldr	r2, [pc, #116]	; (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d018      	beq.n	8004698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1c      	ldr	r2, [pc, #112]	; (80046dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d013      	beq.n	8004698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a1a      	ldr	r2, [pc, #104]	; (80046e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00e      	beq.n	8004698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a15      	ldr	r2, [pc, #84]	; (80046d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d009      	beq.n	8004698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a16      	ldr	r2, [pc, #88]	; (80046e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d004      	beq.n	8004698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a15      	ldr	r2, [pc, #84]	; (80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d10c      	bne.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800469e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	40010000 	.word	0x40010000
 80046d4:	40010400 	.word	0x40010400
 80046d8:	40000400 	.word	0x40000400
 80046dc:	40000800 	.word	0x40000800
 80046e0:	40000c00 	.word	0x40000c00
 80046e4:	40014000 	.word	0x40014000
 80046e8:	40001800 	.word	0x40001800

080046ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e040      	b.n	80047bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fc ff66 	bl	800161c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2224      	movs	r2, #36	; 0x24
 8004754:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0201 	bic.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fbe0 	bl	8004f2c <UART_SetConfig>
 800476c:	4603      	mov	r3, r0
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e022      	b.n	80047bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fe38 	bl	80053f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 febf 	bl	8005538 <UART_CheckIdleState>
 80047ba:	4603      	mov	r3, r0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b08b      	sub	sp, #44	; 0x2c
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	4613      	mov	r3, r2
 80047d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d147      	bne.n	800486a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <HAL_UART_Transmit_IT+0x22>
 80047e0:	88fb      	ldrh	r3, [r7, #6]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e040      	b.n	800486c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	88fa      	ldrh	r2, [r7, #6]
 80047f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	88fa      	ldrh	r2, [r7, #6]
 80047fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2221      	movs	r2, #33	; 0x21
 8004812:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481c:	d107      	bne.n	800482e <HAL_UART_Transmit_IT+0x6a>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d103      	bne.n	800482e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4a13      	ldr	r2, [pc, #76]	; (8004878 <HAL_UART_Transmit_IT+0xb4>)
 800482a:	66da      	str	r2, [r3, #108]	; 0x6c
 800482c:	e002      	b.n	8004834 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4a12      	ldr	r2, [pc, #72]	; (800487c <HAL_UART_Transmit_IT+0xb8>)
 8004832:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	613b      	str	r3, [r7, #16]
   return(result);
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	623b      	str	r3, [r7, #32]
 8004854:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	69f9      	ldr	r1, [r7, #28]
 8004858:	6a3a      	ldr	r2, [r7, #32]
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e6      	bne.n	8004834 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	e000      	b.n	800486c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800486a:	2302      	movs	r3, #2
  }
}
 800486c:	4618      	mov	r0, r3
 800486e:	372c      	adds	r7, #44	; 0x2c
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	08005a97 	.word	0x08005a97
 800487c:	080059e1 	.word	0x080059e1

08004880 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b08a      	sub	sp, #40	; 0x28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	4613      	mov	r3, r2
 800488c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004894:	2b20      	cmp	r3, #32
 8004896:	d132      	bne.n	80048fe <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_UART_Receive_IT+0x24>
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e02b      	b.n	8004900 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d018      	beq.n	80048ee <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	e853 3f00 	ldrex	r3, [r3]
 80048c8:	613b      	str	r3, [r7, #16]
   return(result);
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	623b      	str	r3, [r7, #32]
 80048dc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048de:	69f9      	ldr	r1, [r7, #28]
 80048e0:	6a3a      	ldr	r2, [r7, #32]
 80048e2:	e841 2300 	strex	r3, r2, [r1]
 80048e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1e6      	bne.n	80048bc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80048ee:	88fb      	ldrh	r3, [r7, #6]
 80048f0:	461a      	mov	r2, r3
 80048f2:	68b9      	ldr	r1, [r7, #8]
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 ff33 	bl	8005760 <UART_Start_Receive_IT>
 80048fa:	4603      	mov	r3, r0
 80048fc:	e000      	b.n	8004900 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80048fe:	2302      	movs	r3, #2
  }
}
 8004900:	4618      	mov	r0, r3
 8004902:	3728      	adds	r7, #40	; 0x28
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b0ba      	sub	sp, #232	; 0xe8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800492e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004932:	f640 030f 	movw	r3, #2063	; 0x80f
 8004936:	4013      	ands	r3, r2
 8004938:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800493c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004940:	2b00      	cmp	r3, #0
 8004942:	d115      	bne.n	8004970 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00f      	beq.n	8004970 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b00      	cmp	r3, #0
 800495a:	d009      	beq.n	8004970 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 82ac 	beq.w	8004ebe <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	4798      	blx	r3
      }
      return;
 800496e:	e2a6      	b.n	8004ebe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004970:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 8117 	beq.w	8004ba8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800497a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004986:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800498a:	4b85      	ldr	r3, [pc, #532]	; (8004ba0 <HAL_UART_IRQHandler+0x298>)
 800498c:	4013      	ands	r3, r2
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 810a 	beq.w	8004ba8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d011      	beq.n	80049c4 <HAL_UART_IRQHandler+0xbc>
 80049a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00b      	beq.n	80049c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2201      	movs	r2, #1
 80049b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ba:	f043 0201 	orr.w	r2, r3, #1
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d011      	beq.n	80049f4 <HAL_UART_IRQHandler+0xec>
 80049d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00b      	beq.n	80049f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2202      	movs	r2, #2
 80049e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ea:	f043 0204 	orr.w	r2, r3, #4
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d011      	beq.n	8004a24 <HAL_UART_IRQHandler+0x11c>
 8004a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00b      	beq.n	8004a24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2204      	movs	r2, #4
 8004a12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a1a:	f043 0202 	orr.w	r2, r3, #2
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d017      	beq.n	8004a60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a34:	f003 0320 	and.w	r3, r3, #32
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d105      	bne.n	8004a48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00b      	beq.n	8004a60 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a56:	f043 0208 	orr.w	r2, r3, #8
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d012      	beq.n	8004a92 <HAL_UART_IRQHandler+0x18a>
 8004a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00c      	beq.n	8004a92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a88:	f043 0220 	orr.w	r2, r3, #32
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8212 	beq.w	8004ec2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00d      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004acc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ada:	2b40      	cmp	r3, #64	; 0x40
 8004adc:	d005      	beq.n	8004aea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ae2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d04f      	beq.n	8004b8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fefe 	bl	80058ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afa:	2b40      	cmp	r3, #64	; 0x40
 8004afc:	d141      	bne.n	8004b82 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3308      	adds	r3, #8
 8004b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b0c:	e853 3f00 	ldrex	r3, [r3]
 8004b10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3308      	adds	r3, #8
 8004b26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b3a:	e841 2300 	strex	r3, r2, [r1]
 8004b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1d9      	bne.n	8004afe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d013      	beq.n	8004b7a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b56:	4a13      	ldr	r2, [pc, #76]	; (8004ba4 <HAL_UART_IRQHandler+0x29c>)
 8004b58:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fd facb 	bl	80020fa <HAL_DMA_Abort_IT>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d017      	beq.n	8004b9a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b74:	4610      	mov	r0, r2
 8004b76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b78:	e00f      	b.n	8004b9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f9b6 	bl	8004eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b80:	e00b      	b.n	8004b9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f9b2 	bl	8004eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b88:	e007      	b.n	8004b9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f9ae 	bl	8004eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004b98:	e193      	b.n	8004ec2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b9a:	bf00      	nop
    return;
 8004b9c:	e191      	b.n	8004ec2 <HAL_UART_IRQHandler+0x5ba>
 8004b9e:	bf00      	nop
 8004ba0:	04000120 	.word	0x04000120
 8004ba4:	080059b5 	.word	0x080059b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	f040 814c 	bne.w	8004e4a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb6:	f003 0310 	and.w	r3, r3, #16
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 8145 	beq.w	8004e4a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bc4:	f003 0310 	and.w	r3, r3, #16
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 813e 	beq.w	8004e4a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2210      	movs	r2, #16
 8004bd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be0:	2b40      	cmp	r3, #64	; 0x40
 8004be2:	f040 80b6 	bne.w	8004d52 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bf2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 8165 	beq.w	8004ec6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c06:	429a      	cmp	r2, r3
 8004c08:	f080 815d 	bcs.w	8004ec6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c20:	f000 8086 	beq.w	8004d30 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c52:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c5e:	e841 2300 	strex	r3, r2, [r1]
 8004c62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1da      	bne.n	8004c24 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3308      	adds	r3, #8
 8004c74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c80:	f023 0301 	bic.w	r3, r3, #1
 8004c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c9e:	e841 2300 	strex	r3, r2, [r1]
 8004ca2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1e1      	bne.n	8004c6e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3308      	adds	r3, #8
 8004cb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cb4:	e853 3f00 	ldrex	r3, [r3]
 8004cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3308      	adds	r3, #8
 8004cca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1e3      	bne.n	8004caa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d00:	f023 0310 	bic.w	r3, r3, #16
 8004d04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d12:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d14:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e4      	bne.n	8004cf0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fd f975 	bl	800201a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	4619      	mov	r1, r3
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f8d8 	bl	8004f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d50:	e0b9      	b.n	8004ec6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 80ab 	beq.w	8004eca <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004d74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 80a6 	beq.w	8004eca <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004da0:	647b      	str	r3, [r7, #68]	; 0x44
 8004da2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e4      	bne.n	8004d7e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3308      	adds	r3, #8
 8004dba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	e853 3f00 	ldrex	r3, [r3]
 8004dc2:	623b      	str	r3, [r7, #32]
   return(result);
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3308      	adds	r3, #8
 8004dd4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dd8:	633a      	str	r2, [r7, #48]	; 0x30
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ddc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004de0:	e841 2300 	strex	r3, r2, [r1]
 8004de4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1e3      	bne.n	8004db4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f023 0310 	bic.w	r3, r3, #16
 8004e14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e22:	61fb      	str	r3, [r7, #28]
 8004e24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e26:	69b9      	ldr	r1, [r7, #24]
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	e841 2300 	strex	r3, r2, [r1]
 8004e2e:	617b      	str	r3, [r7, #20]
   return(result);
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1e4      	bne.n	8004e00 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e40:	4619      	mov	r1, r3
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f85c 	bl	8004f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e48:	e03f      	b.n	8004eca <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00e      	beq.n	8004e74 <HAL_UART_IRQHandler+0x56c>
 8004e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f853 	bl	8004f18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e72:	e02d      	b.n	8004ed0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00e      	beq.n	8004e9e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d01c      	beq.n	8004ece <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
    }
    return;
 8004e9c:	e017      	b.n	8004ece <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d012      	beq.n	8004ed0 <HAL_UART_IRQHandler+0x5c8>
 8004eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00c      	beq.n	8004ed0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fe4d 	bl	8005b56 <UART_EndTransmit_IT>
    return;
 8004ebc:	e008      	b.n	8004ed0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004ebe:	bf00      	nop
 8004ec0:	e006      	b.n	8004ed0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004ec2:	bf00      	nop
 8004ec4:	e004      	b.n	8004ed0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004ec6:	bf00      	nop
 8004ec8:	e002      	b.n	8004ed0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004eca:	bf00      	nop
 8004ecc:	e000      	b.n	8004ed0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004ece:	bf00      	nop
  }

}
 8004ed0:	37e8      	adds	r7, #232	; 0xe8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop

08004ed8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4ba6      	ldr	r3, [pc, #664]	; (80051f0 <UART_SetConfig+0x2c4>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	6979      	ldr	r1, [r7, #20]
 8004f60:	430b      	orrs	r3, r1
 8004f62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a94      	ldr	r2, [pc, #592]	; (80051f4 <UART_SetConfig+0x2c8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d120      	bne.n	8004fea <UART_SetConfig+0xbe>
 8004fa8:	4b93      	ldr	r3, [pc, #588]	; (80051f8 <UART_SetConfig+0x2cc>)
 8004faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d816      	bhi.n	8004fe4 <UART_SetConfig+0xb8>
 8004fb6:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <UART_SetConfig+0x90>)
 8004fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbc:	08004fcd 	.word	0x08004fcd
 8004fc0:	08004fd9 	.word	0x08004fd9
 8004fc4:	08004fd3 	.word	0x08004fd3
 8004fc8:	08004fdf 	.word	0x08004fdf
 8004fcc:	2301      	movs	r3, #1
 8004fce:	77fb      	strb	r3, [r7, #31]
 8004fd0:	e150      	b.n	8005274 <UART_SetConfig+0x348>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	77fb      	strb	r3, [r7, #31]
 8004fd6:	e14d      	b.n	8005274 <UART_SetConfig+0x348>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	77fb      	strb	r3, [r7, #31]
 8004fdc:	e14a      	b.n	8005274 <UART_SetConfig+0x348>
 8004fde:	2308      	movs	r3, #8
 8004fe0:	77fb      	strb	r3, [r7, #31]
 8004fe2:	e147      	b.n	8005274 <UART_SetConfig+0x348>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	77fb      	strb	r3, [r7, #31]
 8004fe8:	e144      	b.n	8005274 <UART_SetConfig+0x348>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a83      	ldr	r2, [pc, #524]	; (80051fc <UART_SetConfig+0x2d0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d132      	bne.n	800505a <UART_SetConfig+0x12e>
 8004ff4:	4b80      	ldr	r3, [pc, #512]	; (80051f8 <UART_SetConfig+0x2cc>)
 8004ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffa:	f003 030c 	and.w	r3, r3, #12
 8004ffe:	2b0c      	cmp	r3, #12
 8005000:	d828      	bhi.n	8005054 <UART_SetConfig+0x128>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <UART_SetConfig+0xdc>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	0800503d 	.word	0x0800503d
 800500c:	08005055 	.word	0x08005055
 8005010:	08005055 	.word	0x08005055
 8005014:	08005055 	.word	0x08005055
 8005018:	08005049 	.word	0x08005049
 800501c:	08005055 	.word	0x08005055
 8005020:	08005055 	.word	0x08005055
 8005024:	08005055 	.word	0x08005055
 8005028:	08005043 	.word	0x08005043
 800502c:	08005055 	.word	0x08005055
 8005030:	08005055 	.word	0x08005055
 8005034:	08005055 	.word	0x08005055
 8005038:	0800504f 	.word	0x0800504f
 800503c:	2300      	movs	r3, #0
 800503e:	77fb      	strb	r3, [r7, #31]
 8005040:	e118      	b.n	8005274 <UART_SetConfig+0x348>
 8005042:	2302      	movs	r3, #2
 8005044:	77fb      	strb	r3, [r7, #31]
 8005046:	e115      	b.n	8005274 <UART_SetConfig+0x348>
 8005048:	2304      	movs	r3, #4
 800504a:	77fb      	strb	r3, [r7, #31]
 800504c:	e112      	b.n	8005274 <UART_SetConfig+0x348>
 800504e:	2308      	movs	r3, #8
 8005050:	77fb      	strb	r3, [r7, #31]
 8005052:	e10f      	b.n	8005274 <UART_SetConfig+0x348>
 8005054:	2310      	movs	r3, #16
 8005056:	77fb      	strb	r3, [r7, #31]
 8005058:	e10c      	b.n	8005274 <UART_SetConfig+0x348>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a68      	ldr	r2, [pc, #416]	; (8005200 <UART_SetConfig+0x2d4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d120      	bne.n	80050a6 <UART_SetConfig+0x17a>
 8005064:	4b64      	ldr	r3, [pc, #400]	; (80051f8 <UART_SetConfig+0x2cc>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800506e:	2b30      	cmp	r3, #48	; 0x30
 8005070:	d013      	beq.n	800509a <UART_SetConfig+0x16e>
 8005072:	2b30      	cmp	r3, #48	; 0x30
 8005074:	d814      	bhi.n	80050a0 <UART_SetConfig+0x174>
 8005076:	2b20      	cmp	r3, #32
 8005078:	d009      	beq.n	800508e <UART_SetConfig+0x162>
 800507a:	2b20      	cmp	r3, #32
 800507c:	d810      	bhi.n	80050a0 <UART_SetConfig+0x174>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <UART_SetConfig+0x15c>
 8005082:	2b10      	cmp	r3, #16
 8005084:	d006      	beq.n	8005094 <UART_SetConfig+0x168>
 8005086:	e00b      	b.n	80050a0 <UART_SetConfig+0x174>
 8005088:	2300      	movs	r3, #0
 800508a:	77fb      	strb	r3, [r7, #31]
 800508c:	e0f2      	b.n	8005274 <UART_SetConfig+0x348>
 800508e:	2302      	movs	r3, #2
 8005090:	77fb      	strb	r3, [r7, #31]
 8005092:	e0ef      	b.n	8005274 <UART_SetConfig+0x348>
 8005094:	2304      	movs	r3, #4
 8005096:	77fb      	strb	r3, [r7, #31]
 8005098:	e0ec      	b.n	8005274 <UART_SetConfig+0x348>
 800509a:	2308      	movs	r3, #8
 800509c:	77fb      	strb	r3, [r7, #31]
 800509e:	e0e9      	b.n	8005274 <UART_SetConfig+0x348>
 80050a0:	2310      	movs	r3, #16
 80050a2:	77fb      	strb	r3, [r7, #31]
 80050a4:	e0e6      	b.n	8005274 <UART_SetConfig+0x348>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a56      	ldr	r2, [pc, #344]	; (8005204 <UART_SetConfig+0x2d8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d120      	bne.n	80050f2 <UART_SetConfig+0x1c6>
 80050b0:	4b51      	ldr	r3, [pc, #324]	; (80051f8 <UART_SetConfig+0x2cc>)
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050ba:	2bc0      	cmp	r3, #192	; 0xc0
 80050bc:	d013      	beq.n	80050e6 <UART_SetConfig+0x1ba>
 80050be:	2bc0      	cmp	r3, #192	; 0xc0
 80050c0:	d814      	bhi.n	80050ec <UART_SetConfig+0x1c0>
 80050c2:	2b80      	cmp	r3, #128	; 0x80
 80050c4:	d009      	beq.n	80050da <UART_SetConfig+0x1ae>
 80050c6:	2b80      	cmp	r3, #128	; 0x80
 80050c8:	d810      	bhi.n	80050ec <UART_SetConfig+0x1c0>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <UART_SetConfig+0x1a8>
 80050ce:	2b40      	cmp	r3, #64	; 0x40
 80050d0:	d006      	beq.n	80050e0 <UART_SetConfig+0x1b4>
 80050d2:	e00b      	b.n	80050ec <UART_SetConfig+0x1c0>
 80050d4:	2300      	movs	r3, #0
 80050d6:	77fb      	strb	r3, [r7, #31]
 80050d8:	e0cc      	b.n	8005274 <UART_SetConfig+0x348>
 80050da:	2302      	movs	r3, #2
 80050dc:	77fb      	strb	r3, [r7, #31]
 80050de:	e0c9      	b.n	8005274 <UART_SetConfig+0x348>
 80050e0:	2304      	movs	r3, #4
 80050e2:	77fb      	strb	r3, [r7, #31]
 80050e4:	e0c6      	b.n	8005274 <UART_SetConfig+0x348>
 80050e6:	2308      	movs	r3, #8
 80050e8:	77fb      	strb	r3, [r7, #31]
 80050ea:	e0c3      	b.n	8005274 <UART_SetConfig+0x348>
 80050ec:	2310      	movs	r3, #16
 80050ee:	77fb      	strb	r3, [r7, #31]
 80050f0:	e0c0      	b.n	8005274 <UART_SetConfig+0x348>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a44      	ldr	r2, [pc, #272]	; (8005208 <UART_SetConfig+0x2dc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d125      	bne.n	8005148 <UART_SetConfig+0x21c>
 80050fc:	4b3e      	ldr	r3, [pc, #248]	; (80051f8 <UART_SetConfig+0x2cc>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800510a:	d017      	beq.n	800513c <UART_SetConfig+0x210>
 800510c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005110:	d817      	bhi.n	8005142 <UART_SetConfig+0x216>
 8005112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005116:	d00b      	beq.n	8005130 <UART_SetConfig+0x204>
 8005118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800511c:	d811      	bhi.n	8005142 <UART_SetConfig+0x216>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <UART_SetConfig+0x1fe>
 8005122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005126:	d006      	beq.n	8005136 <UART_SetConfig+0x20a>
 8005128:	e00b      	b.n	8005142 <UART_SetConfig+0x216>
 800512a:	2300      	movs	r3, #0
 800512c:	77fb      	strb	r3, [r7, #31]
 800512e:	e0a1      	b.n	8005274 <UART_SetConfig+0x348>
 8005130:	2302      	movs	r3, #2
 8005132:	77fb      	strb	r3, [r7, #31]
 8005134:	e09e      	b.n	8005274 <UART_SetConfig+0x348>
 8005136:	2304      	movs	r3, #4
 8005138:	77fb      	strb	r3, [r7, #31]
 800513a:	e09b      	b.n	8005274 <UART_SetConfig+0x348>
 800513c:	2308      	movs	r3, #8
 800513e:	77fb      	strb	r3, [r7, #31]
 8005140:	e098      	b.n	8005274 <UART_SetConfig+0x348>
 8005142:	2310      	movs	r3, #16
 8005144:	77fb      	strb	r3, [r7, #31]
 8005146:	e095      	b.n	8005274 <UART_SetConfig+0x348>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a2f      	ldr	r2, [pc, #188]	; (800520c <UART_SetConfig+0x2e0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d125      	bne.n	800519e <UART_SetConfig+0x272>
 8005152:	4b29      	ldr	r3, [pc, #164]	; (80051f8 <UART_SetConfig+0x2cc>)
 8005154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005158:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800515c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005160:	d017      	beq.n	8005192 <UART_SetConfig+0x266>
 8005162:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005166:	d817      	bhi.n	8005198 <UART_SetConfig+0x26c>
 8005168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800516c:	d00b      	beq.n	8005186 <UART_SetConfig+0x25a>
 800516e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005172:	d811      	bhi.n	8005198 <UART_SetConfig+0x26c>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <UART_SetConfig+0x254>
 8005178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800517c:	d006      	beq.n	800518c <UART_SetConfig+0x260>
 800517e:	e00b      	b.n	8005198 <UART_SetConfig+0x26c>
 8005180:	2301      	movs	r3, #1
 8005182:	77fb      	strb	r3, [r7, #31]
 8005184:	e076      	b.n	8005274 <UART_SetConfig+0x348>
 8005186:	2302      	movs	r3, #2
 8005188:	77fb      	strb	r3, [r7, #31]
 800518a:	e073      	b.n	8005274 <UART_SetConfig+0x348>
 800518c:	2304      	movs	r3, #4
 800518e:	77fb      	strb	r3, [r7, #31]
 8005190:	e070      	b.n	8005274 <UART_SetConfig+0x348>
 8005192:	2308      	movs	r3, #8
 8005194:	77fb      	strb	r3, [r7, #31]
 8005196:	e06d      	b.n	8005274 <UART_SetConfig+0x348>
 8005198:	2310      	movs	r3, #16
 800519a:	77fb      	strb	r3, [r7, #31]
 800519c:	e06a      	b.n	8005274 <UART_SetConfig+0x348>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a1b      	ldr	r2, [pc, #108]	; (8005210 <UART_SetConfig+0x2e4>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d138      	bne.n	800521a <UART_SetConfig+0x2ee>
 80051a8:	4b13      	ldr	r3, [pc, #76]	; (80051f8 <UART_SetConfig+0x2cc>)
 80051aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80051b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051b6:	d017      	beq.n	80051e8 <UART_SetConfig+0x2bc>
 80051b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051bc:	d82a      	bhi.n	8005214 <UART_SetConfig+0x2e8>
 80051be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051c2:	d00b      	beq.n	80051dc <UART_SetConfig+0x2b0>
 80051c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051c8:	d824      	bhi.n	8005214 <UART_SetConfig+0x2e8>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <UART_SetConfig+0x2aa>
 80051ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d2:	d006      	beq.n	80051e2 <UART_SetConfig+0x2b6>
 80051d4:	e01e      	b.n	8005214 <UART_SetConfig+0x2e8>
 80051d6:	2300      	movs	r3, #0
 80051d8:	77fb      	strb	r3, [r7, #31]
 80051da:	e04b      	b.n	8005274 <UART_SetConfig+0x348>
 80051dc:	2302      	movs	r3, #2
 80051de:	77fb      	strb	r3, [r7, #31]
 80051e0:	e048      	b.n	8005274 <UART_SetConfig+0x348>
 80051e2:	2304      	movs	r3, #4
 80051e4:	77fb      	strb	r3, [r7, #31]
 80051e6:	e045      	b.n	8005274 <UART_SetConfig+0x348>
 80051e8:	2308      	movs	r3, #8
 80051ea:	77fb      	strb	r3, [r7, #31]
 80051ec:	e042      	b.n	8005274 <UART_SetConfig+0x348>
 80051ee:	bf00      	nop
 80051f0:	efff69f3 	.word	0xefff69f3
 80051f4:	40011000 	.word	0x40011000
 80051f8:	40023800 	.word	0x40023800
 80051fc:	40004400 	.word	0x40004400
 8005200:	40004800 	.word	0x40004800
 8005204:	40004c00 	.word	0x40004c00
 8005208:	40005000 	.word	0x40005000
 800520c:	40011400 	.word	0x40011400
 8005210:	40007800 	.word	0x40007800
 8005214:	2310      	movs	r3, #16
 8005216:	77fb      	strb	r3, [r7, #31]
 8005218:	e02c      	b.n	8005274 <UART_SetConfig+0x348>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a72      	ldr	r2, [pc, #456]	; (80053e8 <UART_SetConfig+0x4bc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d125      	bne.n	8005270 <UART_SetConfig+0x344>
 8005224:	4b71      	ldr	r3, [pc, #452]	; (80053ec <UART_SetConfig+0x4c0>)
 8005226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800522e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005232:	d017      	beq.n	8005264 <UART_SetConfig+0x338>
 8005234:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005238:	d817      	bhi.n	800526a <UART_SetConfig+0x33e>
 800523a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800523e:	d00b      	beq.n	8005258 <UART_SetConfig+0x32c>
 8005240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005244:	d811      	bhi.n	800526a <UART_SetConfig+0x33e>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <UART_SetConfig+0x326>
 800524a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800524e:	d006      	beq.n	800525e <UART_SetConfig+0x332>
 8005250:	e00b      	b.n	800526a <UART_SetConfig+0x33e>
 8005252:	2300      	movs	r3, #0
 8005254:	77fb      	strb	r3, [r7, #31]
 8005256:	e00d      	b.n	8005274 <UART_SetConfig+0x348>
 8005258:	2302      	movs	r3, #2
 800525a:	77fb      	strb	r3, [r7, #31]
 800525c:	e00a      	b.n	8005274 <UART_SetConfig+0x348>
 800525e:	2304      	movs	r3, #4
 8005260:	77fb      	strb	r3, [r7, #31]
 8005262:	e007      	b.n	8005274 <UART_SetConfig+0x348>
 8005264:	2308      	movs	r3, #8
 8005266:	77fb      	strb	r3, [r7, #31]
 8005268:	e004      	b.n	8005274 <UART_SetConfig+0x348>
 800526a:	2310      	movs	r3, #16
 800526c:	77fb      	strb	r3, [r7, #31]
 800526e:	e001      	b.n	8005274 <UART_SetConfig+0x348>
 8005270:	2310      	movs	r3, #16
 8005272:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800527c:	d15b      	bne.n	8005336 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800527e:	7ffb      	ldrb	r3, [r7, #31]
 8005280:	2b08      	cmp	r3, #8
 8005282:	d828      	bhi.n	80052d6 <UART_SetConfig+0x3aa>
 8005284:	a201      	add	r2, pc, #4	; (adr r2, 800528c <UART_SetConfig+0x360>)
 8005286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528a:	bf00      	nop
 800528c:	080052b1 	.word	0x080052b1
 8005290:	080052b9 	.word	0x080052b9
 8005294:	080052c1 	.word	0x080052c1
 8005298:	080052d7 	.word	0x080052d7
 800529c:	080052c7 	.word	0x080052c7
 80052a0:	080052d7 	.word	0x080052d7
 80052a4:	080052d7 	.word	0x080052d7
 80052a8:	080052d7 	.word	0x080052d7
 80052ac:	080052cf 	.word	0x080052cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b0:	f7fe fa86 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 80052b4:	61b8      	str	r0, [r7, #24]
        break;
 80052b6:	e013      	b.n	80052e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b8:	f7fe fa96 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 80052bc:	61b8      	str	r0, [r7, #24]
        break;
 80052be:	e00f      	b.n	80052e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c0:	4b4b      	ldr	r3, [pc, #300]	; (80053f0 <UART_SetConfig+0x4c4>)
 80052c2:	61bb      	str	r3, [r7, #24]
        break;
 80052c4:	e00c      	b.n	80052e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052c6:	f7fe f969 	bl	800359c <HAL_RCC_GetSysClockFreq>
 80052ca:	61b8      	str	r0, [r7, #24]
        break;
 80052cc:	e008      	b.n	80052e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052d2:	61bb      	str	r3, [r7, #24]
        break;
 80052d4:	e004      	b.n	80052e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	77bb      	strb	r3, [r7, #30]
        break;
 80052de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d074      	beq.n	80053d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	005a      	lsls	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	085b      	lsrs	r3, r3, #1
 80052f0:	441a      	add	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	2b0f      	cmp	r3, #15
 8005300:	d916      	bls.n	8005330 <UART_SetConfig+0x404>
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005308:	d212      	bcs.n	8005330 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	b29b      	uxth	r3, r3
 800530e:	f023 030f 	bic.w	r3, r3, #15
 8005312:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	085b      	lsrs	r3, r3, #1
 8005318:	b29b      	uxth	r3, r3
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	b29a      	uxth	r2, r3
 8005320:	89fb      	ldrh	r3, [r7, #14]
 8005322:	4313      	orrs	r3, r2
 8005324:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	89fa      	ldrh	r2, [r7, #14]
 800532c:	60da      	str	r2, [r3, #12]
 800532e:	e04f      	b.n	80053d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	77bb      	strb	r3, [r7, #30]
 8005334:	e04c      	b.n	80053d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005336:	7ffb      	ldrb	r3, [r7, #31]
 8005338:	2b08      	cmp	r3, #8
 800533a:	d828      	bhi.n	800538e <UART_SetConfig+0x462>
 800533c:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <UART_SetConfig+0x418>)
 800533e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005342:	bf00      	nop
 8005344:	08005369 	.word	0x08005369
 8005348:	08005371 	.word	0x08005371
 800534c:	08005379 	.word	0x08005379
 8005350:	0800538f 	.word	0x0800538f
 8005354:	0800537f 	.word	0x0800537f
 8005358:	0800538f 	.word	0x0800538f
 800535c:	0800538f 	.word	0x0800538f
 8005360:	0800538f 	.word	0x0800538f
 8005364:	08005387 	.word	0x08005387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005368:	f7fe fa2a 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 800536c:	61b8      	str	r0, [r7, #24]
        break;
 800536e:	e013      	b.n	8005398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005370:	f7fe fa3a 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 8005374:	61b8      	str	r0, [r7, #24]
        break;
 8005376:	e00f      	b.n	8005398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005378:	4b1d      	ldr	r3, [pc, #116]	; (80053f0 <UART_SetConfig+0x4c4>)
 800537a:	61bb      	str	r3, [r7, #24]
        break;
 800537c:	e00c      	b.n	8005398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800537e:	f7fe f90d 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8005382:	61b8      	str	r0, [r7, #24]
        break;
 8005384:	e008      	b.n	8005398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800538a:	61bb      	str	r3, [r7, #24]
        break;
 800538c:	e004      	b.n	8005398 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	77bb      	strb	r3, [r7, #30]
        break;
 8005396:	bf00      	nop
    }

    if (pclk != 0U)
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d018      	beq.n	80053d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	085a      	lsrs	r2, r3, #1
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	441a      	add	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	2b0f      	cmp	r3, #15
 80053b6:	d909      	bls.n	80053cc <UART_SetConfig+0x4a0>
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053be:	d205      	bcs.n	80053cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	60da      	str	r2, [r3, #12]
 80053ca:	e001      	b.n	80053d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80053dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3720      	adds	r7, #32
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40007c00 	.word	0x40007c00
 80053ec:	40023800 	.word	0x40023800
 80053f0:	00f42400 	.word	0x00f42400

080053f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01a      	beq.n	800550a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054f2:	d10a      	bne.n	800550a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	605a      	str	r2, [r3, #4]
  }
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af02      	add	r7, sp, #8
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005548:	f7fc f9f2 	bl	8001930 <HAL_GetTick>
 800554c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0308 	and.w	r3, r3, #8
 8005558:	2b08      	cmp	r3, #8
 800555a:	d10e      	bne.n	800557a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800555c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f831 	bl	80055d2 <UART_WaitOnFlagUntilTimeout>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e027      	b.n	80055ca <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b04      	cmp	r3, #4
 8005586:	d10e      	bne.n	80055a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005588:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f81b 	bl	80055d2 <UART_WaitOnFlagUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e011      	b.n	80055ca <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b09c      	sub	sp, #112	; 0x70
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	603b      	str	r3, [r7, #0]
 80055de:	4613      	mov	r3, r2
 80055e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e2:	e0a7      	b.n	8005734 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ea:	f000 80a3 	beq.w	8005734 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ee:	f7fc f99f 	bl	8001930 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d302      	bcc.n	8005604 <UART_WaitOnFlagUntilTimeout+0x32>
 80055fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005600:	2b00      	cmp	r3, #0
 8005602:	d13f      	bne.n	8005684 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005614:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005618:	667b      	str	r3, [r7, #100]	; 0x64
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005622:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005624:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005628:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e6      	bne.n	8005604 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3308      	adds	r3, #8
 800563c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005640:	e853 3f00 	ldrex	r3, [r3]
 8005644:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	f023 0301 	bic.w	r3, r3, #1
 800564c:	663b      	str	r3, [r7, #96]	; 0x60
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3308      	adds	r3, #8
 8005654:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005656:	64ba      	str	r2, [r7, #72]	; 0x48
 8005658:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800565c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e5      	bne.n	8005636 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2220      	movs	r2, #32
 800566e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e068      	b.n	8005756 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	d050      	beq.n	8005734 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800569c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056a0:	d148      	bne.n	8005734 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ca:	637b      	str	r3, [r7, #52]	; 0x34
 80056cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e6      	bne.n	80056ac <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3308      	adds	r3, #8
 80056e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	613b      	str	r3, [r7, #16]
   return(result);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3308      	adds	r3, #8
 80056fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056fe:	623a      	str	r2, [r7, #32]
 8005700:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	69f9      	ldr	r1, [r7, #28]
 8005704:	6a3a      	ldr	r2, [r7, #32]
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	61bb      	str	r3, [r7, #24]
   return(result);
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e5      	bne.n	80056de <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2220      	movs	r2, #32
 8005716:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2220      	movs	r2, #32
 8005724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e010      	b.n	8005756 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	69da      	ldr	r2, [r3, #28]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4013      	ands	r3, r2
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	429a      	cmp	r2, r3
 8005742:	bf0c      	ite	eq
 8005744:	2301      	moveq	r3, #1
 8005746:	2300      	movne	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	429a      	cmp	r2, r3
 8005750:	f43f af48 	beq.w	80055e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3770      	adds	r7, #112	; 0x70
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005760:	b480      	push	{r7}
 8005762:	b097      	sub	sp, #92	; 0x5c
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	4613      	mov	r3, r2
 800576c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	88fa      	ldrh	r2, [r7, #6]
 8005778:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	88fa      	ldrh	r2, [r7, #6]
 8005780:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005792:	d10e      	bne.n	80057b2 <UART_Start_Receive_IT+0x52>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d105      	bne.n	80057a8 <UART_Start_Receive_IT+0x48>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80057a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057a6:	e02d      	b.n	8005804 <UART_Start_Receive_IT+0xa4>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	22ff      	movs	r2, #255	; 0xff
 80057ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057b0:	e028      	b.n	8005804 <UART_Start_Receive_IT+0xa4>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10d      	bne.n	80057d6 <UART_Start_Receive_IT+0x76>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d104      	bne.n	80057cc <UART_Start_Receive_IT+0x6c>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	22ff      	movs	r2, #255	; 0xff
 80057c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057ca:	e01b      	b.n	8005804 <UART_Start_Receive_IT+0xa4>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	227f      	movs	r2, #127	; 0x7f
 80057d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057d4:	e016      	b.n	8005804 <UART_Start_Receive_IT+0xa4>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057de:	d10d      	bne.n	80057fc <UART_Start_Receive_IT+0x9c>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d104      	bne.n	80057f2 <UART_Start_Receive_IT+0x92>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	227f      	movs	r2, #127	; 0x7f
 80057ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057f0:	e008      	b.n	8005804 <UART_Start_Receive_IT+0xa4>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	223f      	movs	r2, #63	; 0x3f
 80057f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057fa:	e003      	b.n	8005804 <UART_Start_Receive_IT+0xa4>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2222      	movs	r2, #34	; 0x22
 8005810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3308      	adds	r3, #8
 800581a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	f043 0301 	orr.w	r3, r3, #1
 800582a:	657b      	str	r3, [r7, #84]	; 0x54
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3308      	adds	r3, #8
 8005832:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005834:	64ba      	str	r2, [r7, #72]	; 0x48
 8005836:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800583a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e5      	bne.n	8005814 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005850:	d107      	bne.n	8005862 <UART_Start_Receive_IT+0x102>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d103      	bne.n	8005862 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4a21      	ldr	r2, [pc, #132]	; (80058e4 <UART_Start_Receive_IT+0x184>)
 800585e:	669a      	str	r2, [r3, #104]	; 0x68
 8005860:	e002      	b.n	8005868 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4a20      	ldr	r2, [pc, #128]	; (80058e8 <UART_Start_Receive_IT+0x188>)
 8005866:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d019      	beq.n	80058a4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005884:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800588e:	637b      	str	r3, [r7, #52]	; 0x34
 8005890:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005892:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005896:	e841 2300 	strex	r3, r2, [r1]
 800589a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1e6      	bne.n	8005870 <UART_Start_Receive_IT+0x110>
 80058a2:	e018      	b.n	80058d6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	e853 3f00 	ldrex	r3, [r3]
 80058b0:	613b      	str	r3, [r7, #16]
   return(result);
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f043 0320 	orr.w	r3, r3, #32
 80058b8:	653b      	str	r3, [r7, #80]	; 0x50
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058c2:	623b      	str	r3, [r7, #32]
 80058c4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c6:	69f9      	ldr	r1, [r7, #28]
 80058c8:	6a3a      	ldr	r2, [r7, #32]
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e6      	bne.n	80058a4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	375c      	adds	r7, #92	; 0x5c
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	08005d11 	.word	0x08005d11
 80058e8:	08005bab 	.word	0x08005bab

080058ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b095      	sub	sp, #84	; 0x54
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005908:	64fb      	str	r3, [r7, #76]	; 0x4c
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	461a      	mov	r2, r3
 8005910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005912:	643b      	str	r3, [r7, #64]	; 0x40
 8005914:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005918:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e6      	bne.n	80058f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3308      	adds	r3, #8
 800592c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	61fb      	str	r3, [r7, #28]
   return(result);
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	64bb      	str	r3, [r7, #72]	; 0x48
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3308      	adds	r3, #8
 8005944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005946:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005948:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800594c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e5      	bne.n	8005926 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800595e:	2b01      	cmp	r3, #1
 8005960:	d118      	bne.n	8005994 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f023 0310 	bic.w	r3, r3, #16
 8005976:	647b      	str	r3, [r7, #68]	; 0x44
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	461a      	mov	r2, r3
 800597e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005980:	61bb      	str	r3, [r7, #24]
 8005982:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6979      	ldr	r1, [r7, #20]
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	613b      	str	r3, [r7, #16]
   return(result);
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e6      	bne.n	8005962 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2220      	movs	r2, #32
 8005998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80059a8:	bf00      	nop
 80059aa:	3754      	adds	r7, #84	; 0x54
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f7ff fa8a 	bl	8004eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059d8:	bf00      	nop
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b08f      	sub	sp, #60	; 0x3c
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ec:	2b21      	cmp	r3, #33	; 0x21
 80059ee:	d14c      	bne.n	8005a8a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d132      	bne.n	8005a62 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a10:	637b      	str	r3, [r7, #52]	; 0x34
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a1c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a22:	e841 2300 	strex	r3, r2, [r1]
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1e6      	bne.n	80059fc <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a42:	633b      	str	r3, [r7, #48]	; 0x30
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	6979      	ldr	r1, [r7, #20]
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	e841 2300 	strex	r3, r2, [r1]
 8005a58:	613b      	str	r3, [r7, #16]
   return(result);
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e6      	bne.n	8005a2e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005a60:	e013      	b.n	8005a8a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a66:	781a      	ldrb	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005a8a:	bf00      	nop
 8005a8c:	373c      	adds	r7, #60	; 0x3c
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b091      	sub	sp, #68	; 0x44
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa2:	2b21      	cmp	r3, #33	; 0x21
 8005aa4:	d151      	bne.n	8005b4a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d132      	bne.n	8005b18 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	623b      	str	r3, [r7, #32]
   return(result);
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	461a      	mov	r2, r3
 8005ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ad2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e6      	bne.n	8005ab2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	e853 3f00 	ldrex	r3, [r3]
 8005af0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005af8:	637b      	str	r3, [r7, #52]	; 0x34
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b02:	61fb      	str	r3, [r7, #28]
 8005b04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	69b9      	ldr	r1, [r7, #24]
 8005b08:	69fa      	ldr	r2, [r7, #28]
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	617b      	str	r3, [r7, #20]
   return(result);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e6      	bne.n	8005ae4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005b16:	e018      	b.n	8005b4a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	461a      	mov	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b2c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b32:	1c9a      	adds	r2, r3, #2
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005b4a:	bf00      	nop
 8005b4c:	3744      	adds	r7, #68	; 0x44
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b088      	sub	sp, #32
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	e853 3f00 	ldrex	r3, [r3]
 8005b6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b72:	61fb      	str	r3, [r7, #28]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	6979      	ldr	r1, [r7, #20]
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	e841 2300 	strex	r3, r2, [r1]
 8005b88:	613b      	str	r3, [r7, #16]
   return(result);
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e6      	bne.n	8005b5e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7ff f99b 	bl	8004ed8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ba2:	bf00      	nop
 8005ba4:	3720      	adds	r7, #32
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b096      	sub	sp, #88	; 0x58
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bb8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bc2:	2b22      	cmp	r3, #34	; 0x22
 8005bc4:	f040 8098 	bne.w	8005cf8 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005bd2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005bd6:	b2d9      	uxtb	r1, r3
 8005bd8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be2:	400a      	ands	r2, r1
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d17b      	bne.n	8005d08 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c24:	653b      	str	r3, [r7, #80]	; 0x50
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1e6      	bne.n	8005c10 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3308      	adds	r3, #8
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	623b      	str	r3, [r7, #32]
   return(result);
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	f023 0301 	bic.w	r3, r3, #1
 8005c58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3308      	adds	r3, #8
 8005c60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c62:	633a      	str	r2, [r7, #48]	; 0x30
 8005c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e5      	bne.n	8005c42 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d12e      	bne.n	8005cf0 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f023 0310 	bic.w	r3, r3, #16
 8005cac:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cb6:	61fb      	str	r3, [r7, #28]
 8005cb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	69b9      	ldr	r1, [r7, #24]
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	617b      	str	r3, [r7, #20]
   return(result);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e6      	bne.n	8005c98 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	f003 0310 	and.w	r3, r3, #16
 8005cd4:	2b10      	cmp	r3, #16
 8005cd6:	d103      	bne.n	8005ce0 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2210      	movs	r2, #16
 8005cde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7ff f909 	bl	8004f00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cee:	e00b      	b.n	8005d08 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7fb fb45 	bl	8001380 <HAL_UART_RxCpltCallback>
}
 8005cf6:	e007      	b.n	8005d08 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699a      	ldr	r2, [r3, #24]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0208 	orr.w	r2, r2, #8
 8005d06:	619a      	str	r2, [r3, #24]
}
 8005d08:	bf00      	nop
 8005d0a:	3758      	adds	r7, #88	; 0x58
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b096      	sub	sp, #88	; 0x58
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d1e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d28:	2b22      	cmp	r3, #34	; 0x22
 8005d2a:	f040 8098 	bne.w	8005e5e <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d3e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005d42:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005d46:	4013      	ands	r3, r2
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d52:	1c9a      	adds	r2, r3, #2
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d17b      	bne.n	8005e6e <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	461a      	mov	r2, r3
 8005d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d94:	643b      	str	r3, [r7, #64]	; 0x40
 8005d96:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d9c:	e841 2300 	strex	r3, r2, [r1]
 8005da0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e6      	bne.n	8005d76 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3308      	adds	r3, #8
 8005dae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	e853 3f00 	ldrex	r3, [r3]
 8005db6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	f023 0301 	bic.w	r3, r3, #1
 8005dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dd0:	e841 2300 	strex	r3, r2, [r1]
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e5      	bne.n	8005da8 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d12e      	bne.n	8005e56 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	e853 3f00 	ldrex	r3, [r3]
 8005e0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f023 0310 	bic.w	r3, r3, #16
 8005e12:	647b      	str	r3, [r7, #68]	; 0x44
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	6979      	ldr	r1, [r7, #20]
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	e841 2300 	strex	r3, r2, [r1]
 8005e28:	613b      	str	r3, [r7, #16]
   return(result);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e6      	bne.n	8005dfe <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	f003 0310 	and.w	r3, r3, #16
 8005e3a:	2b10      	cmp	r3, #16
 8005e3c:	d103      	bne.n	8005e46 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2210      	movs	r2, #16
 8005e44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff f856 	bl	8004f00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e54:	e00b      	b.n	8005e6e <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7fb fa92 	bl	8001380 <HAL_UART_RxCpltCallback>
}
 8005e5c:	e007      	b.n	8005e6e <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	699a      	ldr	r2, [r3, #24]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0208 	orr.w	r2, r2, #8
 8005e6c:	619a      	str	r2, [r3, #24]
}
 8005e6e:	bf00      	nop
 8005e70:	3758      	adds	r7, #88	; 0x58
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
	...

08005e78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e78:	b084      	sub	sp, #16
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b084      	sub	sp, #16
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	f107 001c 	add.w	r0, r7, #28
 8005e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d120      	bne.n	8005ed2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	4b20      	ldr	r3, [pc, #128]	; (8005f24 <USB_CoreInit+0xac>)
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d105      	bne.n	8005ec6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fa96 	bl	80063f8 <USB_CoreReset>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	73fb      	strb	r3, [r7, #15]
 8005ed0:	e010      	b.n	8005ef4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fa8a 	bl	80063f8 <USB_CoreReset>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d10b      	bne.n	8005f12 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f043 0206 	orr.w	r2, r3, #6
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f043 0220 	orr.w	r2, r3, #32
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f1e:	b004      	add	sp, #16
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	ffbdffbf 	.word	0xffbdffbf

08005f28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f023 0201 	bic.w	r2, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	460b      	mov	r3, r1
 8005f54:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f66:	78fb      	ldrb	r3, [r7, #3]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d115      	bne.n	8005f98 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f78:	2001      	movs	r0, #1
 8005f7a:	f7fb fce5 	bl	8001948 <HAL_Delay>
      ms++;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	3301      	adds	r3, #1
 8005f82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fa29 	bl	80063dc <USB_GetMode>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d01e      	beq.n	8005fce <USB_SetCurrentMode+0x84>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2b31      	cmp	r3, #49	; 0x31
 8005f94:	d9f0      	bls.n	8005f78 <USB_SetCurrentMode+0x2e>
 8005f96:	e01a      	b.n	8005fce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d115      	bne.n	8005fca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005faa:	2001      	movs	r0, #1
 8005fac:	f7fb fccc 	bl	8001948 <HAL_Delay>
      ms++;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fa10 	bl	80063dc <USB_GetMode>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d005      	beq.n	8005fce <USB_SetCurrentMode+0x84>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b31      	cmp	r3, #49	; 0x31
 8005fc6:	d9f0      	bls.n	8005faa <USB_SetCurrentMode+0x60>
 8005fc8:	e001      	b.n	8005fce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e005      	b.n	8005fda <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2b32      	cmp	r3, #50	; 0x32
 8005fd2:	d101      	bne.n	8005fd8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e000      	b.n	8005fda <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b086      	sub	sp, #24
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ffe:	2300      	movs	r3, #0
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	e009      	b.n	8006018 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	3340      	adds	r3, #64	; 0x40
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	2200      	movs	r2, #0
 8006010:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	3301      	adds	r3, #1
 8006016:	613b      	str	r3, [r7, #16]
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	2b0e      	cmp	r3, #14
 800601c:	d9f2      	bls.n	8006004 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800601e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006020:	2b00      	cmp	r3, #0
 8006022:	d11c      	bne.n	800605e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006032:	f043 0302 	orr.w	r3, r3, #2
 8006036:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	e005      	b.n	800606a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006070:	461a      	mov	r2, r3
 8006072:	2300      	movs	r3, #0
 8006074:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607c:	4619      	mov	r1, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006084:	461a      	mov	r2, r3
 8006086:	680b      	ldr	r3, [r1, #0]
 8006088:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	2b01      	cmp	r3, #1
 800608e:	d10c      	bne.n	80060aa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006092:	2b00      	cmp	r3, #0
 8006094:	d104      	bne.n	80060a0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006096:	2100      	movs	r1, #0
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f965 	bl	8006368 <USB_SetDevSpeed>
 800609e:	e008      	b.n	80060b2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060a0:	2101      	movs	r1, #1
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f960 	bl	8006368 <USB_SetDevSpeed>
 80060a8:	e003      	b.n	80060b2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060aa:	2103      	movs	r1, #3
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f95b 	bl	8006368 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060b2:	2110      	movs	r1, #16
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f8f3 	bl	80062a0 <USB_FlushTxFifo>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f91f 	bl	8006308 <USB_FlushRxFifo>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060da:	461a      	mov	r2, r3
 80060dc:	2300      	movs	r3, #0
 80060de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e6:	461a      	mov	r2, r3
 80060e8:	2300      	movs	r3, #0
 80060ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f2:	461a      	mov	r2, r3
 80060f4:	2300      	movs	r3, #0
 80060f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060f8:	2300      	movs	r3, #0
 80060fa:	613b      	str	r3, [r7, #16]
 80060fc:	e043      	b.n	8006186 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006110:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006114:	d118      	bne.n	8006148 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10a      	bne.n	8006132 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006128:	461a      	mov	r2, r3
 800612a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	e013      	b.n	800615a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613e:	461a      	mov	r2, r3
 8006140:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	e008      	b.n	800615a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006154:	461a      	mov	r2, r3
 8006156:	2300      	movs	r3, #0
 8006158:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006166:	461a      	mov	r2, r3
 8006168:	2300      	movs	r3, #0
 800616a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006178:	461a      	mov	r2, r3
 800617a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800617e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	3301      	adds	r3, #1
 8006184:	613b      	str	r3, [r7, #16]
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	429a      	cmp	r2, r3
 800618c:	d3b7      	bcc.n	80060fe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800618e:	2300      	movs	r3, #0
 8006190:	613b      	str	r3, [r7, #16]
 8006192:	e043      	b.n	800621c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061aa:	d118      	bne.n	80061de <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10a      	bne.n	80061c8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061be:	461a      	mov	r2, r3
 80061c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061c4:	6013      	str	r3, [r2, #0]
 80061c6:	e013      	b.n	80061f0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d4:	461a      	mov	r2, r3
 80061d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061da:	6013      	str	r3, [r2, #0]
 80061dc:	e008      	b.n	80061f0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ea:	461a      	mov	r2, r3
 80061ec:	2300      	movs	r3, #0
 80061ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fc:	461a      	mov	r2, r3
 80061fe:	2300      	movs	r3, #0
 8006200:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620e:	461a      	mov	r2, r3
 8006210:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006214:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	3301      	adds	r3, #1
 800621a:	613b      	str	r3, [r7, #16]
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	429a      	cmp	r2, r3
 8006222:	d3b7      	bcc.n	8006194 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006232:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006236:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006244:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	2b00      	cmp	r3, #0
 800624a:	d105      	bne.n	8006258 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	f043 0210 	orr.w	r2, r3, #16
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	699a      	ldr	r2, [r3, #24]
 800625c:	4b0e      	ldr	r3, [pc, #56]	; (8006298 <USB_DevInit+0x2b4>)
 800625e:	4313      	orrs	r3, r2
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	f043 0208 	orr.w	r2, r3, #8
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006278:	2b01      	cmp	r3, #1
 800627a:	d105      	bne.n	8006288 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	699a      	ldr	r2, [r3, #24]
 8006280:	4b06      	ldr	r3, [pc, #24]	; (800629c <USB_DevInit+0x2b8>)
 8006282:	4313      	orrs	r3, r2
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006288:	7dfb      	ldrb	r3, [r7, #23]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006294:	b004      	add	sp, #16
 8006296:	4770      	bx	lr
 8006298:	803c3800 	.word	0x803c3800
 800629c:	40000004 	.word	0x40000004

080062a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3301      	adds	r3, #1
 80062b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4a13      	ldr	r2, [pc, #76]	; (8006304 <USB_FlushTxFifo+0x64>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d901      	bls.n	80062c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e01b      	b.n	80062f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	daf2      	bge.n	80062ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	019b      	lsls	r3, r3, #6
 80062d0:	f043 0220 	orr.w	r2, r3, #32
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	3301      	adds	r3, #1
 80062dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4a08      	ldr	r2, [pc, #32]	; (8006304 <USB_FlushTxFifo+0x64>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d901      	bls.n	80062ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e006      	b.n	80062f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b20      	cmp	r3, #32
 80062f4:	d0f0      	beq.n	80062d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	00030d40 	.word	0x00030d40

08006308 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	3301      	adds	r3, #1
 8006318:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4a11      	ldr	r2, [pc, #68]	; (8006364 <USB_FlushRxFifo+0x5c>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d901      	bls.n	8006326 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e018      	b.n	8006358 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	daf2      	bge.n	8006314 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2210      	movs	r2, #16
 8006336:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3301      	adds	r3, #1
 800633c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4a08      	ldr	r2, [pc, #32]	; (8006364 <USB_FlushRxFifo+0x5c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d901      	bls.n	800634a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e006      	b.n	8006358 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f003 0310 	and.w	r3, r3, #16
 8006352:	2b10      	cmp	r3, #16
 8006354:	d0f0      	beq.n	8006338 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	00030d40 	.word	0x00030d40

08006368 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	68f9      	ldr	r1, [r7, #12]
 8006384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006388:	4313      	orrs	r3, r2
 800638a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800639a:	b480      	push	{r7}
 800639c:	b085      	sub	sp, #20
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063b4:	f023 0303 	bic.w	r3, r3, #3
 80063b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063c8:	f043 0302 	orr.w	r3, r3, #2
 80063cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	f003 0301 	and.w	r3, r3, #1
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3301      	adds	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4a13      	ldr	r2, [pc, #76]	; (800645c <USB_CoreReset+0x64>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d901      	bls.n	8006416 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e01b      	b.n	800644e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	2b00      	cmp	r3, #0
 800641c:	daf2      	bge.n	8006404 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f043 0201 	orr.w	r2, r3, #1
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3301      	adds	r3, #1
 8006432:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4a09      	ldr	r2, [pc, #36]	; (800645c <USB_CoreReset+0x64>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d901      	bls.n	8006440 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e006      	b.n	800644e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b01      	cmp	r3, #1
 800644a:	d0f0      	beq.n	800642e <USB_CoreReset+0x36>

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	00030d40 	.word	0x00030d40

08006460 <__errno>:
 8006460:	4b01      	ldr	r3, [pc, #4]	; (8006468 <__errno+0x8>)
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	2000005c 	.word	0x2000005c

0800646c <__libc_init_array>:
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	4d0d      	ldr	r5, [pc, #52]	; (80064a4 <__libc_init_array+0x38>)
 8006470:	4c0d      	ldr	r4, [pc, #52]	; (80064a8 <__libc_init_array+0x3c>)
 8006472:	1b64      	subs	r4, r4, r5
 8006474:	10a4      	asrs	r4, r4, #2
 8006476:	2600      	movs	r6, #0
 8006478:	42a6      	cmp	r6, r4
 800647a:	d109      	bne.n	8006490 <__libc_init_array+0x24>
 800647c:	4d0b      	ldr	r5, [pc, #44]	; (80064ac <__libc_init_array+0x40>)
 800647e:	4c0c      	ldr	r4, [pc, #48]	; (80064b0 <__libc_init_array+0x44>)
 8006480:	f000 fc8e 	bl	8006da0 <_init>
 8006484:	1b64      	subs	r4, r4, r5
 8006486:	10a4      	asrs	r4, r4, #2
 8006488:	2600      	movs	r6, #0
 800648a:	42a6      	cmp	r6, r4
 800648c:	d105      	bne.n	800649a <__libc_init_array+0x2e>
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	f855 3b04 	ldr.w	r3, [r5], #4
 8006494:	4798      	blx	r3
 8006496:	3601      	adds	r6, #1
 8006498:	e7ee      	b.n	8006478 <__libc_init_array+0xc>
 800649a:	f855 3b04 	ldr.w	r3, [r5], #4
 800649e:	4798      	blx	r3
 80064a0:	3601      	adds	r6, #1
 80064a2:	e7f2      	b.n	800648a <__libc_init_array+0x1e>
 80064a4:	080070a8 	.word	0x080070a8
 80064a8:	080070a8 	.word	0x080070a8
 80064ac:	080070a8 	.word	0x080070a8
 80064b0:	080070ac 	.word	0x080070ac

080064b4 <memset>:
 80064b4:	4402      	add	r2, r0
 80064b6:	4603      	mov	r3, r0
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d100      	bne.n	80064be <memset+0xa>
 80064bc:	4770      	bx	lr
 80064be:	f803 1b01 	strb.w	r1, [r3], #1
 80064c2:	e7f9      	b.n	80064b8 <memset+0x4>

080064c4 <siprintf>:
 80064c4:	b40e      	push	{r1, r2, r3}
 80064c6:	b500      	push	{lr}
 80064c8:	b09c      	sub	sp, #112	; 0x70
 80064ca:	ab1d      	add	r3, sp, #116	; 0x74
 80064cc:	9002      	str	r0, [sp, #8]
 80064ce:	9006      	str	r0, [sp, #24]
 80064d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064d4:	4809      	ldr	r0, [pc, #36]	; (80064fc <siprintf+0x38>)
 80064d6:	9107      	str	r1, [sp, #28]
 80064d8:	9104      	str	r1, [sp, #16]
 80064da:	4909      	ldr	r1, [pc, #36]	; (8006500 <siprintf+0x3c>)
 80064dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80064e0:	9105      	str	r1, [sp, #20]
 80064e2:	6800      	ldr	r0, [r0, #0]
 80064e4:	9301      	str	r3, [sp, #4]
 80064e6:	a902      	add	r1, sp, #8
 80064e8:	f000 f868 	bl	80065bc <_svfiprintf_r>
 80064ec:	9b02      	ldr	r3, [sp, #8]
 80064ee:	2200      	movs	r2, #0
 80064f0:	701a      	strb	r2, [r3, #0]
 80064f2:	b01c      	add	sp, #112	; 0x70
 80064f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80064f8:	b003      	add	sp, #12
 80064fa:	4770      	bx	lr
 80064fc:	2000005c 	.word	0x2000005c
 8006500:	ffff0208 	.word	0xffff0208

08006504 <__ssputs_r>:
 8006504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006508:	688e      	ldr	r6, [r1, #8]
 800650a:	429e      	cmp	r6, r3
 800650c:	4682      	mov	sl, r0
 800650e:	460c      	mov	r4, r1
 8006510:	4690      	mov	r8, r2
 8006512:	461f      	mov	r7, r3
 8006514:	d838      	bhi.n	8006588 <__ssputs_r+0x84>
 8006516:	898a      	ldrh	r2, [r1, #12]
 8006518:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800651c:	d032      	beq.n	8006584 <__ssputs_r+0x80>
 800651e:	6825      	ldr	r5, [r4, #0]
 8006520:	6909      	ldr	r1, [r1, #16]
 8006522:	eba5 0901 	sub.w	r9, r5, r1
 8006526:	6965      	ldr	r5, [r4, #20]
 8006528:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800652c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006530:	3301      	adds	r3, #1
 8006532:	444b      	add	r3, r9
 8006534:	106d      	asrs	r5, r5, #1
 8006536:	429d      	cmp	r5, r3
 8006538:	bf38      	it	cc
 800653a:	461d      	movcc	r5, r3
 800653c:	0553      	lsls	r3, r2, #21
 800653e:	d531      	bpl.n	80065a4 <__ssputs_r+0xa0>
 8006540:	4629      	mov	r1, r5
 8006542:	f000 fb63 	bl	8006c0c <_malloc_r>
 8006546:	4606      	mov	r6, r0
 8006548:	b950      	cbnz	r0, 8006560 <__ssputs_r+0x5c>
 800654a:	230c      	movs	r3, #12
 800654c:	f8ca 3000 	str.w	r3, [sl]
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006556:	81a3      	strh	r3, [r4, #12]
 8006558:	f04f 30ff 	mov.w	r0, #4294967295
 800655c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006560:	6921      	ldr	r1, [r4, #16]
 8006562:	464a      	mov	r2, r9
 8006564:	f000 fabe 	bl	8006ae4 <memcpy>
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800656e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006572:	81a3      	strh	r3, [r4, #12]
 8006574:	6126      	str	r6, [r4, #16]
 8006576:	6165      	str	r5, [r4, #20]
 8006578:	444e      	add	r6, r9
 800657a:	eba5 0509 	sub.w	r5, r5, r9
 800657e:	6026      	str	r6, [r4, #0]
 8006580:	60a5      	str	r5, [r4, #8]
 8006582:	463e      	mov	r6, r7
 8006584:	42be      	cmp	r6, r7
 8006586:	d900      	bls.n	800658a <__ssputs_r+0x86>
 8006588:	463e      	mov	r6, r7
 800658a:	6820      	ldr	r0, [r4, #0]
 800658c:	4632      	mov	r2, r6
 800658e:	4641      	mov	r1, r8
 8006590:	f000 fab6 	bl	8006b00 <memmove>
 8006594:	68a3      	ldr	r3, [r4, #8]
 8006596:	1b9b      	subs	r3, r3, r6
 8006598:	60a3      	str	r3, [r4, #8]
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	4433      	add	r3, r6
 800659e:	6023      	str	r3, [r4, #0]
 80065a0:	2000      	movs	r0, #0
 80065a2:	e7db      	b.n	800655c <__ssputs_r+0x58>
 80065a4:	462a      	mov	r2, r5
 80065a6:	f000 fba5 	bl	8006cf4 <_realloc_r>
 80065aa:	4606      	mov	r6, r0
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d1e1      	bne.n	8006574 <__ssputs_r+0x70>
 80065b0:	6921      	ldr	r1, [r4, #16]
 80065b2:	4650      	mov	r0, sl
 80065b4:	f000 fabe 	bl	8006b34 <_free_r>
 80065b8:	e7c7      	b.n	800654a <__ssputs_r+0x46>
	...

080065bc <_svfiprintf_r>:
 80065bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c0:	4698      	mov	r8, r3
 80065c2:	898b      	ldrh	r3, [r1, #12]
 80065c4:	061b      	lsls	r3, r3, #24
 80065c6:	b09d      	sub	sp, #116	; 0x74
 80065c8:	4607      	mov	r7, r0
 80065ca:	460d      	mov	r5, r1
 80065cc:	4614      	mov	r4, r2
 80065ce:	d50e      	bpl.n	80065ee <_svfiprintf_r+0x32>
 80065d0:	690b      	ldr	r3, [r1, #16]
 80065d2:	b963      	cbnz	r3, 80065ee <_svfiprintf_r+0x32>
 80065d4:	2140      	movs	r1, #64	; 0x40
 80065d6:	f000 fb19 	bl	8006c0c <_malloc_r>
 80065da:	6028      	str	r0, [r5, #0]
 80065dc:	6128      	str	r0, [r5, #16]
 80065de:	b920      	cbnz	r0, 80065ea <_svfiprintf_r+0x2e>
 80065e0:	230c      	movs	r3, #12
 80065e2:	603b      	str	r3, [r7, #0]
 80065e4:	f04f 30ff 	mov.w	r0, #4294967295
 80065e8:	e0d1      	b.n	800678e <_svfiprintf_r+0x1d2>
 80065ea:	2340      	movs	r3, #64	; 0x40
 80065ec:	616b      	str	r3, [r5, #20]
 80065ee:	2300      	movs	r3, #0
 80065f0:	9309      	str	r3, [sp, #36]	; 0x24
 80065f2:	2320      	movs	r3, #32
 80065f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80065fc:	2330      	movs	r3, #48	; 0x30
 80065fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067a8 <_svfiprintf_r+0x1ec>
 8006602:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006606:	f04f 0901 	mov.w	r9, #1
 800660a:	4623      	mov	r3, r4
 800660c:	469a      	mov	sl, r3
 800660e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006612:	b10a      	cbz	r2, 8006618 <_svfiprintf_r+0x5c>
 8006614:	2a25      	cmp	r2, #37	; 0x25
 8006616:	d1f9      	bne.n	800660c <_svfiprintf_r+0x50>
 8006618:	ebba 0b04 	subs.w	fp, sl, r4
 800661c:	d00b      	beq.n	8006636 <_svfiprintf_r+0x7a>
 800661e:	465b      	mov	r3, fp
 8006620:	4622      	mov	r2, r4
 8006622:	4629      	mov	r1, r5
 8006624:	4638      	mov	r0, r7
 8006626:	f7ff ff6d 	bl	8006504 <__ssputs_r>
 800662a:	3001      	adds	r0, #1
 800662c:	f000 80aa 	beq.w	8006784 <_svfiprintf_r+0x1c8>
 8006630:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006632:	445a      	add	r2, fp
 8006634:	9209      	str	r2, [sp, #36]	; 0x24
 8006636:	f89a 3000 	ldrb.w	r3, [sl]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 80a2 	beq.w	8006784 <_svfiprintf_r+0x1c8>
 8006640:	2300      	movs	r3, #0
 8006642:	f04f 32ff 	mov.w	r2, #4294967295
 8006646:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800664a:	f10a 0a01 	add.w	sl, sl, #1
 800664e:	9304      	str	r3, [sp, #16]
 8006650:	9307      	str	r3, [sp, #28]
 8006652:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006656:	931a      	str	r3, [sp, #104]	; 0x68
 8006658:	4654      	mov	r4, sl
 800665a:	2205      	movs	r2, #5
 800665c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006660:	4851      	ldr	r0, [pc, #324]	; (80067a8 <_svfiprintf_r+0x1ec>)
 8006662:	f7f9 fded 	bl	8000240 <memchr>
 8006666:	9a04      	ldr	r2, [sp, #16]
 8006668:	b9d8      	cbnz	r0, 80066a2 <_svfiprintf_r+0xe6>
 800666a:	06d0      	lsls	r0, r2, #27
 800666c:	bf44      	itt	mi
 800666e:	2320      	movmi	r3, #32
 8006670:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006674:	0711      	lsls	r1, r2, #28
 8006676:	bf44      	itt	mi
 8006678:	232b      	movmi	r3, #43	; 0x2b
 800667a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800667e:	f89a 3000 	ldrb.w	r3, [sl]
 8006682:	2b2a      	cmp	r3, #42	; 0x2a
 8006684:	d015      	beq.n	80066b2 <_svfiprintf_r+0xf6>
 8006686:	9a07      	ldr	r2, [sp, #28]
 8006688:	4654      	mov	r4, sl
 800668a:	2000      	movs	r0, #0
 800668c:	f04f 0c0a 	mov.w	ip, #10
 8006690:	4621      	mov	r1, r4
 8006692:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006696:	3b30      	subs	r3, #48	; 0x30
 8006698:	2b09      	cmp	r3, #9
 800669a:	d94e      	bls.n	800673a <_svfiprintf_r+0x17e>
 800669c:	b1b0      	cbz	r0, 80066cc <_svfiprintf_r+0x110>
 800669e:	9207      	str	r2, [sp, #28]
 80066a0:	e014      	b.n	80066cc <_svfiprintf_r+0x110>
 80066a2:	eba0 0308 	sub.w	r3, r0, r8
 80066a6:	fa09 f303 	lsl.w	r3, r9, r3
 80066aa:	4313      	orrs	r3, r2
 80066ac:	9304      	str	r3, [sp, #16]
 80066ae:	46a2      	mov	sl, r4
 80066b0:	e7d2      	b.n	8006658 <_svfiprintf_r+0x9c>
 80066b2:	9b03      	ldr	r3, [sp, #12]
 80066b4:	1d19      	adds	r1, r3, #4
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	9103      	str	r1, [sp, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	bfbb      	ittet	lt
 80066be:	425b      	neglt	r3, r3
 80066c0:	f042 0202 	orrlt.w	r2, r2, #2
 80066c4:	9307      	strge	r3, [sp, #28]
 80066c6:	9307      	strlt	r3, [sp, #28]
 80066c8:	bfb8      	it	lt
 80066ca:	9204      	strlt	r2, [sp, #16]
 80066cc:	7823      	ldrb	r3, [r4, #0]
 80066ce:	2b2e      	cmp	r3, #46	; 0x2e
 80066d0:	d10c      	bne.n	80066ec <_svfiprintf_r+0x130>
 80066d2:	7863      	ldrb	r3, [r4, #1]
 80066d4:	2b2a      	cmp	r3, #42	; 0x2a
 80066d6:	d135      	bne.n	8006744 <_svfiprintf_r+0x188>
 80066d8:	9b03      	ldr	r3, [sp, #12]
 80066da:	1d1a      	adds	r2, r3, #4
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	9203      	str	r2, [sp, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	bfb8      	it	lt
 80066e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80066e8:	3402      	adds	r4, #2
 80066ea:	9305      	str	r3, [sp, #20]
 80066ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80067b8 <_svfiprintf_r+0x1fc>
 80066f0:	7821      	ldrb	r1, [r4, #0]
 80066f2:	2203      	movs	r2, #3
 80066f4:	4650      	mov	r0, sl
 80066f6:	f7f9 fda3 	bl	8000240 <memchr>
 80066fa:	b140      	cbz	r0, 800670e <_svfiprintf_r+0x152>
 80066fc:	2340      	movs	r3, #64	; 0x40
 80066fe:	eba0 000a 	sub.w	r0, r0, sl
 8006702:	fa03 f000 	lsl.w	r0, r3, r0
 8006706:	9b04      	ldr	r3, [sp, #16]
 8006708:	4303      	orrs	r3, r0
 800670a:	3401      	adds	r4, #1
 800670c:	9304      	str	r3, [sp, #16]
 800670e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006712:	4826      	ldr	r0, [pc, #152]	; (80067ac <_svfiprintf_r+0x1f0>)
 8006714:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006718:	2206      	movs	r2, #6
 800671a:	f7f9 fd91 	bl	8000240 <memchr>
 800671e:	2800      	cmp	r0, #0
 8006720:	d038      	beq.n	8006794 <_svfiprintf_r+0x1d8>
 8006722:	4b23      	ldr	r3, [pc, #140]	; (80067b0 <_svfiprintf_r+0x1f4>)
 8006724:	bb1b      	cbnz	r3, 800676e <_svfiprintf_r+0x1b2>
 8006726:	9b03      	ldr	r3, [sp, #12]
 8006728:	3307      	adds	r3, #7
 800672a:	f023 0307 	bic.w	r3, r3, #7
 800672e:	3308      	adds	r3, #8
 8006730:	9303      	str	r3, [sp, #12]
 8006732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006734:	4433      	add	r3, r6
 8006736:	9309      	str	r3, [sp, #36]	; 0x24
 8006738:	e767      	b.n	800660a <_svfiprintf_r+0x4e>
 800673a:	fb0c 3202 	mla	r2, ip, r2, r3
 800673e:	460c      	mov	r4, r1
 8006740:	2001      	movs	r0, #1
 8006742:	e7a5      	b.n	8006690 <_svfiprintf_r+0xd4>
 8006744:	2300      	movs	r3, #0
 8006746:	3401      	adds	r4, #1
 8006748:	9305      	str	r3, [sp, #20]
 800674a:	4619      	mov	r1, r3
 800674c:	f04f 0c0a 	mov.w	ip, #10
 8006750:	4620      	mov	r0, r4
 8006752:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006756:	3a30      	subs	r2, #48	; 0x30
 8006758:	2a09      	cmp	r2, #9
 800675a:	d903      	bls.n	8006764 <_svfiprintf_r+0x1a8>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d0c5      	beq.n	80066ec <_svfiprintf_r+0x130>
 8006760:	9105      	str	r1, [sp, #20]
 8006762:	e7c3      	b.n	80066ec <_svfiprintf_r+0x130>
 8006764:	fb0c 2101 	mla	r1, ip, r1, r2
 8006768:	4604      	mov	r4, r0
 800676a:	2301      	movs	r3, #1
 800676c:	e7f0      	b.n	8006750 <_svfiprintf_r+0x194>
 800676e:	ab03      	add	r3, sp, #12
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	462a      	mov	r2, r5
 8006774:	4b0f      	ldr	r3, [pc, #60]	; (80067b4 <_svfiprintf_r+0x1f8>)
 8006776:	a904      	add	r1, sp, #16
 8006778:	4638      	mov	r0, r7
 800677a:	f3af 8000 	nop.w
 800677e:	1c42      	adds	r2, r0, #1
 8006780:	4606      	mov	r6, r0
 8006782:	d1d6      	bne.n	8006732 <_svfiprintf_r+0x176>
 8006784:	89ab      	ldrh	r3, [r5, #12]
 8006786:	065b      	lsls	r3, r3, #25
 8006788:	f53f af2c 	bmi.w	80065e4 <_svfiprintf_r+0x28>
 800678c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800678e:	b01d      	add	sp, #116	; 0x74
 8006790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006794:	ab03      	add	r3, sp, #12
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	462a      	mov	r2, r5
 800679a:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <_svfiprintf_r+0x1f8>)
 800679c:	a904      	add	r1, sp, #16
 800679e:	4638      	mov	r0, r7
 80067a0:	f000 f87a 	bl	8006898 <_printf_i>
 80067a4:	e7eb      	b.n	800677e <_svfiprintf_r+0x1c2>
 80067a6:	bf00      	nop
 80067a8:	0800706c 	.word	0x0800706c
 80067ac:	08007076 	.word	0x08007076
 80067b0:	00000000 	.word	0x00000000
 80067b4:	08006505 	.word	0x08006505
 80067b8:	08007072 	.word	0x08007072

080067bc <_printf_common>:
 80067bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c0:	4616      	mov	r6, r2
 80067c2:	4699      	mov	r9, r3
 80067c4:	688a      	ldr	r2, [r1, #8]
 80067c6:	690b      	ldr	r3, [r1, #16]
 80067c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067cc:	4293      	cmp	r3, r2
 80067ce:	bfb8      	it	lt
 80067d0:	4613      	movlt	r3, r2
 80067d2:	6033      	str	r3, [r6, #0]
 80067d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067d8:	4607      	mov	r7, r0
 80067da:	460c      	mov	r4, r1
 80067dc:	b10a      	cbz	r2, 80067e2 <_printf_common+0x26>
 80067de:	3301      	adds	r3, #1
 80067e0:	6033      	str	r3, [r6, #0]
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	0699      	lsls	r1, r3, #26
 80067e6:	bf42      	ittt	mi
 80067e8:	6833      	ldrmi	r3, [r6, #0]
 80067ea:	3302      	addmi	r3, #2
 80067ec:	6033      	strmi	r3, [r6, #0]
 80067ee:	6825      	ldr	r5, [r4, #0]
 80067f0:	f015 0506 	ands.w	r5, r5, #6
 80067f4:	d106      	bne.n	8006804 <_printf_common+0x48>
 80067f6:	f104 0a19 	add.w	sl, r4, #25
 80067fa:	68e3      	ldr	r3, [r4, #12]
 80067fc:	6832      	ldr	r2, [r6, #0]
 80067fe:	1a9b      	subs	r3, r3, r2
 8006800:	42ab      	cmp	r3, r5
 8006802:	dc26      	bgt.n	8006852 <_printf_common+0x96>
 8006804:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006808:	1e13      	subs	r3, r2, #0
 800680a:	6822      	ldr	r2, [r4, #0]
 800680c:	bf18      	it	ne
 800680e:	2301      	movne	r3, #1
 8006810:	0692      	lsls	r2, r2, #26
 8006812:	d42b      	bmi.n	800686c <_printf_common+0xb0>
 8006814:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006818:	4649      	mov	r1, r9
 800681a:	4638      	mov	r0, r7
 800681c:	47c0      	blx	r8
 800681e:	3001      	adds	r0, #1
 8006820:	d01e      	beq.n	8006860 <_printf_common+0xa4>
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	68e5      	ldr	r5, [r4, #12]
 8006826:	6832      	ldr	r2, [r6, #0]
 8006828:	f003 0306 	and.w	r3, r3, #6
 800682c:	2b04      	cmp	r3, #4
 800682e:	bf08      	it	eq
 8006830:	1aad      	subeq	r5, r5, r2
 8006832:	68a3      	ldr	r3, [r4, #8]
 8006834:	6922      	ldr	r2, [r4, #16]
 8006836:	bf0c      	ite	eq
 8006838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800683c:	2500      	movne	r5, #0
 800683e:	4293      	cmp	r3, r2
 8006840:	bfc4      	itt	gt
 8006842:	1a9b      	subgt	r3, r3, r2
 8006844:	18ed      	addgt	r5, r5, r3
 8006846:	2600      	movs	r6, #0
 8006848:	341a      	adds	r4, #26
 800684a:	42b5      	cmp	r5, r6
 800684c:	d11a      	bne.n	8006884 <_printf_common+0xc8>
 800684e:	2000      	movs	r0, #0
 8006850:	e008      	b.n	8006864 <_printf_common+0xa8>
 8006852:	2301      	movs	r3, #1
 8006854:	4652      	mov	r2, sl
 8006856:	4649      	mov	r1, r9
 8006858:	4638      	mov	r0, r7
 800685a:	47c0      	blx	r8
 800685c:	3001      	adds	r0, #1
 800685e:	d103      	bne.n	8006868 <_printf_common+0xac>
 8006860:	f04f 30ff 	mov.w	r0, #4294967295
 8006864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006868:	3501      	adds	r5, #1
 800686a:	e7c6      	b.n	80067fa <_printf_common+0x3e>
 800686c:	18e1      	adds	r1, r4, r3
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	2030      	movs	r0, #48	; 0x30
 8006872:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006876:	4422      	add	r2, r4
 8006878:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800687c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006880:	3302      	adds	r3, #2
 8006882:	e7c7      	b.n	8006814 <_printf_common+0x58>
 8006884:	2301      	movs	r3, #1
 8006886:	4622      	mov	r2, r4
 8006888:	4649      	mov	r1, r9
 800688a:	4638      	mov	r0, r7
 800688c:	47c0      	blx	r8
 800688e:	3001      	adds	r0, #1
 8006890:	d0e6      	beq.n	8006860 <_printf_common+0xa4>
 8006892:	3601      	adds	r6, #1
 8006894:	e7d9      	b.n	800684a <_printf_common+0x8e>
	...

08006898 <_printf_i>:
 8006898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800689c:	7e0f      	ldrb	r7, [r1, #24]
 800689e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068a0:	2f78      	cmp	r7, #120	; 0x78
 80068a2:	4691      	mov	r9, r2
 80068a4:	4680      	mov	r8, r0
 80068a6:	460c      	mov	r4, r1
 80068a8:	469a      	mov	sl, r3
 80068aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068ae:	d807      	bhi.n	80068c0 <_printf_i+0x28>
 80068b0:	2f62      	cmp	r7, #98	; 0x62
 80068b2:	d80a      	bhi.n	80068ca <_printf_i+0x32>
 80068b4:	2f00      	cmp	r7, #0
 80068b6:	f000 80d8 	beq.w	8006a6a <_printf_i+0x1d2>
 80068ba:	2f58      	cmp	r7, #88	; 0x58
 80068bc:	f000 80a3 	beq.w	8006a06 <_printf_i+0x16e>
 80068c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068c8:	e03a      	b.n	8006940 <_printf_i+0xa8>
 80068ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068ce:	2b15      	cmp	r3, #21
 80068d0:	d8f6      	bhi.n	80068c0 <_printf_i+0x28>
 80068d2:	a101      	add	r1, pc, #4	; (adr r1, 80068d8 <_printf_i+0x40>)
 80068d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068d8:	08006931 	.word	0x08006931
 80068dc:	08006945 	.word	0x08006945
 80068e0:	080068c1 	.word	0x080068c1
 80068e4:	080068c1 	.word	0x080068c1
 80068e8:	080068c1 	.word	0x080068c1
 80068ec:	080068c1 	.word	0x080068c1
 80068f0:	08006945 	.word	0x08006945
 80068f4:	080068c1 	.word	0x080068c1
 80068f8:	080068c1 	.word	0x080068c1
 80068fc:	080068c1 	.word	0x080068c1
 8006900:	080068c1 	.word	0x080068c1
 8006904:	08006a51 	.word	0x08006a51
 8006908:	08006975 	.word	0x08006975
 800690c:	08006a33 	.word	0x08006a33
 8006910:	080068c1 	.word	0x080068c1
 8006914:	080068c1 	.word	0x080068c1
 8006918:	08006a73 	.word	0x08006a73
 800691c:	080068c1 	.word	0x080068c1
 8006920:	08006975 	.word	0x08006975
 8006924:	080068c1 	.word	0x080068c1
 8006928:	080068c1 	.word	0x080068c1
 800692c:	08006a3b 	.word	0x08006a3b
 8006930:	682b      	ldr	r3, [r5, #0]
 8006932:	1d1a      	adds	r2, r3, #4
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	602a      	str	r2, [r5, #0]
 8006938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800693c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006940:	2301      	movs	r3, #1
 8006942:	e0a3      	b.n	8006a8c <_printf_i+0x1f4>
 8006944:	6820      	ldr	r0, [r4, #0]
 8006946:	6829      	ldr	r1, [r5, #0]
 8006948:	0606      	lsls	r6, r0, #24
 800694a:	f101 0304 	add.w	r3, r1, #4
 800694e:	d50a      	bpl.n	8006966 <_printf_i+0xce>
 8006950:	680e      	ldr	r6, [r1, #0]
 8006952:	602b      	str	r3, [r5, #0]
 8006954:	2e00      	cmp	r6, #0
 8006956:	da03      	bge.n	8006960 <_printf_i+0xc8>
 8006958:	232d      	movs	r3, #45	; 0x2d
 800695a:	4276      	negs	r6, r6
 800695c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006960:	485e      	ldr	r0, [pc, #376]	; (8006adc <_printf_i+0x244>)
 8006962:	230a      	movs	r3, #10
 8006964:	e019      	b.n	800699a <_printf_i+0x102>
 8006966:	680e      	ldr	r6, [r1, #0]
 8006968:	602b      	str	r3, [r5, #0]
 800696a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800696e:	bf18      	it	ne
 8006970:	b236      	sxthne	r6, r6
 8006972:	e7ef      	b.n	8006954 <_printf_i+0xbc>
 8006974:	682b      	ldr	r3, [r5, #0]
 8006976:	6820      	ldr	r0, [r4, #0]
 8006978:	1d19      	adds	r1, r3, #4
 800697a:	6029      	str	r1, [r5, #0]
 800697c:	0601      	lsls	r1, r0, #24
 800697e:	d501      	bpl.n	8006984 <_printf_i+0xec>
 8006980:	681e      	ldr	r6, [r3, #0]
 8006982:	e002      	b.n	800698a <_printf_i+0xf2>
 8006984:	0646      	lsls	r6, r0, #25
 8006986:	d5fb      	bpl.n	8006980 <_printf_i+0xe8>
 8006988:	881e      	ldrh	r6, [r3, #0]
 800698a:	4854      	ldr	r0, [pc, #336]	; (8006adc <_printf_i+0x244>)
 800698c:	2f6f      	cmp	r7, #111	; 0x6f
 800698e:	bf0c      	ite	eq
 8006990:	2308      	moveq	r3, #8
 8006992:	230a      	movne	r3, #10
 8006994:	2100      	movs	r1, #0
 8006996:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800699a:	6865      	ldr	r5, [r4, #4]
 800699c:	60a5      	str	r5, [r4, #8]
 800699e:	2d00      	cmp	r5, #0
 80069a0:	bfa2      	ittt	ge
 80069a2:	6821      	ldrge	r1, [r4, #0]
 80069a4:	f021 0104 	bicge.w	r1, r1, #4
 80069a8:	6021      	strge	r1, [r4, #0]
 80069aa:	b90e      	cbnz	r6, 80069b0 <_printf_i+0x118>
 80069ac:	2d00      	cmp	r5, #0
 80069ae:	d04d      	beq.n	8006a4c <_printf_i+0x1b4>
 80069b0:	4615      	mov	r5, r2
 80069b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80069b6:	fb03 6711 	mls	r7, r3, r1, r6
 80069ba:	5dc7      	ldrb	r7, [r0, r7]
 80069bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069c0:	4637      	mov	r7, r6
 80069c2:	42bb      	cmp	r3, r7
 80069c4:	460e      	mov	r6, r1
 80069c6:	d9f4      	bls.n	80069b2 <_printf_i+0x11a>
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d10b      	bne.n	80069e4 <_printf_i+0x14c>
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	07de      	lsls	r6, r3, #31
 80069d0:	d508      	bpl.n	80069e4 <_printf_i+0x14c>
 80069d2:	6923      	ldr	r3, [r4, #16]
 80069d4:	6861      	ldr	r1, [r4, #4]
 80069d6:	4299      	cmp	r1, r3
 80069d8:	bfde      	ittt	le
 80069da:	2330      	movle	r3, #48	; 0x30
 80069dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80069e4:	1b52      	subs	r2, r2, r5
 80069e6:	6122      	str	r2, [r4, #16]
 80069e8:	f8cd a000 	str.w	sl, [sp]
 80069ec:	464b      	mov	r3, r9
 80069ee:	aa03      	add	r2, sp, #12
 80069f0:	4621      	mov	r1, r4
 80069f2:	4640      	mov	r0, r8
 80069f4:	f7ff fee2 	bl	80067bc <_printf_common>
 80069f8:	3001      	adds	r0, #1
 80069fa:	d14c      	bne.n	8006a96 <_printf_i+0x1fe>
 80069fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006a00:	b004      	add	sp, #16
 8006a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a06:	4835      	ldr	r0, [pc, #212]	; (8006adc <_printf_i+0x244>)
 8006a08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a0c:	6829      	ldr	r1, [r5, #0]
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a14:	6029      	str	r1, [r5, #0]
 8006a16:	061d      	lsls	r5, r3, #24
 8006a18:	d514      	bpl.n	8006a44 <_printf_i+0x1ac>
 8006a1a:	07df      	lsls	r7, r3, #31
 8006a1c:	bf44      	itt	mi
 8006a1e:	f043 0320 	orrmi.w	r3, r3, #32
 8006a22:	6023      	strmi	r3, [r4, #0]
 8006a24:	b91e      	cbnz	r6, 8006a2e <_printf_i+0x196>
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	f023 0320 	bic.w	r3, r3, #32
 8006a2c:	6023      	str	r3, [r4, #0]
 8006a2e:	2310      	movs	r3, #16
 8006a30:	e7b0      	b.n	8006994 <_printf_i+0xfc>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	f043 0320 	orr.w	r3, r3, #32
 8006a38:	6023      	str	r3, [r4, #0]
 8006a3a:	2378      	movs	r3, #120	; 0x78
 8006a3c:	4828      	ldr	r0, [pc, #160]	; (8006ae0 <_printf_i+0x248>)
 8006a3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a42:	e7e3      	b.n	8006a0c <_printf_i+0x174>
 8006a44:	0659      	lsls	r1, r3, #25
 8006a46:	bf48      	it	mi
 8006a48:	b2b6      	uxthmi	r6, r6
 8006a4a:	e7e6      	b.n	8006a1a <_printf_i+0x182>
 8006a4c:	4615      	mov	r5, r2
 8006a4e:	e7bb      	b.n	80069c8 <_printf_i+0x130>
 8006a50:	682b      	ldr	r3, [r5, #0]
 8006a52:	6826      	ldr	r6, [r4, #0]
 8006a54:	6961      	ldr	r1, [r4, #20]
 8006a56:	1d18      	adds	r0, r3, #4
 8006a58:	6028      	str	r0, [r5, #0]
 8006a5a:	0635      	lsls	r5, r6, #24
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	d501      	bpl.n	8006a64 <_printf_i+0x1cc>
 8006a60:	6019      	str	r1, [r3, #0]
 8006a62:	e002      	b.n	8006a6a <_printf_i+0x1d2>
 8006a64:	0670      	lsls	r0, r6, #25
 8006a66:	d5fb      	bpl.n	8006a60 <_printf_i+0x1c8>
 8006a68:	8019      	strh	r1, [r3, #0]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	6123      	str	r3, [r4, #16]
 8006a6e:	4615      	mov	r5, r2
 8006a70:	e7ba      	b.n	80069e8 <_printf_i+0x150>
 8006a72:	682b      	ldr	r3, [r5, #0]
 8006a74:	1d1a      	adds	r2, r3, #4
 8006a76:	602a      	str	r2, [r5, #0]
 8006a78:	681d      	ldr	r5, [r3, #0]
 8006a7a:	6862      	ldr	r2, [r4, #4]
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f7f9 fbde 	bl	8000240 <memchr>
 8006a84:	b108      	cbz	r0, 8006a8a <_printf_i+0x1f2>
 8006a86:	1b40      	subs	r0, r0, r5
 8006a88:	6060      	str	r0, [r4, #4]
 8006a8a:	6863      	ldr	r3, [r4, #4]
 8006a8c:	6123      	str	r3, [r4, #16]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a94:	e7a8      	b.n	80069e8 <_printf_i+0x150>
 8006a96:	6923      	ldr	r3, [r4, #16]
 8006a98:	462a      	mov	r2, r5
 8006a9a:	4649      	mov	r1, r9
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	47d0      	blx	sl
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	d0ab      	beq.n	80069fc <_printf_i+0x164>
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	079b      	lsls	r3, r3, #30
 8006aa8:	d413      	bmi.n	8006ad2 <_printf_i+0x23a>
 8006aaa:	68e0      	ldr	r0, [r4, #12]
 8006aac:	9b03      	ldr	r3, [sp, #12]
 8006aae:	4298      	cmp	r0, r3
 8006ab0:	bfb8      	it	lt
 8006ab2:	4618      	movlt	r0, r3
 8006ab4:	e7a4      	b.n	8006a00 <_printf_i+0x168>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	4632      	mov	r2, r6
 8006aba:	4649      	mov	r1, r9
 8006abc:	4640      	mov	r0, r8
 8006abe:	47d0      	blx	sl
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	d09b      	beq.n	80069fc <_printf_i+0x164>
 8006ac4:	3501      	adds	r5, #1
 8006ac6:	68e3      	ldr	r3, [r4, #12]
 8006ac8:	9903      	ldr	r1, [sp, #12]
 8006aca:	1a5b      	subs	r3, r3, r1
 8006acc:	42ab      	cmp	r3, r5
 8006ace:	dcf2      	bgt.n	8006ab6 <_printf_i+0x21e>
 8006ad0:	e7eb      	b.n	8006aaa <_printf_i+0x212>
 8006ad2:	2500      	movs	r5, #0
 8006ad4:	f104 0619 	add.w	r6, r4, #25
 8006ad8:	e7f5      	b.n	8006ac6 <_printf_i+0x22e>
 8006ada:	bf00      	nop
 8006adc:	0800707d 	.word	0x0800707d
 8006ae0:	0800708e 	.word	0x0800708e

08006ae4 <memcpy>:
 8006ae4:	440a      	add	r2, r1
 8006ae6:	4291      	cmp	r1, r2
 8006ae8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006aec:	d100      	bne.n	8006af0 <memcpy+0xc>
 8006aee:	4770      	bx	lr
 8006af0:	b510      	push	{r4, lr}
 8006af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006af6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006afa:	4291      	cmp	r1, r2
 8006afc:	d1f9      	bne.n	8006af2 <memcpy+0xe>
 8006afe:	bd10      	pop	{r4, pc}

08006b00 <memmove>:
 8006b00:	4288      	cmp	r0, r1
 8006b02:	b510      	push	{r4, lr}
 8006b04:	eb01 0402 	add.w	r4, r1, r2
 8006b08:	d902      	bls.n	8006b10 <memmove+0x10>
 8006b0a:	4284      	cmp	r4, r0
 8006b0c:	4623      	mov	r3, r4
 8006b0e:	d807      	bhi.n	8006b20 <memmove+0x20>
 8006b10:	1e43      	subs	r3, r0, #1
 8006b12:	42a1      	cmp	r1, r4
 8006b14:	d008      	beq.n	8006b28 <memmove+0x28>
 8006b16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b1e:	e7f8      	b.n	8006b12 <memmove+0x12>
 8006b20:	4402      	add	r2, r0
 8006b22:	4601      	mov	r1, r0
 8006b24:	428a      	cmp	r2, r1
 8006b26:	d100      	bne.n	8006b2a <memmove+0x2a>
 8006b28:	bd10      	pop	{r4, pc}
 8006b2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b32:	e7f7      	b.n	8006b24 <memmove+0x24>

08006b34 <_free_r>:
 8006b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b36:	2900      	cmp	r1, #0
 8006b38:	d044      	beq.n	8006bc4 <_free_r+0x90>
 8006b3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b3e:	9001      	str	r0, [sp, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f1a1 0404 	sub.w	r4, r1, #4
 8006b46:	bfb8      	it	lt
 8006b48:	18e4      	addlt	r4, r4, r3
 8006b4a:	f000 f913 	bl	8006d74 <__malloc_lock>
 8006b4e:	4a1e      	ldr	r2, [pc, #120]	; (8006bc8 <_free_r+0x94>)
 8006b50:	9801      	ldr	r0, [sp, #4]
 8006b52:	6813      	ldr	r3, [r2, #0]
 8006b54:	b933      	cbnz	r3, 8006b64 <_free_r+0x30>
 8006b56:	6063      	str	r3, [r4, #4]
 8006b58:	6014      	str	r4, [r2, #0]
 8006b5a:	b003      	add	sp, #12
 8006b5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b60:	f000 b90e 	b.w	8006d80 <__malloc_unlock>
 8006b64:	42a3      	cmp	r3, r4
 8006b66:	d908      	bls.n	8006b7a <_free_r+0x46>
 8006b68:	6825      	ldr	r5, [r4, #0]
 8006b6a:	1961      	adds	r1, r4, r5
 8006b6c:	428b      	cmp	r3, r1
 8006b6e:	bf01      	itttt	eq
 8006b70:	6819      	ldreq	r1, [r3, #0]
 8006b72:	685b      	ldreq	r3, [r3, #4]
 8006b74:	1949      	addeq	r1, r1, r5
 8006b76:	6021      	streq	r1, [r4, #0]
 8006b78:	e7ed      	b.n	8006b56 <_free_r+0x22>
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	b10b      	cbz	r3, 8006b84 <_free_r+0x50>
 8006b80:	42a3      	cmp	r3, r4
 8006b82:	d9fa      	bls.n	8006b7a <_free_r+0x46>
 8006b84:	6811      	ldr	r1, [r2, #0]
 8006b86:	1855      	adds	r5, r2, r1
 8006b88:	42a5      	cmp	r5, r4
 8006b8a:	d10b      	bne.n	8006ba4 <_free_r+0x70>
 8006b8c:	6824      	ldr	r4, [r4, #0]
 8006b8e:	4421      	add	r1, r4
 8006b90:	1854      	adds	r4, r2, r1
 8006b92:	42a3      	cmp	r3, r4
 8006b94:	6011      	str	r1, [r2, #0]
 8006b96:	d1e0      	bne.n	8006b5a <_free_r+0x26>
 8006b98:	681c      	ldr	r4, [r3, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	6053      	str	r3, [r2, #4]
 8006b9e:	4421      	add	r1, r4
 8006ba0:	6011      	str	r1, [r2, #0]
 8006ba2:	e7da      	b.n	8006b5a <_free_r+0x26>
 8006ba4:	d902      	bls.n	8006bac <_free_r+0x78>
 8006ba6:	230c      	movs	r3, #12
 8006ba8:	6003      	str	r3, [r0, #0]
 8006baa:	e7d6      	b.n	8006b5a <_free_r+0x26>
 8006bac:	6825      	ldr	r5, [r4, #0]
 8006bae:	1961      	adds	r1, r4, r5
 8006bb0:	428b      	cmp	r3, r1
 8006bb2:	bf04      	itt	eq
 8006bb4:	6819      	ldreq	r1, [r3, #0]
 8006bb6:	685b      	ldreq	r3, [r3, #4]
 8006bb8:	6063      	str	r3, [r4, #4]
 8006bba:	bf04      	itt	eq
 8006bbc:	1949      	addeq	r1, r1, r5
 8006bbe:	6021      	streq	r1, [r4, #0]
 8006bc0:	6054      	str	r4, [r2, #4]
 8006bc2:	e7ca      	b.n	8006b5a <_free_r+0x26>
 8006bc4:	b003      	add	sp, #12
 8006bc6:	bd30      	pop	{r4, r5, pc}
 8006bc8:	20000ae0 	.word	0x20000ae0

08006bcc <sbrk_aligned>:
 8006bcc:	b570      	push	{r4, r5, r6, lr}
 8006bce:	4e0e      	ldr	r6, [pc, #56]	; (8006c08 <sbrk_aligned+0x3c>)
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	6831      	ldr	r1, [r6, #0]
 8006bd4:	4605      	mov	r5, r0
 8006bd6:	b911      	cbnz	r1, 8006bde <sbrk_aligned+0x12>
 8006bd8:	f000 f8bc 	bl	8006d54 <_sbrk_r>
 8006bdc:	6030      	str	r0, [r6, #0]
 8006bde:	4621      	mov	r1, r4
 8006be0:	4628      	mov	r0, r5
 8006be2:	f000 f8b7 	bl	8006d54 <_sbrk_r>
 8006be6:	1c43      	adds	r3, r0, #1
 8006be8:	d00a      	beq.n	8006c00 <sbrk_aligned+0x34>
 8006bea:	1cc4      	adds	r4, r0, #3
 8006bec:	f024 0403 	bic.w	r4, r4, #3
 8006bf0:	42a0      	cmp	r0, r4
 8006bf2:	d007      	beq.n	8006c04 <sbrk_aligned+0x38>
 8006bf4:	1a21      	subs	r1, r4, r0
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f000 f8ac 	bl	8006d54 <_sbrk_r>
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d101      	bne.n	8006c04 <sbrk_aligned+0x38>
 8006c00:	f04f 34ff 	mov.w	r4, #4294967295
 8006c04:	4620      	mov	r0, r4
 8006c06:	bd70      	pop	{r4, r5, r6, pc}
 8006c08:	20000ae4 	.word	0x20000ae4

08006c0c <_malloc_r>:
 8006c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c10:	1ccd      	adds	r5, r1, #3
 8006c12:	f025 0503 	bic.w	r5, r5, #3
 8006c16:	3508      	adds	r5, #8
 8006c18:	2d0c      	cmp	r5, #12
 8006c1a:	bf38      	it	cc
 8006c1c:	250c      	movcc	r5, #12
 8006c1e:	2d00      	cmp	r5, #0
 8006c20:	4607      	mov	r7, r0
 8006c22:	db01      	blt.n	8006c28 <_malloc_r+0x1c>
 8006c24:	42a9      	cmp	r1, r5
 8006c26:	d905      	bls.n	8006c34 <_malloc_r+0x28>
 8006c28:	230c      	movs	r3, #12
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	2600      	movs	r6, #0
 8006c2e:	4630      	mov	r0, r6
 8006c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c34:	4e2e      	ldr	r6, [pc, #184]	; (8006cf0 <_malloc_r+0xe4>)
 8006c36:	f000 f89d 	bl	8006d74 <__malloc_lock>
 8006c3a:	6833      	ldr	r3, [r6, #0]
 8006c3c:	461c      	mov	r4, r3
 8006c3e:	bb34      	cbnz	r4, 8006c8e <_malloc_r+0x82>
 8006c40:	4629      	mov	r1, r5
 8006c42:	4638      	mov	r0, r7
 8006c44:	f7ff ffc2 	bl	8006bcc <sbrk_aligned>
 8006c48:	1c43      	adds	r3, r0, #1
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	d14d      	bne.n	8006cea <_malloc_r+0xde>
 8006c4e:	6834      	ldr	r4, [r6, #0]
 8006c50:	4626      	mov	r6, r4
 8006c52:	2e00      	cmp	r6, #0
 8006c54:	d140      	bne.n	8006cd8 <_malloc_r+0xcc>
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	4631      	mov	r1, r6
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	eb04 0803 	add.w	r8, r4, r3
 8006c60:	f000 f878 	bl	8006d54 <_sbrk_r>
 8006c64:	4580      	cmp	r8, r0
 8006c66:	d13a      	bne.n	8006cde <_malloc_r+0xd2>
 8006c68:	6821      	ldr	r1, [r4, #0]
 8006c6a:	3503      	adds	r5, #3
 8006c6c:	1a6d      	subs	r5, r5, r1
 8006c6e:	f025 0503 	bic.w	r5, r5, #3
 8006c72:	3508      	adds	r5, #8
 8006c74:	2d0c      	cmp	r5, #12
 8006c76:	bf38      	it	cc
 8006c78:	250c      	movcc	r5, #12
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	4638      	mov	r0, r7
 8006c7e:	f7ff ffa5 	bl	8006bcc <sbrk_aligned>
 8006c82:	3001      	adds	r0, #1
 8006c84:	d02b      	beq.n	8006cde <_malloc_r+0xd2>
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	442b      	add	r3, r5
 8006c8a:	6023      	str	r3, [r4, #0]
 8006c8c:	e00e      	b.n	8006cac <_malloc_r+0xa0>
 8006c8e:	6822      	ldr	r2, [r4, #0]
 8006c90:	1b52      	subs	r2, r2, r5
 8006c92:	d41e      	bmi.n	8006cd2 <_malloc_r+0xc6>
 8006c94:	2a0b      	cmp	r2, #11
 8006c96:	d916      	bls.n	8006cc6 <_malloc_r+0xba>
 8006c98:	1961      	adds	r1, r4, r5
 8006c9a:	42a3      	cmp	r3, r4
 8006c9c:	6025      	str	r5, [r4, #0]
 8006c9e:	bf18      	it	ne
 8006ca0:	6059      	strne	r1, [r3, #4]
 8006ca2:	6863      	ldr	r3, [r4, #4]
 8006ca4:	bf08      	it	eq
 8006ca6:	6031      	streq	r1, [r6, #0]
 8006ca8:	5162      	str	r2, [r4, r5]
 8006caa:	604b      	str	r3, [r1, #4]
 8006cac:	4638      	mov	r0, r7
 8006cae:	f104 060b 	add.w	r6, r4, #11
 8006cb2:	f000 f865 	bl	8006d80 <__malloc_unlock>
 8006cb6:	f026 0607 	bic.w	r6, r6, #7
 8006cba:	1d23      	adds	r3, r4, #4
 8006cbc:	1af2      	subs	r2, r6, r3
 8006cbe:	d0b6      	beq.n	8006c2e <_malloc_r+0x22>
 8006cc0:	1b9b      	subs	r3, r3, r6
 8006cc2:	50a3      	str	r3, [r4, r2]
 8006cc4:	e7b3      	b.n	8006c2e <_malloc_r+0x22>
 8006cc6:	6862      	ldr	r2, [r4, #4]
 8006cc8:	42a3      	cmp	r3, r4
 8006cca:	bf0c      	ite	eq
 8006ccc:	6032      	streq	r2, [r6, #0]
 8006cce:	605a      	strne	r2, [r3, #4]
 8006cd0:	e7ec      	b.n	8006cac <_malloc_r+0xa0>
 8006cd2:	4623      	mov	r3, r4
 8006cd4:	6864      	ldr	r4, [r4, #4]
 8006cd6:	e7b2      	b.n	8006c3e <_malloc_r+0x32>
 8006cd8:	4634      	mov	r4, r6
 8006cda:	6876      	ldr	r6, [r6, #4]
 8006cdc:	e7b9      	b.n	8006c52 <_malloc_r+0x46>
 8006cde:	230c      	movs	r3, #12
 8006ce0:	603b      	str	r3, [r7, #0]
 8006ce2:	4638      	mov	r0, r7
 8006ce4:	f000 f84c 	bl	8006d80 <__malloc_unlock>
 8006ce8:	e7a1      	b.n	8006c2e <_malloc_r+0x22>
 8006cea:	6025      	str	r5, [r4, #0]
 8006cec:	e7de      	b.n	8006cac <_malloc_r+0xa0>
 8006cee:	bf00      	nop
 8006cf0:	20000ae0 	.word	0x20000ae0

08006cf4 <_realloc_r>:
 8006cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf8:	4680      	mov	r8, r0
 8006cfa:	4614      	mov	r4, r2
 8006cfc:	460e      	mov	r6, r1
 8006cfe:	b921      	cbnz	r1, 8006d0a <_realloc_r+0x16>
 8006d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d04:	4611      	mov	r1, r2
 8006d06:	f7ff bf81 	b.w	8006c0c <_malloc_r>
 8006d0a:	b92a      	cbnz	r2, 8006d18 <_realloc_r+0x24>
 8006d0c:	f7ff ff12 	bl	8006b34 <_free_r>
 8006d10:	4625      	mov	r5, r4
 8006d12:	4628      	mov	r0, r5
 8006d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d18:	f000 f838 	bl	8006d8c <_malloc_usable_size_r>
 8006d1c:	4284      	cmp	r4, r0
 8006d1e:	4607      	mov	r7, r0
 8006d20:	d802      	bhi.n	8006d28 <_realloc_r+0x34>
 8006d22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d26:	d812      	bhi.n	8006d4e <_realloc_r+0x5a>
 8006d28:	4621      	mov	r1, r4
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	f7ff ff6e 	bl	8006c0c <_malloc_r>
 8006d30:	4605      	mov	r5, r0
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d0ed      	beq.n	8006d12 <_realloc_r+0x1e>
 8006d36:	42bc      	cmp	r4, r7
 8006d38:	4622      	mov	r2, r4
 8006d3a:	4631      	mov	r1, r6
 8006d3c:	bf28      	it	cs
 8006d3e:	463a      	movcs	r2, r7
 8006d40:	f7ff fed0 	bl	8006ae4 <memcpy>
 8006d44:	4631      	mov	r1, r6
 8006d46:	4640      	mov	r0, r8
 8006d48:	f7ff fef4 	bl	8006b34 <_free_r>
 8006d4c:	e7e1      	b.n	8006d12 <_realloc_r+0x1e>
 8006d4e:	4635      	mov	r5, r6
 8006d50:	e7df      	b.n	8006d12 <_realloc_r+0x1e>
	...

08006d54 <_sbrk_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4d06      	ldr	r5, [pc, #24]	; (8006d70 <_sbrk_r+0x1c>)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	4608      	mov	r0, r1
 8006d5e:	602b      	str	r3, [r5, #0]
 8006d60:	f7fa fb88 	bl	8001474 <_sbrk>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d102      	bne.n	8006d6e <_sbrk_r+0x1a>
 8006d68:	682b      	ldr	r3, [r5, #0]
 8006d6a:	b103      	cbz	r3, 8006d6e <_sbrk_r+0x1a>
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	20000ae8 	.word	0x20000ae8

08006d74 <__malloc_lock>:
 8006d74:	4801      	ldr	r0, [pc, #4]	; (8006d7c <__malloc_lock+0x8>)
 8006d76:	f000 b811 	b.w	8006d9c <__retarget_lock_acquire_recursive>
 8006d7a:	bf00      	nop
 8006d7c:	20000aec 	.word	0x20000aec

08006d80 <__malloc_unlock>:
 8006d80:	4801      	ldr	r0, [pc, #4]	; (8006d88 <__malloc_unlock+0x8>)
 8006d82:	f000 b80c 	b.w	8006d9e <__retarget_lock_release_recursive>
 8006d86:	bf00      	nop
 8006d88:	20000aec 	.word	0x20000aec

08006d8c <_malloc_usable_size_r>:
 8006d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d90:	1f18      	subs	r0, r3, #4
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	bfbc      	itt	lt
 8006d96:	580b      	ldrlt	r3, [r1, r0]
 8006d98:	18c0      	addlt	r0, r0, r3
 8006d9a:	4770      	bx	lr

08006d9c <__retarget_lock_acquire_recursive>:
 8006d9c:	4770      	bx	lr

08006d9e <__retarget_lock_release_recursive>:
 8006d9e:	4770      	bx	lr

08006da0 <_init>:
 8006da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da2:	bf00      	nop
 8006da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da6:	bc08      	pop	{r3}
 8006da8:	469e      	mov	lr, r3
 8006daa:	4770      	bx	lr

08006dac <_fini>:
 8006dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dae:	bf00      	nop
 8006db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db2:	bc08      	pop	{r3}
 8006db4:	469e      	mov	lr, r3
 8006db6:	4770      	bx	lr
