
CAN_Master2_sniffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cd0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004ed0  08004ed0  00014ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f74  08004f74  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f7c  08004f7c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f7c  08004f7c  00014f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f80  08004f80  00014f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  08004ff4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08004ff4  00020190  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed2d  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c5  00000000  00000000  0002edcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  00031290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  00031cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286d7  00000000  00000000  00032648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3aa  00000000  00000000  0005ad1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f55c7  00000000  00000000  000690c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e690  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c10  00000000  00000000  0015e6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004eb8 	.word	0x08004eb8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004eb8 	.word	0x08004eb8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <Sniffer_Init>:
/***********************************************************************************************************
 ******************************************* Exported functions ********************************************
 ***********************************************************************************************************/

void Sniffer_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef canfil;
	canfil.FilterBank = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
	canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
	canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
    canfil.FilterIdHigh = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	603b      	str	r3, [r7, #0]
	canfil.FilterIdLow = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
	canfil.FilterMaskIdHigh = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
	canfil.FilterMaskIdLow = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
	canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 8000606:	2301      	movs	r3, #1
 8000608:	61fb      	str	r3, [r7, #28]
	canfil.FilterActivation = ENABLE;
 800060a:	2301      	movs	r3, #1
 800060c:	623b      	str	r3, [r7, #32]
	canfil.SlaveStartFilterBank = 14;
 800060e:	230e      	movs	r3, #14
 8000610:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1,&canfil); //Initialize CAN Filter
 8000612:	463b      	mov	r3, r7
 8000614:	4619      	mov	r1, r3
 8000616:	480b      	ldr	r0, [pc, #44]	; (8000644 <Sniffer_Init+0x60>)
 8000618:	f000 fd24 	bl	8001064 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan1);
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <Sniffer_Init+0x60>)
 800061e:	f000 fe0d 	bl	800123c <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING); // IRQ notification
 8000622:	2112      	movs	r1, #18
 8000624:	4807      	ldr	r0, [pc, #28]	; (8000644 <Sniffer_Init+0x60>)
 8000626:	f000 ff5f 	bl	80014e8 <HAL_CAN_ActivateNotification>

	sprintf(Sniffer_Msg, "CAN Master 2 Sniffer initialized\r\n");
 800062a:	4907      	ldr	r1, [pc, #28]	; (8000648 <Sniffer_Init+0x64>)
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <Sniffer_Init+0x68>)
 800062e:	f003 ffd5 	bl	80045dc <siprintf>
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)Sniffer_Msg, sizeof(Sniffer_Msg));
 8000632:	223c      	movs	r2, #60	; 0x3c
 8000634:	4905      	ldr	r1, [pc, #20]	; (800064c <Sniffer_Init+0x68>)
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <Sniffer_Init+0x6c>)
 8000638:	f002 feb6 	bl	80033a8 <HAL_UART_Transmit_IT>
}
 800063c:	bf00      	nop
 800063e:	3728      	adds	r7, #40	; 0x28
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200000c8 	.word	0x200000c8
 8000648:	08004ed0 	.word	0x08004ed0
 800064c:	2000008c 	.word	0x2000008c
 8000650:	200000f4 	.word	0x200000f4

08000654 <Sniffer_Transmit>:



void Sniffer_Transmit(uint8_t* buffer, uint32_t len, uint32_t id)
{
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000656:	b093      	sub	sp, #76	; 0x4c
 8000658:	af0a      	add	r7, sp, #40	; 0x28
 800065a:	6178      	str	r0, [r7, #20]
 800065c:	6139      	str	r1, [r7, #16]
 800065e:	60fa      	str	r2, [r7, #12]
	uint32_t time = HAL_GetTick();
 8000660:	f000 fbf8 	bl	8000e54 <HAL_GetTick>
 8000664:	61f8      	str	r0, [r7, #28]
	memset(Sniffer_Msg, '\0', sizeof(Sniffer_Msg));
 8000666:	223c      	movs	r2, #60	; 0x3c
 8000668:	2100      	movs	r1, #0
 800066a:	4820      	ldr	r0, [pc, #128]	; (80006ec <Sniffer_Transmit+0x98>)
 800066c:	f003 ffae 	bl	80045cc <memset>
	sprintf(Sniffer_Msg, "%lu ID: %x DLC: %x DATA: %x %x %x %x %x %x %x %x\r\n", \
			time, (uint16_t)id, (uint8_t)len, buffer[0], buffer[1], buffer[2], buffer[3], \
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	b29b      	uxth	r3, r3
	sprintf(Sniffer_Msg, "%lu ID: %x DLC: %x DATA: %x %x %x %x %x %x %x %x\r\n", \
 8000674:	469c      	mov	ip, r3
			time, (uint16_t)id, (uint8_t)len, buffer[0], buffer[1], buffer[2], buffer[3], \
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	b2db      	uxtb	r3, r3
	sprintf(Sniffer_Msg, "%lu ID: %x DLC: %x DATA: %x %x %x %x %x %x %x %x\r\n", \
 800067a:	461a      	mov	r2, r3
			time, (uint16_t)id, (uint8_t)len, buffer[0], buffer[1], buffer[2], buffer[3], \
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	781b      	ldrb	r3, [r3, #0]
	sprintf(Sniffer_Msg, "%lu ID: %x DLC: %x DATA: %x %x %x %x %x %x %x %x\r\n", \
 8000680:	4619      	mov	r1, r3
			time, (uint16_t)id, (uint8_t)len, buffer[0], buffer[1], buffer[2], buffer[3], \
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	3301      	adds	r3, #1
 8000686:	781b      	ldrb	r3, [r3, #0]
	sprintf(Sniffer_Msg, "%lu ID: %x DLC: %x DATA: %x %x %x %x %x %x %x %x\r\n", \
 8000688:	4618      	mov	r0, r3
			time, (uint16_t)id, (uint8_t)len, buffer[0], buffer[1], buffer[2], buffer[3], \
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	3302      	adds	r3, #2
 800068e:	781b      	ldrb	r3, [r3, #0]
	sprintf(Sniffer_Msg, "%lu ID: %x DLC: %x DATA: %x %x %x %x %x %x %x %x\r\n", \
 8000690:	461c      	mov	r4, r3
			time, (uint16_t)id, (uint8_t)len, buffer[0], buffer[1], buffer[2], buffer[3], \
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	3303      	adds	r3, #3
 8000696:	781b      	ldrb	r3, [r3, #0]
	sprintf(Sniffer_Msg, "%lu ID: %x DLC: %x DATA: %x %x %x %x %x %x %x %x\r\n", \
 8000698:	461d      	mov	r5, r3
			buffer[4], buffer[5], buffer[6], buffer[7]);
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	3304      	adds	r3, #4
 800069e:	781b      	ldrb	r3, [r3, #0]
	sprintf(Sniffer_Msg, "%lu ID: %x DLC: %x DATA: %x %x %x %x %x %x %x %x\r\n", \
 80006a0:	461e      	mov	r6, r3
			buffer[4], buffer[5], buffer[6], buffer[7]);
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	3305      	adds	r3, #5
 80006a6:	781b      	ldrb	r3, [r3, #0]
	sprintf(Sniffer_Msg, "%lu ID: %x DLC: %x DATA: %x %x %x %x %x %x %x %x\r\n", \
 80006a8:	60bb      	str	r3, [r7, #8]
			buffer[4], buffer[5], buffer[6], buffer[7]);
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	3306      	adds	r3, #6
 80006ae:	781b      	ldrb	r3, [r3, #0]
	sprintf(Sniffer_Msg, "%lu ID: %x DLC: %x DATA: %x %x %x %x %x %x %x %x\r\n", \
 80006b0:	607b      	str	r3, [r7, #4]
			buffer[4], buffer[5], buffer[6], buffer[7]);
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	3307      	adds	r3, #7
 80006b6:	781b      	ldrb	r3, [r3, #0]
	sprintf(Sniffer_Msg, "%lu ID: %x DLC: %x DATA: %x %x %x %x %x %x %x %x\r\n", \
 80006b8:	9308      	str	r3, [sp, #32]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	9307      	str	r3, [sp, #28]
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	9306      	str	r3, [sp, #24]
 80006c2:	9605      	str	r6, [sp, #20]
 80006c4:	9504      	str	r5, [sp, #16]
 80006c6:	9403      	str	r4, [sp, #12]
 80006c8:	9002      	str	r0, [sp, #8]
 80006ca:	9101      	str	r1, [sp, #4]
 80006cc:	9200      	str	r2, [sp, #0]
 80006ce:	4663      	mov	r3, ip
 80006d0:	69fa      	ldr	r2, [r7, #28]
 80006d2:	4907      	ldr	r1, [pc, #28]	; (80006f0 <Sniffer_Transmit+0x9c>)
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <Sniffer_Transmit+0x98>)
 80006d6:	f003 ff81 	bl	80045dc <siprintf>

	HAL_UART_Transmit_IT(&huart3, (uint8_t*)Sniffer_Msg, sizeof(Sniffer_Msg));
 80006da:	223c      	movs	r2, #60	; 0x3c
 80006dc:	4903      	ldr	r1, [pc, #12]	; (80006ec <Sniffer_Transmit+0x98>)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <Sniffer_Transmit+0xa0>)
 80006e0:	f002 fe62 	bl	80033a8 <HAL_UART_Transmit_IT>
}
 80006e4:	bf00      	nop
 80006e6:	3724      	adds	r7, #36	; 0x24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ec:	2000008c 	.word	0x2000008c
 80006f0:	08004ef4 	.word	0x08004ef4
 80006f4:	200000f4 	.word	0x200000f4

080006f8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_CAN1_Init+0x64>)
 80006fe:	4a18      	ldr	r2, [pc, #96]	; (8000760 <MX_CAN1_Init+0x68>)
 8000700:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 30;
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_CAN1_Init+0x64>)
 8000704:	221e      	movs	r2, #30
 8000706:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_CAN1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_CAN1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_CAN1_Init+0x64>)
 8000716:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800071a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_CAN1_Init+0x64>)
 800071e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000722:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <MX_CAN1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_CAN1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_CAN1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_CAN1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_CAN1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_CAN1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_CAN1_Init+0x64>)
 800074a:	f000 fb8f 	bl	8000e6c <HAL_CAN_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000754:	f000 f9b2 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000c8 	.word	0x200000c8
 8000760:	40006400 	.word	0x40006400

08000764 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a1f      	ldr	r2, [pc, #124]	; (8000800 <HAL_CAN_MspInit+0x9c>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d137      	bne.n	80007f6 <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <HAL_CAN_MspInit+0xa0>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	4a1e      	ldr	r2, [pc, #120]	; (8000804 <HAL_CAN_MspInit+0xa0>)
 800078c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000790:	6413      	str	r3, [r2, #64]	; 0x40
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <HAL_CAN_MspInit+0xa0>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <HAL_CAN_MspInit+0xa0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a18      	ldr	r2, [pc, #96]	; (8000804 <HAL_CAN_MspInit+0xa0>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <HAL_CAN_MspInit+0xa0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007b6:	2303      	movs	r3, #3
 80007b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007be:	2301      	movs	r3, #1
 80007c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c2:	2303      	movs	r3, #3
 80007c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007c6:	2309      	movs	r3, #9
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	480d      	ldr	r0, [pc, #52]	; (8000808 <HAL_CAN_MspInit+0xa4>)
 80007d2:	f001 fa79 	bl	8001cc8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	2014      	movs	r0, #20
 80007dc:	f001 f9ab 	bl	8001b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80007e0:	2014      	movs	r0, #20
 80007e2:	f001 f9c4 	bl	8001b6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	2015      	movs	r0, #21
 80007ec:	f001 f9a3 	bl	8001b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80007f0:	2015      	movs	r0, #21
 80007f2:	f001 f9bc 	bl	8001b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80007f6:	bf00      	nop
 80007f8:	3728      	adds	r7, #40	; 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40006400 	.word	0x40006400
 8000804:	40023800 	.word	0x40023800
 8000808:	40020c00 	.word	0x40020c00

0800080c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b47      	ldr	r3, [pc, #284]	; (8000940 <MX_GPIO_Init+0x134>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a46      	ldr	r2, [pc, #280]	; (8000940 <MX_GPIO_Init+0x134>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b44      	ldr	r3, [pc, #272]	; (8000940 <MX_GPIO_Init+0x134>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	4b41      	ldr	r3, [pc, #260]	; (8000940 <MX_GPIO_Init+0x134>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a40      	ldr	r2, [pc, #256]	; (8000940 <MX_GPIO_Init+0x134>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b3e      	ldr	r3, [pc, #248]	; (8000940 <MX_GPIO_Init+0x134>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b3b      	ldr	r3, [pc, #236]	; (8000940 <MX_GPIO_Init+0x134>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a3a      	ldr	r2, [pc, #232]	; (8000940 <MX_GPIO_Init+0x134>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b38      	ldr	r3, [pc, #224]	; (8000940 <MX_GPIO_Init+0x134>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	4b35      	ldr	r3, [pc, #212]	; (8000940 <MX_GPIO_Init+0x134>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a34      	ldr	r2, [pc, #208]	; (8000940 <MX_GPIO_Init+0x134>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b32      	ldr	r3, [pc, #200]	; (8000940 <MX_GPIO_Init+0x134>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000882:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <MX_GPIO_Init+0x134>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a2e      	ldr	r2, [pc, #184]	; (8000940 <MX_GPIO_Init+0x134>)
 8000888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <MX_GPIO_Init+0x134>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b29      	ldr	r3, [pc, #164]	; (8000940 <MX_GPIO_Init+0x134>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a28      	ldr	r2, [pc, #160]	; (8000940 <MX_GPIO_Init+0x134>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_GPIO_Init+0x134>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80008b8:	4822      	ldr	r0, [pc, #136]	; (8000944 <MX_GPIO_Init+0x138>)
 80008ba:	f001 fbb1 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2140      	movs	r1, #64	; 0x40
 80008c2:	4821      	ldr	r0, [pc, #132]	; (8000948 <MX_GPIO_Init+0x13c>)
 80008c4:	f001 fbac 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	481b      	ldr	r0, [pc, #108]	; (800094c <MX_GPIO_Init+0x140>)
 80008e0:	f001 f9f2 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008e4:	f244 0381 	movw	r3, #16513	; 0x4081
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4811      	ldr	r0, [pc, #68]	; (8000944 <MX_GPIO_Init+0x138>)
 80008fe:	f001 f9e3 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000902:	2340      	movs	r3, #64	; 0x40
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <MX_GPIO_Init+0x13c>)
 800091a:	f001 f9d5 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_GPIO_Init+0x13c>)
 8000932:	f001 f9c9 	bl	8001cc8 <HAL_GPIO_Init>

}
 8000936:	bf00      	nop
 8000938:	3730      	adds	r7, #48	; 0x30
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40020400 	.word	0x40020400
 8000948:	40021800 	.word	0x40021800
 800094c:	40020800 	.word	0x40020800

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000954:	f000 fa2d 	bl	8000db2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000958:	f000 f80a 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095c:	f7ff ff56 	bl	800080c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000960:	f000 f966 	bl	8000c30 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000964:	f7ff fec8 	bl	80006f8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  Sniffer_Init();
 8000968:	f7ff fe3c 	bl	80005e4 <Sniffer_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800096c:	e7fe      	b.n	800096c <main+0x1c>
	...

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	; 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2234      	movs	r2, #52	; 0x34
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f003 fe24 	bl	80045cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000994:	f001 fb5e 	bl	8002054 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000998:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <SystemClock_Config+0xdc>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a2b      	ldr	r2, [pc, #172]	; (8000a4c <SystemClock_Config+0xdc>)
 800099e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <SystemClock_Config+0xdc>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009b0:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <SystemClock_Config+0xe0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009b8:	4a25      	ldr	r2, [pc, #148]	; (8000a50 <SystemClock_Config+0xe0>)
 80009ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <SystemClock_Config+0xe0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009e0:	2304      	movs	r3, #4
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009e4:	2360      	movs	r3, #96	; 0x60
 80009e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ec:	2304      	movs	r3, #4
 80009ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 fb8b 	bl	8002114 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a04:	f000 f85a 	bl	8000abc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a08:	f001 fb34 	bl	8002074 <HAL_PWREx_EnableOverDrive>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a12:	f000 f853 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a16:	230f      	movs	r3, #15
 8000a18:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	2103      	movs	r1, #3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 fe1c 	bl	8002670 <HAL_RCC_ClockConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a3e:	f000 f83d 	bl	8000abc <Error_Handler>
  }
}
 8000a42:	bf00      	nop
 8000a44:	3750      	adds	r7, #80	; 0x50
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40007000 	.word	0x40007000

08000a54 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08c      	sub	sp, #48	; 0x30
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_msg[8];

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx_header, rx_msg);
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	f107 0214 	add.w	r2, r7, #20
 8000a64:	2100      	movs	r1, #0
 8000a66:	4807      	ldr	r0, [pc, #28]	; (8000a84 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000a68:	f000 fc2c 	bl	80012c4 <HAL_CAN_GetRxMessage>

	Sniffer_Transmit(rx_msg, rx_header.DLC, rx_header.StdId);
 8000a6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a6e:	697a      	ldr	r2, [r7, #20]
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fded 	bl	8000654 <Sniffer_Transmit>
}
 8000a7a:	bf00      	nop
 8000a7c:	3730      	adds	r7, #48	; 0x30
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000c8 	.word	0x200000c8

08000a88 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	; 0x30
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_msg[8];

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &rx_header, rx_msg);
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	f107 0214 	add.w	r2, r7, #20
 8000a98:	2101      	movs	r1, #1
 8000a9a:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000a9c:	f000 fc12 	bl	80012c4 <HAL_CAN_GetRxMessage>

	Sniffer_Transmit(rx_msg, rx_header.DLC, rx_header.StdId);
 8000aa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000aa2:	697a      	ldr	r2, [r7, #20]
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fdd3 	bl	8000654 <Sniffer_Transmit>
}
 8000aae:	bf00      	nop
 8000ab0:	3730      	adds	r7, #48	; 0x30
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200000c8 	.word	0x200000c8

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_MspInit+0x44>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x44>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x44>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x44>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <MemManage_Handler+0x4>

08000b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5c:	f000 f966 	bl	8000e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <CAN1_RX0_IRQHandler+0x10>)
 8000b6a:	f000 fce3 	bl	8001534 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000c8 	.word	0x200000c8

08000b78 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <CAN1_RX1_IRQHandler+0x10>)
 8000b7e:	f000 fcd9 	bl	8001534 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000c8 	.word	0x200000c8

08000b8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <USART3_IRQHandler+0x10>)
 8000b92:	f002 fc67 	bl	8003464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200000f4 	.word	0x200000f4

08000ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba8:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <_sbrk+0x5c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <_sbrk+0x60>)
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <_sbrk+0x64>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <_sbrk+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d207      	bcs.n	8000be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd0:	f003 fcd2 	bl	8004578 <__errno>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	e009      	b.n	8000bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <_sbrk+0x64>)
 8000bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20080000 	.word	0x20080000
 8000c00:	00000400 	.word	0x00000400
 8000c04:	200000f0 	.word	0x200000f0
 8000c08:	20000190 	.word	0x20000190

08000c0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c36:	4a15      	ldr	r2, [pc, #84]	; (8000c8c <MX_USART3_UART_Init+0x5c>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c74:	f002 fb4a 	bl	800330c <HAL_UART_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c7e:	f7ff ff1d 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200000f4 	.word	0x200000f4
 8000c8c:	40004800 	.word	0x40004800

08000c90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b0ae      	sub	sp, #184	; 0xb8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2290      	movs	r2, #144	; 0x90
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f003 fc8b 	bl	80045cc <memset>
  if(uartHandle->Instance==USART3)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a26      	ldr	r2, [pc, #152]	; (8000d54 <HAL_UART_MspInit+0xc4>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d144      	bne.n	8000d4a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 fef4 	bl	8002abc <HAL_RCCEx_PeriphCLKConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cda:	f7ff feef 	bl	8000abc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cde:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <HAL_UART_MspInit+0xc8>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	4a1d      	ldr	r2, [pc, #116]	; (8000d58 <HAL_UART_MspInit+0xc8>)
 8000ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cea:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <HAL_UART_MspInit+0xc8>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_UART_MspInit+0xc8>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <HAL_UART_MspInit+0xc8>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_UART_MspInit+0xc8>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d28:	2307      	movs	r3, #7
 8000d2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d32:	4619      	mov	r1, r3
 8000d34:	4809      	ldr	r0, [pc, #36]	; (8000d5c <HAL_UART_MspInit+0xcc>)
 8000d36:	f000 ffc7 	bl	8001cc8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2027      	movs	r0, #39	; 0x27
 8000d40:	f000 fef9 	bl	8001b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d44:	2027      	movs	r0, #39	; 0x27
 8000d46:	f000 ff12 	bl	8001b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	37b8      	adds	r7, #184	; 0xb8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40004800 	.word	0x40004800
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020c00 	.word	0x40020c00

08000d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d64:	480d      	ldr	r0, [pc, #52]	; (8000d9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d66:	490e      	ldr	r1, [pc, #56]	; (8000da0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d68:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d6c:	e002      	b.n	8000d74 <LoopCopyDataInit>

08000d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d72:	3304      	adds	r3, #4

08000d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d78:	d3f9      	bcc.n	8000d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d7c:	4c0b      	ldr	r4, [pc, #44]	; (8000dac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d80:	e001      	b.n	8000d86 <LoopFillZerobss>

08000d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d84:	3204      	adds	r2, #4

08000d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d88:	d3fb      	bcc.n	8000d82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d8a:	f7ff ff3f 	bl	8000c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f003 fbf9 	bl	8004584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d92:	f7ff fddd 	bl	8000950 <main>
  bx  lr    
 8000d96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d98:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000da4:	08004f84 	.word	0x08004f84
  ldr r2, =_sbss
 8000da8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dac:	20000190 	.word	0x20000190

08000db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC_IRQHandler>

08000db2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db6:	2003      	movs	r0, #3
 8000db8:	f000 feb2 	bl	8001b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f000 f805 	bl	8000dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc2:	f7ff fe81 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_InitTick+0x54>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_InitTick+0x58>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 fecd 	bl	8001b8a <HAL_SYSTICK_Config>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00e      	b.n	8000e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b0f      	cmp	r3, #15
 8000dfe:	d80a      	bhi.n	8000e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e00:	2200      	movs	r2, #0
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f000 fe95 	bl	8001b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e0c:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <HAL_InitTick+0x5c>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e000      	b.n	8000e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000000 	.word	0x20000000
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000004 	.word	0x20000004

08000e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x20>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x24>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <HAL_IncTick+0x24>)
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	2000017c 	.word	0x2000017c

08000e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <HAL_GetTick+0x14>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	2000017c 	.word	0x2000017c

08000e6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e0ed      	b.n	800105a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d102      	bne.n	8000e90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff fc6a 	bl	8000764 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f042 0201 	orr.w	r2, r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ea0:	f7ff ffd8 	bl	8000e54 <HAL_GetTick>
 8000ea4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ea6:	e012      	b.n	8000ece <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ea8:	f7ff ffd4 	bl	8000e54 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b0a      	cmp	r3, #10
 8000eb4:	d90b      	bls.n	8000ece <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2205      	movs	r2, #5
 8000ec6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e0c5      	b.n	800105a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0e5      	beq.n	8000ea8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0202 	bic.w	r2, r2, #2
 8000eea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eec:	f7ff ffb2 	bl	8000e54 <HAL_GetTick>
 8000ef0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ef2:	e012      	b.n	8000f1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ef4:	f7ff ffae 	bl	8000e54 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b0a      	cmp	r3, #10
 8000f00:	d90b      	bls.n	8000f1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2205      	movs	r2, #5
 8000f12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e09f      	b.n	800105a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1e5      	bne.n	8000ef4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	7e1b      	ldrb	r3, [r3, #24]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d108      	bne.n	8000f42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	e007      	b.n	8000f52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7e5b      	ldrb	r3, [r3, #25]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d108      	bne.n	8000f6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	e007      	b.n	8000f7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	7e9b      	ldrb	r3, [r3, #26]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d108      	bne.n	8000f96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 0220 	orr.w	r2, r2, #32
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	e007      	b.n	8000fa6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 0220 	bic.w	r2, r2, #32
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	7edb      	ldrb	r3, [r3, #27]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d108      	bne.n	8000fc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0210 	bic.w	r2, r2, #16
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	e007      	b.n	8000fd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 0210 	orr.w	r2, r2, #16
 8000fce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7f1b      	ldrb	r3, [r3, #28]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d108      	bne.n	8000fea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 0208 	orr.w	r2, r2, #8
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	e007      	b.n	8000ffa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0208 	bic.w	r2, r2, #8
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7f5b      	ldrb	r3, [r3, #29]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d108      	bne.n	8001014 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f042 0204 	orr.w	r2, r2, #4
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	e007      	b.n	8001024 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0204 	bic.w	r2, r2, #4
 8001022:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	431a      	orrs	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	431a      	orrs	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	ea42 0103 	orr.w	r1, r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	1e5a      	subs	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	430a      	orrs	r2, r1
 8001048:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f893 3020 	ldrb.w	r3, [r3, #32]
 800107a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800107c:	7cfb      	ldrb	r3, [r7, #19]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d003      	beq.n	800108a <HAL_CAN_ConfigFilter+0x26>
 8001082:	7cfb      	ldrb	r3, [r7, #19]
 8001084:	2b02      	cmp	r3, #2
 8001086:	f040 80c7 	bne.w	8001218 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a69      	ldr	r2, [pc, #420]	; (8001234 <HAL_CAN_ConfigFilter+0x1d0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d001      	beq.n	8001098 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001094:	4b68      	ldr	r3, [pc, #416]	; (8001238 <HAL_CAN_ConfigFilter+0x1d4>)
 8001096:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800109e:	f043 0201 	orr.w	r2, r3, #1
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	4a63      	ldr	r2, [pc, #396]	; (8001238 <HAL_CAN_ConfigFilter+0x1d4>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d111      	bne.n	80010d4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010b6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	431a      	orrs	r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	f003 031f 	and.w	r3, r3, #31
 80010dc:	2201      	movs	r2, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d123      	bne.n	8001146 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43db      	mvns	r3, r3
 8001108:	401a      	ands	r2, r3
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001120:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3248      	adds	r2, #72	; 0x48
 8001126:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800113a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800113c:	6979      	ldr	r1, [r7, #20]
 800113e:	3348      	adds	r3, #72	; 0x48
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	440b      	add	r3, r1
 8001144:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d122      	bne.n	8001194 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	431a      	orrs	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800116e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3248      	adds	r2, #72	; 0x48
 8001174:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001188:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800118a:	6979      	ldr	r1, [r7, #20]
 800118c:	3348      	adds	r3, #72	; 0x48
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	440b      	add	r3, r1
 8001192:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d109      	bne.n	80011b0 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80011ae:	e007      	b.n	80011c0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	431a      	orrs	r2, r3
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d109      	bne.n	80011dc <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80011da:	e007      	b.n	80011ec <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	431a      	orrs	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d107      	bne.n	8001204 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	431a      	orrs	r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800120a:	f023 0201 	bic.w	r2, r3, #1
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	e006      	b.n	8001226 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
  }
}
 8001226:	4618      	mov	r0, r3
 8001228:	371c      	adds	r7, #28
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40003400 	.word	0x40003400
 8001238:	40006400 	.word	0x40006400

0800123c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 3020 	ldrb.w	r3, [r3, #32]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b01      	cmp	r3, #1
 800124e:	d12e      	bne.n	80012ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2202      	movs	r2, #2
 8001254:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 0201 	bic.w	r2, r2, #1
 8001266:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001268:	f7ff fdf4 	bl	8000e54 <HAL_GetTick>
 800126c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800126e:	e012      	b.n	8001296 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001270:	f7ff fdf0 	bl	8000e54 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b0a      	cmp	r3, #10
 800127c:	d90b      	bls.n	8001296 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2205      	movs	r2, #5
 800128e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e012      	b.n	80012bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1e5      	bne.n	8001270 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e006      	b.n	80012bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
  }
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012c4:	b480      	push	{r7}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d003      	beq.n	80012e8 <HAL_CAN_GetRxMessage+0x24>
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	f040 80f3 	bne.w	80014ce <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10e      	bne.n	800130c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d116      	bne.n	800132a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e0e7      	b.n	80014dc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d107      	bne.n	800132a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e0d8      	b.n	80014dc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	331b      	adds	r3, #27
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	4413      	add	r3, r2
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0204 	and.w	r2, r3, #4
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10c      	bne.n	8001362 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	331b      	adds	r3, #27
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	4413      	add	r3, r2
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	0d5b      	lsrs	r3, r3, #21
 8001358:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	e00b      	b.n	800137a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	331b      	adds	r3, #27
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	4413      	add	r3, r2
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	08db      	lsrs	r3, r3, #3
 8001372:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	331b      	adds	r3, #27
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	4413      	add	r3, r2
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0202 	and.w	r2, r3, #2
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	331b      	adds	r3, #27
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	4413      	add	r3, r2
 800139c:	3304      	adds	r3, #4
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 020f 	and.w	r2, r3, #15
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	331b      	adds	r3, #27
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	4413      	add	r3, r2
 80013b4:	3304      	adds	r3, #4
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	331b      	adds	r3, #27
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	4413      	add	r3, r2
 80013cc:	3304      	adds	r3, #4
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	0c1b      	lsrs	r3, r3, #16
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	4413      	add	r3, r2
 80013e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	4413      	add	r3, r2
 80013f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	0a1a      	lsrs	r2, r3, #8
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	3301      	adds	r3, #1
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	4413      	add	r3, r2
 8001412:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	0c1a      	lsrs	r2, r3, #16
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	3302      	adds	r3, #2
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	4413      	add	r3, r2
 800142c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	0e1a      	lsrs	r2, r3, #24
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	3303      	adds	r3, #3
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	4413      	add	r3, r2
 8001446:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	3304      	adds	r3, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	011b      	lsls	r3, r3, #4
 800145c:	4413      	add	r3, r2
 800145e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	0a1a      	lsrs	r2, r3, #8
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	3305      	adds	r3, #5
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	4413      	add	r3, r2
 8001478:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	0c1a      	lsrs	r2, r3, #16
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	3306      	adds	r3, #6
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	4413      	add	r3, r2
 8001492:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	0e1a      	lsrs	r2, r3, #24
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	3307      	adds	r3, #7
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d108      	bne.n	80014ba <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0220 	orr.w	r2, r2, #32
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	e007      	b.n	80014ca <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	691a      	ldr	r2, [r3, #16]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 0220 	orr.w	r2, r2, #32
 80014c8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e006      	b.n	80014dc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
  }
}
 80014dc:	4618      	mov	r0, r3
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d002      	beq.n	8001506 <HAL_CAN_ActivateNotification+0x1e>
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d109      	bne.n	800151a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6959      	ldr	r1, [r3, #20]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e006      	b.n	8001528 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
  }
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d07c      	beq.n	8001674 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b00      	cmp	r3, #0
 8001582:	d023      	beq.n	80015cc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2201      	movs	r2, #1
 800158a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f983 	bl	80018a2 <HAL_CAN_TxMailbox0CompleteCallback>
 800159c:	e016      	b.n	80015cc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d004      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
 80015b0:	e00c      	b.n	80015cc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d004      	beq.n	80015c6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
 80015c4:	e002      	b.n	80015cc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f989 	bl	80018de <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d024      	beq.n	8001620 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f963 	bl	80018b6 <HAL_CAN_TxMailbox1CompleteCallback>
 80015f0:	e016      	b.n	8001620 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d004      	beq.n	8001606 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
 8001604:	e00c      	b.n	8001620 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800160c:	2b00      	cmp	r3, #0
 800160e:	d004      	beq.n	800161a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
 8001618:	e002      	b.n	8001620 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f969 	bl	80018f2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d024      	beq.n	8001674 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001632:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f943 	bl	80018ca <HAL_CAN_TxMailbox2CompleteCallback>
 8001644:	e016      	b.n	8001674 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d004      	beq.n	800165a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
 8001658:	e00c      	b.n	8001674 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d004      	beq.n	800166e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
 800166c:	e002      	b.n	8001674 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f949 	bl	8001906 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00c      	beq.n	8001698 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f003 0310 	and.w	r3, r3, #16
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2210      	movs	r2, #16
 8001696:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00b      	beq.n	80016ba <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d006      	beq.n	80016ba <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2208      	movs	r2, #8
 80016b2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f930 	bl	800191a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d009      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff f9be 	bl	8000a54 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00c      	beq.n	80016fc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d007      	beq.n	80016fc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2210      	movs	r2, #16
 80016fa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	f003 0320 	and.w	r3, r3, #32
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00b      	beq.n	800171e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2208      	movs	r2, #8
 8001716:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f908 	bl	800192e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	2b00      	cmp	r3, #0
 8001726:	d009      	beq.n	800173c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff f9a6 	bl	8000a88 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00b      	beq.n	800175e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2210      	movs	r2, #16
 8001756:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 f8f2 	bl	8001942 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00b      	beq.n	8001780 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d006      	beq.n	8001780 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2208      	movs	r2, #8
 8001778:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f8eb 	bl	8001956 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d07b      	beq.n	8001882 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d072      	beq.n	800187a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d008      	beq.n	80017b0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017b0:	6a3b      	ldr	r3, [r7, #32]
 80017b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d008      	beq.n	80017cc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d008      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d043      	beq.n	800187a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d03e      	beq.n	800187a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001802:	2b60      	cmp	r3, #96	; 0x60
 8001804:	d02b      	beq.n	800185e <HAL_CAN_IRQHandler+0x32a>
 8001806:	2b60      	cmp	r3, #96	; 0x60
 8001808:	d82e      	bhi.n	8001868 <HAL_CAN_IRQHandler+0x334>
 800180a:	2b50      	cmp	r3, #80	; 0x50
 800180c:	d022      	beq.n	8001854 <HAL_CAN_IRQHandler+0x320>
 800180e:	2b50      	cmp	r3, #80	; 0x50
 8001810:	d82a      	bhi.n	8001868 <HAL_CAN_IRQHandler+0x334>
 8001812:	2b40      	cmp	r3, #64	; 0x40
 8001814:	d019      	beq.n	800184a <HAL_CAN_IRQHandler+0x316>
 8001816:	2b40      	cmp	r3, #64	; 0x40
 8001818:	d826      	bhi.n	8001868 <HAL_CAN_IRQHandler+0x334>
 800181a:	2b30      	cmp	r3, #48	; 0x30
 800181c:	d010      	beq.n	8001840 <HAL_CAN_IRQHandler+0x30c>
 800181e:	2b30      	cmp	r3, #48	; 0x30
 8001820:	d822      	bhi.n	8001868 <HAL_CAN_IRQHandler+0x334>
 8001822:	2b10      	cmp	r3, #16
 8001824:	d002      	beq.n	800182c <HAL_CAN_IRQHandler+0x2f8>
 8001826:	2b20      	cmp	r3, #32
 8001828:	d005      	beq.n	8001836 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800182a:	e01d      	b.n	8001868 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	f043 0308 	orr.w	r3, r3, #8
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001834:	e019      	b.n	800186a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	f043 0310 	orr.w	r3, r3, #16
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800183e:	e014      	b.n	800186a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	f043 0320 	orr.w	r3, r3, #32
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001848:	e00f      	b.n	800186a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001852:	e00a      	b.n	800186a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800185c:	e005      	b.n	800186a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001866:	e000      	b.n	800186a <HAL_CAN_IRQHandler+0x336>
            break;
 8001868:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699a      	ldr	r2, [r3, #24]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001878:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2204      	movs	r2, #4
 8001880:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f868 	bl	800196a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800189a:	bf00      	nop
 800189c:	3728      	adds	r7, #40	; 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800199c:	4013      	ands	r3, r2
 800199e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ae:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <__NVIC_SetPriorityGrouping+0x40>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	60d3      	str	r3, [r2, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00
 80019c4:	05fa0000 	.word	0x05fa0000

080019c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	0a1b      	lsrs	r3, r3, #8
 80019d2:	f003 0307 	and.w	r3, r3, #7
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	db0b      	blt.n	8001a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	f003 021f 	and.w	r2, r3, #31
 80019fc:	4907      	ldr	r1, [pc, #28]	; (8001a1c <__NVIC_EnableIRQ+0x38>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	2001      	movs	r0, #1
 8001a06:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db0a      	blt.n	8001a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	490c      	ldr	r1, [pc, #48]	; (8001a6c <__NVIC_SetPriority+0x4c>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	0112      	lsls	r2, r2, #4
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	440b      	add	r3, r1
 8001a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a48:	e00a      	b.n	8001a60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4908      	ldr	r1, [pc, #32]	; (8001a70 <__NVIC_SetPriority+0x50>)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	3b04      	subs	r3, #4
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	761a      	strb	r2, [r3, #24]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f1c3 0307 	rsb	r3, r3, #7
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	bf28      	it	cs
 8001a92:	2304      	movcs	r3, #4
 8001a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d902      	bls.n	8001aa4 <NVIC_EncodePriority+0x30>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3b03      	subs	r3, #3
 8001aa2:	e000      	b.n	8001aa6 <NVIC_EncodePriority+0x32>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	43d9      	mvns	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	4313      	orrs	r3, r2
         );
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aec:	d301      	bcc.n	8001af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00f      	b.n	8001b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <SysTick_Config+0x40>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afa:	210f      	movs	r1, #15
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f7ff ff8e 	bl	8001a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <SysTick_Config+0x40>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <SysTick_Config+0x40>)
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	e000e010 	.word	0xe000e010

08001b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ff29 	bl	8001980 <__NVIC_SetPriorityGrouping>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b48:	f7ff ff3e 	bl	80019c8 <__NVIC_GetPriorityGrouping>
 8001b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	6978      	ldr	r0, [r7, #20]
 8001b54:	f7ff ff8e 	bl	8001a74 <NVIC_EncodePriority>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff5d 	bl	8001a20 <__NVIC_SetPriority>
}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff31 	bl	80019e4 <__NVIC_EnableIRQ>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ffa2 	bl	8001adc <SysTick_Config>
 8001b98:	4603      	mov	r3, r0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bb0:	f7ff f950 	bl	8000e54 <HAL_GetTick>
 8001bb4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d008      	beq.n	8001bd4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e052      	b.n	8001c7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0216 	bic.w	r2, r2, #22
 8001be2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	695a      	ldr	r2, [r3, #20]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bf2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d103      	bne.n	8001c04 <HAL_DMA_Abort+0x62>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d007      	beq.n	8001c14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0208 	bic.w	r2, r2, #8
 8001c12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0201 	bic.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c24:	e013      	b.n	8001c4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c26:	f7ff f915 	bl	8000e54 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b05      	cmp	r3, #5
 8001c32:	d90c      	bls.n	8001c4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2220      	movs	r2, #32
 8001c38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e015      	b.n	8001c7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1e4      	bne.n	8001c26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c60:	223f      	movs	r2, #63	; 0x3f
 8001c62:	409a      	lsls	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d004      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2280      	movs	r2, #128	; 0x80
 8001c9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e00c      	b.n	8001cba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2205      	movs	r2, #5
 8001ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0201 	bic.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e175      	b.n	8001fd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f040 8164 	bne.w	8001fce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d005      	beq.n	8001d1e <HAL_GPIO_Init+0x56>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d130      	bne.n	8001d80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d54:	2201      	movs	r2, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 0201 	and.w	r2, r3, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d017      	beq.n	8001dbc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d123      	bne.n	8001e10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80be 	beq.w	8001fce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	4b66      	ldr	r3, [pc, #408]	; (8001fec <HAL_GPIO_Init+0x324>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	4a65      	ldr	r2, [pc, #404]	; (8001fec <HAL_GPIO_Init+0x324>)
 8001e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5e:	4b63      	ldr	r3, [pc, #396]	; (8001fec <HAL_GPIO_Init+0x324>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e6a:	4a61      	ldr	r2, [pc, #388]	; (8001ff0 <HAL_GPIO_Init+0x328>)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	3302      	adds	r3, #2
 8001e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	220f      	movs	r2, #15
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a58      	ldr	r2, [pc, #352]	; (8001ff4 <HAL_GPIO_Init+0x32c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d037      	beq.n	8001f06 <HAL_GPIO_Init+0x23e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a57      	ldr	r2, [pc, #348]	; (8001ff8 <HAL_GPIO_Init+0x330>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d031      	beq.n	8001f02 <HAL_GPIO_Init+0x23a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a56      	ldr	r2, [pc, #344]	; (8001ffc <HAL_GPIO_Init+0x334>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d02b      	beq.n	8001efe <HAL_GPIO_Init+0x236>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a55      	ldr	r2, [pc, #340]	; (8002000 <HAL_GPIO_Init+0x338>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d025      	beq.n	8001efa <HAL_GPIO_Init+0x232>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a54      	ldr	r2, [pc, #336]	; (8002004 <HAL_GPIO_Init+0x33c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01f      	beq.n	8001ef6 <HAL_GPIO_Init+0x22e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a53      	ldr	r2, [pc, #332]	; (8002008 <HAL_GPIO_Init+0x340>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d019      	beq.n	8001ef2 <HAL_GPIO_Init+0x22a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a52      	ldr	r2, [pc, #328]	; (800200c <HAL_GPIO_Init+0x344>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <HAL_GPIO_Init+0x226>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a51      	ldr	r2, [pc, #324]	; (8002010 <HAL_GPIO_Init+0x348>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00d      	beq.n	8001eea <HAL_GPIO_Init+0x222>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a50      	ldr	r2, [pc, #320]	; (8002014 <HAL_GPIO_Init+0x34c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d007      	beq.n	8001ee6 <HAL_GPIO_Init+0x21e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4f      	ldr	r2, [pc, #316]	; (8002018 <HAL_GPIO_Init+0x350>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_GPIO_Init+0x21a>
 8001ede:	2309      	movs	r3, #9
 8001ee0:	e012      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ee2:	230a      	movs	r3, #10
 8001ee4:	e010      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ee6:	2308      	movs	r3, #8
 8001ee8:	e00e      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001eea:	2307      	movs	r3, #7
 8001eec:	e00c      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001eee:	2306      	movs	r3, #6
 8001ef0:	e00a      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ef2:	2305      	movs	r3, #5
 8001ef4:	e008      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	e006      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001efa:	2303      	movs	r3, #3
 8001efc:	e004      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e002      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_GPIO_Init+0x240>
 8001f06:	2300      	movs	r3, #0
 8001f08:	69fa      	ldr	r2, [r7, #28]
 8001f0a:	f002 0203 	and.w	r2, r2, #3
 8001f0e:	0092      	lsls	r2, r2, #2
 8001f10:	4093      	lsls	r3, r2
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f18:	4935      	ldr	r1, [pc, #212]	; (8001ff0 <HAL_GPIO_Init+0x328>)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	089b      	lsrs	r3, r3, #2
 8001f1e:	3302      	adds	r3, #2
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f26:	4b3d      	ldr	r3, [pc, #244]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f4a:	4a34      	ldr	r2, [pc, #208]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f50:	4b32      	ldr	r3, [pc, #200]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f74:	4a29      	ldr	r2, [pc, #164]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f7a:	4b28      	ldr	r3, [pc, #160]	; (800201c <HAL_GPIO_Init+0x354>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f9e:	4a1f      	ldr	r2, [pc, #124]	; (800201c <HAL_GPIO_Init+0x354>)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_GPIO_Init+0x354>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc8:	4a14      	ldr	r2, [pc, #80]	; (800201c <HAL_GPIO_Init+0x354>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	2b0f      	cmp	r3, #15
 8001fd8:	f67f ae86 	bls.w	8001ce8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3724      	adds	r7, #36	; 0x24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40013800 	.word	0x40013800
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	40020800 	.word	0x40020800
 8002000:	40020c00 	.word	0x40020c00
 8002004:	40021000 	.word	0x40021000
 8002008:	40021400 	.word	0x40021400
 800200c:	40021800 	.word	0x40021800
 8002010:	40021c00 	.word	0x40021c00
 8002014:	40022000 	.word	0x40022000
 8002018:	40022400 	.word	0x40022400
 800201c:	40013c00 	.word	0x40013c00

08002020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
 800202c:	4613      	mov	r3, r2
 800202e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002030:	787b      	ldrb	r3, [r7, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800203c:	e003      	b.n	8002046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800203e:	887b      	ldrh	r3, [r7, #2]
 8002040:	041a      	lsls	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	619a      	str	r2, [r3, #24]
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a04      	ldr	r2, [pc, #16]	; (8002070 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800205e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40007000 	.word	0x40007000

08002074 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	4b23      	ldr	r3, [pc, #140]	; (800210c <HAL_PWREx_EnableOverDrive+0x98>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a22      	ldr	r2, [pc, #136]	; (800210c <HAL_PWREx_EnableOverDrive+0x98>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b20      	ldr	r3, [pc, #128]	; (800210c <HAL_PWREx_EnableOverDrive+0x98>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a1d      	ldr	r2, [pc, #116]	; (8002110 <HAL_PWREx_EnableOverDrive+0x9c>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020a2:	f7fe fed7 	bl	8000e54 <HAL_GetTick>
 80020a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020a8:	e009      	b.n	80020be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020aa:	f7fe fed3 	bl	8000e54 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020b8:	d901      	bls.n	80020be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e022      	b.n	8002104 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020be:	4b14      	ldr	r3, [pc, #80]	; (8002110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ca:	d1ee      	bne.n	80020aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020cc:	4b10      	ldr	r3, [pc, #64]	; (8002110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0f      	ldr	r2, [pc, #60]	; (8002110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020d8:	f7fe febc 	bl	8000e54 <HAL_GetTick>
 80020dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020de:	e009      	b.n	80020f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020e0:	f7fe feb8 	bl	8000e54 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020ee:	d901      	bls.n	80020f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e007      	b.n	8002104 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002100:	d1ee      	bne.n	80020e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	40007000 	.word	0x40007000

08002114 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800211c:	2300      	movs	r3, #0
 800211e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e29b      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8087 	beq.w	8002246 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002138:	4b96      	ldr	r3, [pc, #600]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	2b04      	cmp	r3, #4
 8002142:	d00c      	beq.n	800215e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002144:	4b93      	ldr	r3, [pc, #588]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	2b08      	cmp	r3, #8
 800214e:	d112      	bne.n	8002176 <HAL_RCC_OscConfig+0x62>
 8002150:	4b90      	ldr	r3, [pc, #576]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800215c:	d10b      	bne.n	8002176 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215e:	4b8d      	ldr	r3, [pc, #564]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d06c      	beq.n	8002244 <HAL_RCC_OscConfig+0x130>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d168      	bne.n	8002244 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e275      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217e:	d106      	bne.n	800218e <HAL_RCC_OscConfig+0x7a>
 8002180:	4b84      	ldr	r3, [pc, #528]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a83      	ldr	r2, [pc, #524]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	e02e      	b.n	80021ec <HAL_RCC_OscConfig+0xd8>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x9c>
 8002196:	4b7f      	ldr	r3, [pc, #508]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a7e      	ldr	r2, [pc, #504]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 800219c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b7c      	ldr	r3, [pc, #496]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a7b      	ldr	r2, [pc, #492]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e01d      	b.n	80021ec <HAL_RCC_OscConfig+0xd8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0xc0>
 80021ba:	4b76      	ldr	r3, [pc, #472]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a75      	ldr	r2, [pc, #468]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b73      	ldr	r3, [pc, #460]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a72      	ldr	r2, [pc, #456]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e00b      	b.n	80021ec <HAL_RCC_OscConfig+0xd8>
 80021d4:	4b6f      	ldr	r3, [pc, #444]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a6e      	ldr	r2, [pc, #440]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b6c      	ldr	r3, [pc, #432]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a6b      	ldr	r2, [pc, #428]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7fe fe2e 	bl	8000e54 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fc:	f7fe fe2a 	bl	8000e54 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	; 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e229      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	4b61      	ldr	r3, [pc, #388]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0xe8>
 800221a:	e014      	b.n	8002246 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7fe fe1a 	bl	8000e54 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002224:	f7fe fe16 	bl	8000e54 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e215      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	4b57      	ldr	r3, [pc, #348]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x110>
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d069      	beq.n	8002326 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002252:	4b50      	ldr	r3, [pc, #320]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225e:	4b4d      	ldr	r3, [pc, #308]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b08      	cmp	r3, #8
 8002268:	d11c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x190>
 800226a:	4b4a      	ldr	r3, [pc, #296]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d116      	bne.n	80022a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_RCC_OscConfig+0x17a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e1e9      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228e:	4b41      	ldr	r3, [pc, #260]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	493d      	ldr	r1, [pc, #244]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a2:	e040      	b.n	8002326 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d023      	beq.n	80022f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ac:	4b39      	ldr	r3, [pc, #228]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a38      	ldr	r2, [pc, #224]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe fdcc 	bl	8000e54 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c0:	f7fe fdc8 	bl	8000e54 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e1c7      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d2:	4b30      	ldr	r3, [pc, #192]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022de:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4929      	ldr	r1, [pc, #164]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
 80022f2:	e018      	b.n	8002326 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f4:	4b27      	ldr	r3, [pc, #156]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a26      	ldr	r2, [pc, #152]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7fe fda8 	bl	8000e54 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002308:	f7fe fda4 	bl	8000e54 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e1a3      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231a:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d038      	beq.n	80023a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d019      	beq.n	800236e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 800233c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800233e:	4a15      	ldr	r2, [pc, #84]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002346:	f7fe fd85 	bl	8000e54 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234e:	f7fe fd81 	bl	8000e54 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e180      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x23a>
 800236c:	e01a      	b.n	80023a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002372:	4a08      	ldr	r2, [pc, #32]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237a:	f7fe fd6b 	bl	8000e54 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002382:	f7fe fd67 	bl	8000e54 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d903      	bls.n	8002398 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e166      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
 8002394:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002398:	4b92      	ldr	r3, [pc, #584]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 800239a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1ee      	bne.n	8002382 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80a4 	beq.w	80024fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b2:	4b8c      	ldr	r3, [pc, #560]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10d      	bne.n	80023da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	4b89      	ldr	r3, [pc, #548]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	4a88      	ldr	r2, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ca:	4b86      	ldr	r3, [pc, #536]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d6:	2301      	movs	r3, #1
 80023d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023da:	4b83      	ldr	r3, [pc, #524]	; (80025e8 <HAL_RCC_OscConfig+0x4d4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d118      	bne.n	8002418 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80023e6:	4b80      	ldr	r3, [pc, #512]	; (80025e8 <HAL_RCC_OscConfig+0x4d4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a7f      	ldr	r2, [pc, #508]	; (80025e8 <HAL_RCC_OscConfig+0x4d4>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f2:	f7fe fd2f 	bl	8000e54 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fa:	f7fe fd2b 	bl	8000e54 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b64      	cmp	r3, #100	; 0x64
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e12a      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800240c:	4b76      	ldr	r3, [pc, #472]	; (80025e8 <HAL_RCC_OscConfig+0x4d4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x31a>
 8002420:	4b70      	ldr	r3, [pc, #448]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	4a6f      	ldr	r2, [pc, #444]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6713      	str	r3, [r2, #112]	; 0x70
 800242c:	e02d      	b.n	800248a <HAL_RCC_OscConfig+0x376>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x33c>
 8002436:	4b6b      	ldr	r3, [pc, #428]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	4a6a      	ldr	r2, [pc, #424]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6713      	str	r3, [r2, #112]	; 0x70
 8002442:	4b68      	ldr	r3, [pc, #416]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002446:	4a67      	ldr	r2, [pc, #412]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	6713      	str	r3, [r2, #112]	; 0x70
 800244e:	e01c      	b.n	800248a <HAL_RCC_OscConfig+0x376>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b05      	cmp	r3, #5
 8002456:	d10c      	bne.n	8002472 <HAL_RCC_OscConfig+0x35e>
 8002458:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245c:	4a61      	ldr	r2, [pc, #388]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	6713      	str	r3, [r2, #112]	; 0x70
 8002464:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	4a5e      	ldr	r2, [pc, #376]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6713      	str	r3, [r2, #112]	; 0x70
 8002470:	e00b      	b.n	800248a <HAL_RCC_OscConfig+0x376>
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002476:	4a5b      	ldr	r2, [pc, #364]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	6713      	str	r3, [r2, #112]	; 0x70
 800247e:	4b59      	ldr	r3, [pc, #356]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	4a58      	ldr	r2, [pc, #352]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002484:	f023 0304 	bic.w	r3, r3, #4
 8002488:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d015      	beq.n	80024be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002492:	f7fe fcdf 	bl	8000e54 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fcdb 	bl	8000e54 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0d8      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	4b4c      	ldr	r3, [pc, #304]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ee      	beq.n	800249a <HAL_RCC_OscConfig+0x386>
 80024bc:	e014      	b.n	80024e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7fe fcc9 	bl	8000e54 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe fcc5 	bl	8000e54 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e0c2      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024dc:	4b41      	ldr	r3, [pc, #260]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ee      	bne.n	80024c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d105      	bne.n	80024fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ee:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4a3c      	ldr	r2, [pc, #240]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80024f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 80ae 	beq.w	8002660 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002504:	4b37      	ldr	r3, [pc, #220]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b08      	cmp	r3, #8
 800250e:	d06d      	beq.n	80025ec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d14b      	bne.n	80025b0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002518:	4b32      	ldr	r3, [pc, #200]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a31      	ldr	r2, [pc, #196]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 800251e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7fe fc96 	bl	8000e54 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252c:	f7fe fc92 	bl	8000e54 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e091      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69da      	ldr	r2, [r3, #28]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	019b      	lsls	r3, r3, #6
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	085b      	lsrs	r3, r3, #1
 8002562:	3b01      	subs	r3, #1
 8002564:	041b      	lsls	r3, r3, #16
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	061b      	lsls	r3, r3, #24
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	071b      	lsls	r3, r3, #28
 8002576:	491b      	ldr	r1, [pc, #108]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800257c:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 8002582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe fc64 	bl	8000e54 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002590:	f7fe fc60 	bl	8000e54 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e05f      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0x47c>
 80025ae:	e057      	b.n	8002660 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80025b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe fc4a 	bl	8000e54 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7fe fc46 	bl	8000e54 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e045      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d6:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4b0>
 80025e2:	e03d      	b.n	8002660 <HAL_RCC_OscConfig+0x54c>
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80025ec:	4b1f      	ldr	r3, [pc, #124]	; (800266c <HAL_RCC_OscConfig+0x558>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d030      	beq.n	800265c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002604:	429a      	cmp	r2, r3
 8002606:	d129      	bne.n	800265c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d122      	bne.n	800265c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800261c:	4013      	ands	r3, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002622:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002624:	4293      	cmp	r3, r2
 8002626:	d119      	bne.n	800265c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002632:	085b      	lsrs	r3, r3, #1
 8002634:	3b01      	subs	r3, #1
 8002636:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002638:	429a      	cmp	r2, r3
 800263a:	d10f      	bne.n	800265c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002646:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d107      	bne.n	800265c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800

08002670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0d0      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002688:	4b6a      	ldr	r3, [pc, #424]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d910      	bls.n	80026b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b67      	ldr	r3, [pc, #412]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 020f 	bic.w	r2, r3, #15
 800269e:	4965      	ldr	r1, [pc, #404]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b63      	ldr	r3, [pc, #396]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0b8      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d020      	beq.n	8002706 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d0:	4b59      	ldr	r3, [pc, #356]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4a58      	ldr	r2, [pc, #352]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80026d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e8:	4b53      	ldr	r3, [pc, #332]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4a52      	ldr	r2, [pc, #328]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80026ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f4:	4b50      	ldr	r3, [pc, #320]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	494d      	ldr	r1, [pc, #308]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002702:	4313      	orrs	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d040      	beq.n	8002794 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	4b47      	ldr	r3, [pc, #284]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d115      	bne.n	8002752 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e07f      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002732:	4b41      	ldr	r3, [pc, #260]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e073      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002742:	4b3d      	ldr	r3, [pc, #244]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e06b      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002752:	4b39      	ldr	r3, [pc, #228]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f023 0203 	bic.w	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4936      	ldr	r1, [pc, #216]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002764:	f7fe fb76 	bl	8000e54 <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	e00a      	b.n	8002782 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276c:	f7fe fb72 	bl	8000e54 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e053      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002782:	4b2d      	ldr	r3, [pc, #180]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 020c 	and.w	r2, r3, #12
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	429a      	cmp	r2, r3
 8002792:	d1eb      	bne.n	800276c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002794:	4b27      	ldr	r3, [pc, #156]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d210      	bcs.n	80027c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 020f 	bic.w	r2, r3, #15
 80027aa:	4922      	ldr	r1, [pc, #136]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b20      	ldr	r3, [pc, #128]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e032      	b.n	800282a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d0:	4b19      	ldr	r3, [pc, #100]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4916      	ldr	r1, [pc, #88]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	490e      	ldr	r1, [pc, #56]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002802:	f000 f821 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 8002806:	4602      	mov	r2, r0
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	490a      	ldr	r1, [pc, #40]	; (800283c <HAL_RCC_ClockConfig+0x1cc>)
 8002814:	5ccb      	ldrb	r3, [r1, r3]
 8002816:	fa22 f303 	lsr.w	r3, r2, r3
 800281a:	4a09      	ldr	r2, [pc, #36]	; (8002840 <HAL_RCC_ClockConfig+0x1d0>)
 800281c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_RCC_ClockConfig+0x1d4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fad2 	bl	8000dcc <HAL_InitTick>

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40023c00 	.word	0x40023c00
 8002838:	40023800 	.word	0x40023800
 800283c:	08004f28 	.word	0x08004f28
 8002840:	20000000 	.word	0x20000000
 8002844:	20000004 	.word	0x20000004

08002848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800284c:	b094      	sub	sp, #80	; 0x50
 800284e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	647b      	str	r3, [r7, #68]	; 0x44
 8002854:	2300      	movs	r3, #0
 8002856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002858:	2300      	movs	r3, #0
 800285a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002860:	4b79      	ldr	r3, [pc, #484]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 030c 	and.w	r3, r3, #12
 8002868:	2b08      	cmp	r3, #8
 800286a:	d00d      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0x40>
 800286c:	2b08      	cmp	r3, #8
 800286e:	f200 80e1 	bhi.w	8002a34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0x34>
 8002876:	2b04      	cmp	r3, #4
 8002878:	d003      	beq.n	8002882 <HAL_RCC_GetSysClockFreq+0x3a>
 800287a:	e0db      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800287c:	4b73      	ldr	r3, [pc, #460]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x204>)
 800287e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002880:	e0db      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002882:	4b73      	ldr	r3, [pc, #460]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x208>)
 8002884:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002886:	e0d8      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002888:	4b6f      	ldr	r3, [pc, #444]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002890:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002892:	4b6d      	ldr	r3, [pc, #436]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d063      	beq.n	8002966 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289e:	4b6a      	ldr	r3, [pc, #424]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	099b      	lsrs	r3, r3, #6
 80028a4:	2200      	movs	r2, #0
 80028a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80028a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b0:	633b      	str	r3, [r7, #48]	; 0x30
 80028b2:	2300      	movs	r3, #0
 80028b4:	637b      	str	r3, [r7, #52]	; 0x34
 80028b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028ba:	4622      	mov	r2, r4
 80028bc:	462b      	mov	r3, r5
 80028be:	f04f 0000 	mov.w	r0, #0
 80028c2:	f04f 0100 	mov.w	r1, #0
 80028c6:	0159      	lsls	r1, r3, #5
 80028c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028cc:	0150      	lsls	r0, r2, #5
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4621      	mov	r1, r4
 80028d4:	1a51      	subs	r1, r2, r1
 80028d6:	6139      	str	r1, [r7, #16]
 80028d8:	4629      	mov	r1, r5
 80028da:	eb63 0301 	sbc.w	r3, r3, r1
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028ec:	4659      	mov	r1, fp
 80028ee:	018b      	lsls	r3, r1, #6
 80028f0:	4651      	mov	r1, sl
 80028f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028f6:	4651      	mov	r1, sl
 80028f8:	018a      	lsls	r2, r1, #6
 80028fa:	4651      	mov	r1, sl
 80028fc:	ebb2 0801 	subs.w	r8, r2, r1
 8002900:	4659      	mov	r1, fp
 8002902:	eb63 0901 	sbc.w	r9, r3, r1
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800291a:	4690      	mov	r8, r2
 800291c:	4699      	mov	r9, r3
 800291e:	4623      	mov	r3, r4
 8002920:	eb18 0303 	adds.w	r3, r8, r3
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	462b      	mov	r3, r5
 8002928:	eb49 0303 	adc.w	r3, r9, r3
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800293a:	4629      	mov	r1, r5
 800293c:	024b      	lsls	r3, r1, #9
 800293e:	4621      	mov	r1, r4
 8002940:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002944:	4621      	mov	r1, r4
 8002946:	024a      	lsls	r2, r1, #9
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800294e:	2200      	movs	r2, #0
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
 8002952:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002954:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002958:	f7fd fcc2 	bl	80002e0 <__aeabi_uldivmod>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4613      	mov	r3, r2
 8002962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002964:	e058      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002966:	4b38      	ldr	r3, [pc, #224]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	099b      	lsrs	r3, r3, #6
 800296c:	2200      	movs	r2, #0
 800296e:	4618      	mov	r0, r3
 8002970:	4611      	mov	r1, r2
 8002972:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002976:	623b      	str	r3, [r7, #32]
 8002978:	2300      	movs	r3, #0
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
 800297c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002980:	4642      	mov	r2, r8
 8002982:	464b      	mov	r3, r9
 8002984:	f04f 0000 	mov.w	r0, #0
 8002988:	f04f 0100 	mov.w	r1, #0
 800298c:	0159      	lsls	r1, r3, #5
 800298e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002992:	0150      	lsls	r0, r2, #5
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4641      	mov	r1, r8
 800299a:	ebb2 0a01 	subs.w	sl, r2, r1
 800299e:	4649      	mov	r1, r9
 80029a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029b8:	ebb2 040a 	subs.w	r4, r2, sl
 80029bc:	eb63 050b 	sbc.w	r5, r3, fp
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	00eb      	lsls	r3, r5, #3
 80029ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ce:	00e2      	lsls	r2, r4, #3
 80029d0:	4614      	mov	r4, r2
 80029d2:	461d      	mov	r5, r3
 80029d4:	4643      	mov	r3, r8
 80029d6:	18e3      	adds	r3, r4, r3
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	464b      	mov	r3, r9
 80029dc:	eb45 0303 	adc.w	r3, r5, r3
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ee:	4629      	mov	r1, r5
 80029f0:	028b      	lsls	r3, r1, #10
 80029f2:	4621      	mov	r1, r4
 80029f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029f8:	4621      	mov	r1, r4
 80029fa:	028a      	lsls	r2, r1, #10
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a02:	2200      	movs	r2, #0
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	61fa      	str	r2, [r7, #28]
 8002a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a0c:	f7fd fc68 	bl	80002e0 <__aeabi_uldivmod>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4613      	mov	r3, r2
 8002a16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	0c1b      	lsrs	r3, r3, #16
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	3301      	adds	r3, #1
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002a28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a32:	e002      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3750      	adds	r7, #80	; 0x50
 8002a40:	46bd      	mov	sp, r7
 8002a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	00f42400 	.word	0x00f42400
 8002a50:	007a1200 	.word	0x007a1200

08002a54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	20000000 	.word	0x20000000

08002a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a70:	f7ff fff0 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a74:	4602      	mov	r2, r0
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	0a9b      	lsrs	r3, r3, #10
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	4903      	ldr	r1, [pc, #12]	; (8002a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a82:	5ccb      	ldrb	r3, [r1, r3]
 8002a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	08004f38 	.word	0x08004f38

08002a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a98:	f7ff ffdc 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	0b5b      	lsrs	r3, r3, #13
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	4903      	ldr	r1, [pc, #12]	; (8002ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aaa:	5ccb      	ldrb	r3, [r1, r3]
 8002aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	08004f38 	.word	0x08004f38

08002abc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d012      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ae4:	4b69      	ldr	r3, [pc, #420]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a68      	ldr	r2, [pc, #416]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002aee:	6093      	str	r3, [r2, #8]
 8002af0:	4b66      	ldr	r3, [pc, #408]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af8:	4964      	ldr	r1, [pc, #400]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b06:	2301      	movs	r3, #1
 8002b08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d017      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b16:	4b5d      	ldr	r3, [pc, #372]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b24:	4959      	ldr	r1, [pc, #356]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b34:	d101      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b36:	2301      	movs	r3, #1
 8002b38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b42:	2301      	movs	r3, #1
 8002b44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d017      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b52:	4b4e      	ldr	r3, [pc, #312]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	494a      	ldr	r1, [pc, #296]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b70:	d101      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 808b 	beq.w	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ba0:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	4a39      	ldr	r2, [pc, #228]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002baa:	6413      	str	r3, [r2, #64]	; 0x40
 8002bac:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bb8:	4b35      	ldr	r3, [pc, #212]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a34      	ldr	r2, [pc, #208]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc4:	f7fe f946 	bl	8000e54 <HAL_GetTick>
 8002bc8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bcc:	f7fe f942 	bl	8000e54 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	; 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e38f      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bde:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bea:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d035      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d02e      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c08:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c12:	4b1e      	ldr	r3, [pc, #120]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	4a1d      	ldr	r2, [pc, #116]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c1e:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	4a1a      	ldr	r2, [pc, #104]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c2a:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c30:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d114      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe f90a 	bl	8000e54 <HAL_GetTick>
 8002c40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c42:	e00a      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c44:	f7fe f906 	bl	8000e54 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e351      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0ee      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c72:	d111      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c82:	400b      	ands	r3, r1
 8002c84:	4901      	ldr	r1, [pc, #4]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
 8002c8a:	e00b      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40007000 	.word	0x40007000
 8002c94:	0ffffcff 	.word	0x0ffffcff
 8002c98:	4bac      	ldr	r3, [pc, #688]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4aab      	ldr	r2, [pc, #684]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ca2:	6093      	str	r3, [r2, #8]
 8002ca4:	4ba9      	ldr	r3, [pc, #676]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb0:	49a6      	ldr	r1, [pc, #664]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d010      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cc2:	4ba2      	ldr	r3, [pc, #648]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc8:	4aa0      	ldr	r2, [pc, #640]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cd2:	4b9e      	ldr	r3, [pc, #632]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	499b      	ldr	r1, [pc, #620]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cf0:	4b96      	ldr	r3, [pc, #600]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cfe:	4993      	ldr	r1, [pc, #588]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d12:	4b8e      	ldr	r3, [pc, #568]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d20:	498a      	ldr	r1, [pc, #552]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d34:	4b85      	ldr	r3, [pc, #532]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d42:	4982      	ldr	r1, [pc, #520]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d56:	4b7d      	ldr	r3, [pc, #500]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	4979      	ldr	r1, [pc, #484]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d78:	4b74      	ldr	r3, [pc, #464]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7e:	f023 0203 	bic.w	r2, r3, #3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	4971      	ldr	r1, [pc, #452]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d9a:	4b6c      	ldr	r3, [pc, #432]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da0:	f023 020c 	bic.w	r2, r3, #12
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da8:	4968      	ldr	r1, [pc, #416]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dbc:	4b63      	ldr	r3, [pc, #396]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dca:	4960      	ldr	r1, [pc, #384]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dde:	4b5b      	ldr	r3, [pc, #364]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dec:	4957      	ldr	r1, [pc, #348]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e00:	4b52      	ldr	r3, [pc, #328]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0e:	494f      	ldr	r1, [pc, #316]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e22:	4b4a      	ldr	r3, [pc, #296]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e30:	4946      	ldr	r1, [pc, #280]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e44:	4b41      	ldr	r3, [pc, #260]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	493e      	ldr	r1, [pc, #248]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e66:	4b39      	ldr	r3, [pc, #228]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e74:	4935      	ldr	r1, [pc, #212]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e88:	4b30      	ldr	r3, [pc, #192]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e96:	492d      	ldr	r1, [pc, #180]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d011      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002eaa:	4b28      	ldr	r3, [pc, #160]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eb8:	4924      	ldr	r1, [pc, #144]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ec8:	d101      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002eda:	2301      	movs	r3, #1
 8002edc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eea:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef8:	4914      	ldr	r1, [pc, #80]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00b      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f1c:	490b      	ldr	r1, [pc, #44]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00f      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f36:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f40:	4902      	ldr	r1, [pc, #8]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f48:	e002      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00b      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f5c:	4b8a      	ldr	r3, [pc, #552]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	4986      	ldr	r1, [pc, #536]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00b      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f80:	4b81      	ldr	r3, [pc, #516]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f90:	497d      	ldr	r1, [pc, #500]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d006      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 80d6 	beq.w	8003158 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fac:	4b76      	ldr	r3, [pc, #472]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a75      	ldr	r2, [pc, #468]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb8:	f7fd ff4c 	bl	8000e54 <HAL_GetTick>
 8002fbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fc0:	f7fd ff48 	bl	8000e54 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b64      	cmp	r3, #100	; 0x64
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e195      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fd2:	4b6d      	ldr	r3, [pc, #436]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d021      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d11d      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ff2:	4b65      	ldr	r3, [pc, #404]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff8:	0c1b      	lsrs	r3, r3, #16
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003000:	4b61      	ldr	r3, [pc, #388]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003006:	0e1b      	lsrs	r3, r3, #24
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	019a      	lsls	r2, r3, #6
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	041b      	lsls	r3, r3, #16
 8003018:	431a      	orrs	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	061b      	lsls	r3, r3, #24
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	071b      	lsls	r3, r3, #28
 8003026:	4958      	ldr	r1, [pc, #352]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d004      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003042:	d00a      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800304c:	2b00      	cmp	r3, #0
 800304e:	d02e      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003058:	d129      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800305a:	4b4b      	ldr	r3, [pc, #300]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800305c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003060:	0c1b      	lsrs	r3, r3, #16
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003068:	4b47      	ldr	r3, [pc, #284]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800306a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800306e:	0f1b      	lsrs	r3, r3, #28
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	019a      	lsls	r2, r3, #6
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	041b      	lsls	r3, r3, #16
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	061b      	lsls	r3, r3, #24
 8003088:	431a      	orrs	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	071b      	lsls	r3, r3, #28
 800308e:	493e      	ldr	r1, [pc, #248]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003096:	4b3c      	ldr	r3, [pc, #240]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800309c:	f023 021f 	bic.w	r2, r3, #31
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	3b01      	subs	r3, #1
 80030a6:	4938      	ldr	r1, [pc, #224]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d01d      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030ba:	4b33      	ldr	r3, [pc, #204]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c0:	0e1b      	lsrs	r3, r3, #24
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030c8:	4b2f      	ldr	r3, [pc, #188]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ce:	0f1b      	lsrs	r3, r3, #28
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	019a      	lsls	r2, r3, #6
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	041b      	lsls	r3, r3, #16
 80030e2:	431a      	orrs	r2, r3
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	061b      	lsls	r3, r3, #24
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	071b      	lsls	r3, r3, #28
 80030ee:	4926      	ldr	r1, [pc, #152]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d011      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	019a      	lsls	r2, r3, #6
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	041b      	lsls	r3, r3, #16
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	061b      	lsls	r3, r3, #24
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	071b      	lsls	r3, r3, #28
 800311e:	491a      	ldr	r1, [pc, #104]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003126:	4b18      	ldr	r3, [pc, #96]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a17      	ldr	r2, [pc, #92]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003132:	f7fd fe8f 	bl	8000e54 <HAL_GetTick>
 8003136:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003138:	e008      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800313a:	f7fd fe8b 	bl	8000e54 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b64      	cmp	r3, #100	; 0x64
 8003146:	d901      	bls.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e0d8      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800314c:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2b01      	cmp	r3, #1
 800315c:	f040 80ce 	bne.w	80032fc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a08      	ldr	r2, [pc, #32]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800316a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800316c:	f7fd fe72 	bl	8000e54 <HAL_GetTick>
 8003170:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003172:	e00b      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003174:	f7fd fe6e 	bl	8000e54 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d904      	bls.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e0bb      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800318c:	4b5e      	ldr	r3, [pc, #376]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003198:	d0ec      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d02e      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d12a      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031c2:	4b51      	ldr	r3, [pc, #324]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031d0:	4b4d      	ldr	r3, [pc, #308]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	0f1b      	lsrs	r3, r3, #28
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	019a      	lsls	r2, r3, #6
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	041b      	lsls	r3, r3, #16
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	061b      	lsls	r3, r3, #24
 80031f0:	431a      	orrs	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	071b      	lsls	r3, r3, #28
 80031f6:	4944      	ldr	r1, [pc, #272]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031fe:	4b42      	ldr	r3, [pc, #264]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003204:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	3b01      	subs	r3, #1
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	493d      	ldr	r1, [pc, #244]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d022      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800322c:	d11d      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800322e:	4b36      	ldr	r3, [pc, #216]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	0e1b      	lsrs	r3, r3, #24
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800323c:	4b32      	ldr	r3, [pc, #200]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003242:	0f1b      	lsrs	r3, r3, #28
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	019a      	lsls	r2, r3, #6
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	431a      	orrs	r2, r3
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	061b      	lsls	r3, r3, #24
 800325c:	431a      	orrs	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	071b      	lsls	r3, r3, #28
 8003262:	4929      	ldr	r1, [pc, #164]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d028      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003276:	4b24      	ldr	r3, [pc, #144]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	0e1b      	lsrs	r3, r3, #24
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003284:	4b20      	ldr	r3, [pc, #128]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	0c1b      	lsrs	r3, r3, #16
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	019a      	lsls	r2, r3, #6
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	041b      	lsls	r3, r3, #16
 800329c:	431a      	orrs	r2, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	061b      	lsls	r3, r3, #24
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	071b      	lsls	r3, r3, #28
 80032aa:	4917      	ldr	r1, [pc, #92]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	4911      	ldr	r1, [pc, #68]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0e      	ldr	r2, [pc, #56]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d4:	f7fd fdbe 	bl	8000e54 <HAL_GetTick>
 80032d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032dc:	f7fd fdba 	bl	8000e54 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b64      	cmp	r3, #100	; 0x64
 80032e8:	d901      	bls.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e007      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032fa:	d1ef      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800

0800330c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e040      	b.n	80033a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fd fcae 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fb9c 	bl	8003a88 <UART_SetConfig>
 8003350:	4603      	mov	r3, r0
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e022      	b.n	80033a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fdf4 	bl	8003f50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003386:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fe7b 	bl	8004094 <UART_CheckIdleState>
 800339e:	4603      	mov	r3, r0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b08b      	sub	sp, #44	; 0x2c
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	4613      	mov	r3, r2
 80033b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d147      	bne.n	800344e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_UART_Transmit_IT+0x22>
 80033c4:	88fb      	ldrh	r3, [r7, #6]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e040      	b.n	8003450 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	88fa      	ldrh	r2, [r7, #6]
 80033d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	88fa      	ldrh	r2, [r7, #6]
 80033e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2221      	movs	r2, #33	; 0x21
 80033f6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003400:	d107      	bne.n	8003412 <HAL_UART_Transmit_IT+0x6a>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d103      	bne.n	8003412 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a13      	ldr	r2, [pc, #76]	; (800345c <HAL_UART_Transmit_IT+0xb4>)
 800340e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003410:	e002      	b.n	8003418 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4a12      	ldr	r2, [pc, #72]	; (8003460 <HAL_UART_Transmit_IT+0xb8>)
 8003416:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	613b      	str	r3, [r7, #16]
   return(result);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	623b      	str	r3, [r7, #32]
 8003438:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	69f9      	ldr	r1, [r7, #28]
 800343c:	6a3a      	ldr	r2, [r7, #32]
 800343e:	e841 2300 	strex	r3, r2, [r1]
 8003442:	61bb      	str	r3, [r7, #24]
   return(result);
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1e6      	bne.n	8003418 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	e000      	b.n	8003450 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800344e:	2302      	movs	r3, #2
  }
}
 8003450:	4618      	mov	r0, r3
 8003452:	372c      	adds	r7, #44	; 0x2c
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	08004465 	.word	0x08004465
 8003460:	080043af 	.word	0x080043af

08003464 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b0ba      	sub	sp, #232	; 0xe8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800348a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800348e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003492:	4013      	ands	r3, r2
 8003494:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003498:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d115      	bne.n	80034cc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00f      	beq.n	80034cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d009      	beq.n	80034cc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 82ac 	beq.w	8003a1a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	4798      	blx	r3
      }
      return;
 80034ca:	e2a6      	b.n	8003a1a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8117 	beq.w	8003704 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80034e6:	4b85      	ldr	r3, [pc, #532]	; (80036fc <HAL_UART_IRQHandler+0x298>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 810a 	beq.w	8003704 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d011      	beq.n	8003520 <HAL_UART_IRQHandler+0xbc>
 80034fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00b      	beq.n	8003520 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2201      	movs	r2, #1
 800350e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003516:	f043 0201 	orr.w	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d011      	beq.n	8003550 <HAL_UART_IRQHandler+0xec>
 800352c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00b      	beq.n	8003550 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2202      	movs	r2, #2
 800353e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003546:	f043 0204 	orr.w	r2, r3, #4
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d011      	beq.n	8003580 <HAL_UART_IRQHandler+0x11c>
 800355c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00b      	beq.n	8003580 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2204      	movs	r2, #4
 800356e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003576:	f043 0202 	orr.w	r2, r3, #2
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d017      	beq.n	80035bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800358c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b00      	cmp	r3, #0
 8003596:	d105      	bne.n	80035a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800359c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00b      	beq.n	80035bc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2208      	movs	r2, #8
 80035aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035b2:	f043 0208 	orr.w	r2, r3, #8
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d012      	beq.n	80035ee <HAL_UART_IRQHandler+0x18a>
 80035c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00c      	beq.n	80035ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8212 	beq.w	8003a1e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00d      	beq.n	8003622 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b00      	cmp	r3, #0
 8003610:	d007      	beq.n	8003622 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003628:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003636:	2b40      	cmp	r3, #64	; 0x40
 8003638:	d005      	beq.n	8003646 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800363a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800363e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003642:	2b00      	cmp	r3, #0
 8003644:	d04f      	beq.n	80036e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fe37 	bl	80042ba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b40      	cmp	r3, #64	; 0x40
 8003658:	d141      	bne.n	80036de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3308      	adds	r3, #8
 8003660:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003668:	e853 3f00 	ldrex	r3, [r3]
 800366c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003670:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003678:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3308      	adds	r3, #8
 8003682:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003686:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800368a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003692:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003696:	e841 2300 	strex	r3, r2, [r1]
 800369a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800369e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1d9      	bne.n	800365a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d013      	beq.n	80036d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b2:	4a13      	ldr	r2, [pc, #76]	; (8003700 <HAL_UART_IRQHandler+0x29c>)
 80036b4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe fae1 	bl	8001c82 <HAL_DMA_Abort_IT>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d017      	beq.n	80036f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036d0:	4610      	mov	r0, r2
 80036d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d4:	e00f      	b.n	80036f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f9b6 	bl	8003a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036dc:	e00b      	b.n	80036f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f9b2 	bl	8003a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e4:	e007      	b.n	80036f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f9ae 	bl	8003a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80036f4:	e193      	b.n	8003a1e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f6:	bf00      	nop
    return;
 80036f8:	e191      	b.n	8003a1e <HAL_UART_IRQHandler+0x5ba>
 80036fa:	bf00      	nop
 80036fc:	04000120 	.word	0x04000120
 8003700:	08004383 	.word	0x08004383

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003708:	2b01      	cmp	r3, #1
 800370a:	f040 814c 	bne.w	80039a6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800370e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8145 	beq.w	80039a6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800371c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 813e 	beq.w	80039a6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2210      	movs	r2, #16
 8003730:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373c:	2b40      	cmp	r3, #64	; 0x40
 800373e:	f040 80b6 	bne.w	80038ae <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800374e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 8165 	beq.w	8003a22 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800375e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003762:	429a      	cmp	r2, r3
 8003764:	f080 815d 	bcs.w	8003a22 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800376e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800377c:	f000 8086 	beq.w	800388c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800378c:	e853 3f00 	ldrex	r3, [r3]
 8003790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003794:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800379c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80037aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80037ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037ba:	e841 2300 	strex	r3, r2, [r1]
 80037be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1da      	bne.n	8003780 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3308      	adds	r3, #8
 80037d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3308      	adds	r3, #8
 80037ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037fa:	e841 2300 	strex	r3, r2, [r1]
 80037fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1e1      	bne.n	80037ca <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3308      	adds	r3, #8
 800380c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003810:	e853 3f00 	ldrex	r3, [r3]
 8003814:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800381c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3308      	adds	r3, #8
 8003826:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800382a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800382c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003830:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003832:	e841 2300 	strex	r3, r2, [r1]
 8003836:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1e3      	bne.n	8003806 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800385a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385c:	f023 0310 	bic.w	r3, r3, #16
 8003860:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800386e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003870:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003874:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800387c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e4      	bne.n	800384c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe f98b 	bl	8001ba2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	4619      	mov	r1, r3
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f8d8 	bl	8003a5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038ac:	e0b9      	b.n	8003a22 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 80ab 	beq.w	8003a26 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80038d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80a6 	beq.w	8003a26 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80038fc:	647b      	str	r3, [r7, #68]	; 0x44
 80038fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003902:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003904:	e841 2300 	strex	r3, r2, [r1]
 8003908:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800390a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e4      	bne.n	80038da <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3308      	adds	r3, #8
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	e853 3f00 	ldrex	r3, [r3]
 800391e:	623b      	str	r3, [r7, #32]
   return(result);
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	f023 0301 	bic.w	r3, r3, #1
 8003926:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3308      	adds	r3, #8
 8003930:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003934:	633a      	str	r2, [r7, #48]	; 0x30
 8003936:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003938:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800393a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800393c:	e841 2300 	strex	r3, r2, [r1]
 8003940:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1e3      	bne.n	8003910 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	e853 3f00 	ldrex	r3, [r3]
 8003968:	60fb      	str	r3, [r7, #12]
   return(result);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f023 0310 	bic.w	r3, r3, #16
 8003970:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003982:	69b9      	ldr	r1, [r7, #24]
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	e841 2300 	strex	r3, r2, [r1]
 800398a:	617b      	str	r3, [r7, #20]
   return(result);
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1e4      	bne.n	800395c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2202      	movs	r2, #2
 8003996:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800399c:	4619      	mov	r1, r3
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f85c 	bl	8003a5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039a4:	e03f      	b.n	8003a26 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80039a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00e      	beq.n	80039d0 <HAL_UART_IRQHandler+0x56c>
 80039b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d008      	beq.n	80039d0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80039c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f853 	bl	8003a74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039ce:	e02d      	b.n	8003a2c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80039d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00e      	beq.n	80039fa <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80039dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d01c      	beq.n	8003a2a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	4798      	blx	r3
    }
    return;
 80039f8:	e017      	b.n	8003a2a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d012      	beq.n	8003a2c <HAL_UART_IRQHandler+0x5c8>
 8003a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00c      	beq.n	8003a2c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 fd86 	bl	8004524 <UART_EndTransmit_IT>
    return;
 8003a18:	e008      	b.n	8003a2c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003a1a:	bf00      	nop
 8003a1c:	e006      	b.n	8003a2c <HAL_UART_IRQHandler+0x5c8>
    return;
 8003a1e:	bf00      	nop
 8003a20:	e004      	b.n	8003a2c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003a22:	bf00      	nop
 8003a24:	e002      	b.n	8003a2c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003a26:	bf00      	nop
 8003a28:	e000      	b.n	8003a2c <HAL_UART_IRQHandler+0x5c8>
    return;
 8003a2a:	bf00      	nop
  }

}
 8003a2c:	37e8      	adds	r7, #232	; 0xe8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop

08003a34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	4ba6      	ldr	r3, [pc, #664]	; (8003d4c <UART_SetConfig+0x2c4>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	6979      	ldr	r1, [r7, #20]
 8003abc:	430b      	orrs	r3, r1
 8003abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a94      	ldr	r2, [pc, #592]	; (8003d50 <UART_SetConfig+0x2c8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d120      	bne.n	8003b46 <UART_SetConfig+0xbe>
 8003b04:	4b93      	ldr	r3, [pc, #588]	; (8003d54 <UART_SetConfig+0x2cc>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d816      	bhi.n	8003b40 <UART_SetConfig+0xb8>
 8003b12:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <UART_SetConfig+0x90>)
 8003b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b18:	08003b29 	.word	0x08003b29
 8003b1c:	08003b35 	.word	0x08003b35
 8003b20:	08003b2f 	.word	0x08003b2f
 8003b24:	08003b3b 	.word	0x08003b3b
 8003b28:	2301      	movs	r3, #1
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e150      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	77fb      	strb	r3, [r7, #31]
 8003b32:	e14d      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003b34:	2304      	movs	r3, #4
 8003b36:	77fb      	strb	r3, [r7, #31]
 8003b38:	e14a      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	77fb      	strb	r3, [r7, #31]
 8003b3e:	e147      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003b40:	2310      	movs	r3, #16
 8003b42:	77fb      	strb	r3, [r7, #31]
 8003b44:	e144      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a83      	ldr	r2, [pc, #524]	; (8003d58 <UART_SetConfig+0x2d0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d132      	bne.n	8003bb6 <UART_SetConfig+0x12e>
 8003b50:	4b80      	ldr	r3, [pc, #512]	; (8003d54 <UART_SetConfig+0x2cc>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b0c      	cmp	r3, #12
 8003b5c:	d828      	bhi.n	8003bb0 <UART_SetConfig+0x128>
 8003b5e:	a201      	add	r2, pc, #4	; (adr r2, 8003b64 <UART_SetConfig+0xdc>)
 8003b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b64:	08003b99 	.word	0x08003b99
 8003b68:	08003bb1 	.word	0x08003bb1
 8003b6c:	08003bb1 	.word	0x08003bb1
 8003b70:	08003bb1 	.word	0x08003bb1
 8003b74:	08003ba5 	.word	0x08003ba5
 8003b78:	08003bb1 	.word	0x08003bb1
 8003b7c:	08003bb1 	.word	0x08003bb1
 8003b80:	08003bb1 	.word	0x08003bb1
 8003b84:	08003b9f 	.word	0x08003b9f
 8003b88:	08003bb1 	.word	0x08003bb1
 8003b8c:	08003bb1 	.word	0x08003bb1
 8003b90:	08003bb1 	.word	0x08003bb1
 8003b94:	08003bab 	.word	0x08003bab
 8003b98:	2300      	movs	r3, #0
 8003b9a:	77fb      	strb	r3, [r7, #31]
 8003b9c:	e118      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	77fb      	strb	r3, [r7, #31]
 8003ba2:	e115      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	77fb      	strb	r3, [r7, #31]
 8003ba8:	e112      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003baa:	2308      	movs	r3, #8
 8003bac:	77fb      	strb	r3, [r7, #31]
 8003bae:	e10f      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003bb0:	2310      	movs	r3, #16
 8003bb2:	77fb      	strb	r3, [r7, #31]
 8003bb4:	e10c      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a68      	ldr	r2, [pc, #416]	; (8003d5c <UART_SetConfig+0x2d4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d120      	bne.n	8003c02 <UART_SetConfig+0x17a>
 8003bc0:	4b64      	ldr	r3, [pc, #400]	; (8003d54 <UART_SetConfig+0x2cc>)
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bca:	2b30      	cmp	r3, #48	; 0x30
 8003bcc:	d013      	beq.n	8003bf6 <UART_SetConfig+0x16e>
 8003bce:	2b30      	cmp	r3, #48	; 0x30
 8003bd0:	d814      	bhi.n	8003bfc <UART_SetConfig+0x174>
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d009      	beq.n	8003bea <UART_SetConfig+0x162>
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	d810      	bhi.n	8003bfc <UART_SetConfig+0x174>
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <UART_SetConfig+0x15c>
 8003bde:	2b10      	cmp	r3, #16
 8003be0:	d006      	beq.n	8003bf0 <UART_SetConfig+0x168>
 8003be2:	e00b      	b.n	8003bfc <UART_SetConfig+0x174>
 8003be4:	2300      	movs	r3, #0
 8003be6:	77fb      	strb	r3, [r7, #31]
 8003be8:	e0f2      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003bea:	2302      	movs	r3, #2
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	e0ef      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	e0ec      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003bf6:	2308      	movs	r3, #8
 8003bf8:	77fb      	strb	r3, [r7, #31]
 8003bfa:	e0e9      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	77fb      	strb	r3, [r7, #31]
 8003c00:	e0e6      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a56      	ldr	r2, [pc, #344]	; (8003d60 <UART_SetConfig+0x2d8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d120      	bne.n	8003c4e <UART_SetConfig+0x1c6>
 8003c0c:	4b51      	ldr	r3, [pc, #324]	; (8003d54 <UART_SetConfig+0x2cc>)
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c16:	2bc0      	cmp	r3, #192	; 0xc0
 8003c18:	d013      	beq.n	8003c42 <UART_SetConfig+0x1ba>
 8003c1a:	2bc0      	cmp	r3, #192	; 0xc0
 8003c1c:	d814      	bhi.n	8003c48 <UART_SetConfig+0x1c0>
 8003c1e:	2b80      	cmp	r3, #128	; 0x80
 8003c20:	d009      	beq.n	8003c36 <UART_SetConfig+0x1ae>
 8003c22:	2b80      	cmp	r3, #128	; 0x80
 8003c24:	d810      	bhi.n	8003c48 <UART_SetConfig+0x1c0>
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <UART_SetConfig+0x1a8>
 8003c2a:	2b40      	cmp	r3, #64	; 0x40
 8003c2c:	d006      	beq.n	8003c3c <UART_SetConfig+0x1b4>
 8003c2e:	e00b      	b.n	8003c48 <UART_SetConfig+0x1c0>
 8003c30:	2300      	movs	r3, #0
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	e0cc      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003c36:	2302      	movs	r3, #2
 8003c38:	77fb      	strb	r3, [r7, #31]
 8003c3a:	e0c9      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e0c6      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003c42:	2308      	movs	r3, #8
 8003c44:	77fb      	strb	r3, [r7, #31]
 8003c46:	e0c3      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003c48:	2310      	movs	r3, #16
 8003c4a:	77fb      	strb	r3, [r7, #31]
 8003c4c:	e0c0      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a44      	ldr	r2, [pc, #272]	; (8003d64 <UART_SetConfig+0x2dc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d125      	bne.n	8003ca4 <UART_SetConfig+0x21c>
 8003c58:	4b3e      	ldr	r3, [pc, #248]	; (8003d54 <UART_SetConfig+0x2cc>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c66:	d017      	beq.n	8003c98 <UART_SetConfig+0x210>
 8003c68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c6c:	d817      	bhi.n	8003c9e <UART_SetConfig+0x216>
 8003c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c72:	d00b      	beq.n	8003c8c <UART_SetConfig+0x204>
 8003c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c78:	d811      	bhi.n	8003c9e <UART_SetConfig+0x216>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <UART_SetConfig+0x1fe>
 8003c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c82:	d006      	beq.n	8003c92 <UART_SetConfig+0x20a>
 8003c84:	e00b      	b.n	8003c9e <UART_SetConfig+0x216>
 8003c86:	2300      	movs	r3, #0
 8003c88:	77fb      	strb	r3, [r7, #31]
 8003c8a:	e0a1      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	e09e      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003c92:	2304      	movs	r3, #4
 8003c94:	77fb      	strb	r3, [r7, #31]
 8003c96:	e09b      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003c98:	2308      	movs	r3, #8
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	e098      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003c9e:	2310      	movs	r3, #16
 8003ca0:	77fb      	strb	r3, [r7, #31]
 8003ca2:	e095      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a2f      	ldr	r2, [pc, #188]	; (8003d68 <UART_SetConfig+0x2e0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d125      	bne.n	8003cfa <UART_SetConfig+0x272>
 8003cae:	4b29      	ldr	r3, [pc, #164]	; (8003d54 <UART_SetConfig+0x2cc>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cbc:	d017      	beq.n	8003cee <UART_SetConfig+0x266>
 8003cbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cc2:	d817      	bhi.n	8003cf4 <UART_SetConfig+0x26c>
 8003cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc8:	d00b      	beq.n	8003ce2 <UART_SetConfig+0x25a>
 8003cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cce:	d811      	bhi.n	8003cf4 <UART_SetConfig+0x26c>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <UART_SetConfig+0x254>
 8003cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd8:	d006      	beq.n	8003ce8 <UART_SetConfig+0x260>
 8003cda:	e00b      	b.n	8003cf4 <UART_SetConfig+0x26c>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	77fb      	strb	r3, [r7, #31]
 8003ce0:	e076      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	77fb      	strb	r3, [r7, #31]
 8003ce6:	e073      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003ce8:	2304      	movs	r3, #4
 8003cea:	77fb      	strb	r3, [r7, #31]
 8003cec:	e070      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003cee:	2308      	movs	r3, #8
 8003cf0:	77fb      	strb	r3, [r7, #31]
 8003cf2:	e06d      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003cf4:	2310      	movs	r3, #16
 8003cf6:	77fb      	strb	r3, [r7, #31]
 8003cf8:	e06a      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1b      	ldr	r2, [pc, #108]	; (8003d6c <UART_SetConfig+0x2e4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d138      	bne.n	8003d76 <UART_SetConfig+0x2ee>
 8003d04:	4b13      	ldr	r3, [pc, #76]	; (8003d54 <UART_SetConfig+0x2cc>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d12:	d017      	beq.n	8003d44 <UART_SetConfig+0x2bc>
 8003d14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d18:	d82a      	bhi.n	8003d70 <UART_SetConfig+0x2e8>
 8003d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1e:	d00b      	beq.n	8003d38 <UART_SetConfig+0x2b0>
 8003d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d24:	d824      	bhi.n	8003d70 <UART_SetConfig+0x2e8>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <UART_SetConfig+0x2aa>
 8003d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2e:	d006      	beq.n	8003d3e <UART_SetConfig+0x2b6>
 8003d30:	e01e      	b.n	8003d70 <UART_SetConfig+0x2e8>
 8003d32:	2300      	movs	r3, #0
 8003d34:	77fb      	strb	r3, [r7, #31]
 8003d36:	e04b      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	e048      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003d3e:	2304      	movs	r3, #4
 8003d40:	77fb      	strb	r3, [r7, #31]
 8003d42:	e045      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003d44:	2308      	movs	r3, #8
 8003d46:	77fb      	strb	r3, [r7, #31]
 8003d48:	e042      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003d4a:	bf00      	nop
 8003d4c:	efff69f3 	.word	0xefff69f3
 8003d50:	40011000 	.word	0x40011000
 8003d54:	40023800 	.word	0x40023800
 8003d58:	40004400 	.word	0x40004400
 8003d5c:	40004800 	.word	0x40004800
 8003d60:	40004c00 	.word	0x40004c00
 8003d64:	40005000 	.word	0x40005000
 8003d68:	40011400 	.word	0x40011400
 8003d6c:	40007800 	.word	0x40007800
 8003d70:	2310      	movs	r3, #16
 8003d72:	77fb      	strb	r3, [r7, #31]
 8003d74:	e02c      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a72      	ldr	r2, [pc, #456]	; (8003f44 <UART_SetConfig+0x4bc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d125      	bne.n	8003dcc <UART_SetConfig+0x344>
 8003d80:	4b71      	ldr	r3, [pc, #452]	; (8003f48 <UART_SetConfig+0x4c0>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d8e:	d017      	beq.n	8003dc0 <UART_SetConfig+0x338>
 8003d90:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d94:	d817      	bhi.n	8003dc6 <UART_SetConfig+0x33e>
 8003d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d9a:	d00b      	beq.n	8003db4 <UART_SetConfig+0x32c>
 8003d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da0:	d811      	bhi.n	8003dc6 <UART_SetConfig+0x33e>
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <UART_SetConfig+0x326>
 8003da6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003daa:	d006      	beq.n	8003dba <UART_SetConfig+0x332>
 8003dac:	e00b      	b.n	8003dc6 <UART_SetConfig+0x33e>
 8003dae:	2300      	movs	r3, #0
 8003db0:	77fb      	strb	r3, [r7, #31]
 8003db2:	e00d      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003db4:	2302      	movs	r3, #2
 8003db6:	77fb      	strb	r3, [r7, #31]
 8003db8:	e00a      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003dba:	2304      	movs	r3, #4
 8003dbc:	77fb      	strb	r3, [r7, #31]
 8003dbe:	e007      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	77fb      	strb	r3, [r7, #31]
 8003dc4:	e004      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003dc6:	2310      	movs	r3, #16
 8003dc8:	77fb      	strb	r3, [r7, #31]
 8003dca:	e001      	b.n	8003dd0 <UART_SetConfig+0x348>
 8003dcc:	2310      	movs	r3, #16
 8003dce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd8:	d15b      	bne.n	8003e92 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003dda:	7ffb      	ldrb	r3, [r7, #31]
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d828      	bhi.n	8003e32 <UART_SetConfig+0x3aa>
 8003de0:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <UART_SetConfig+0x360>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003e0d 	.word	0x08003e0d
 8003dec:	08003e15 	.word	0x08003e15
 8003df0:	08003e1d 	.word	0x08003e1d
 8003df4:	08003e33 	.word	0x08003e33
 8003df8:	08003e23 	.word	0x08003e23
 8003dfc:	08003e33 	.word	0x08003e33
 8003e00:	08003e33 	.word	0x08003e33
 8003e04:	08003e33 	.word	0x08003e33
 8003e08:	08003e2b 	.word	0x08003e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e0c:	f7fe fe2e 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 8003e10:	61b8      	str	r0, [r7, #24]
        break;
 8003e12:	e013      	b.n	8003e3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e14:	f7fe fe3e 	bl	8002a94 <HAL_RCC_GetPCLK2Freq>
 8003e18:	61b8      	str	r0, [r7, #24]
        break;
 8003e1a:	e00f      	b.n	8003e3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e1c:	4b4b      	ldr	r3, [pc, #300]	; (8003f4c <UART_SetConfig+0x4c4>)
 8003e1e:	61bb      	str	r3, [r7, #24]
        break;
 8003e20:	e00c      	b.n	8003e3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e22:	f7fe fd11 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 8003e26:	61b8      	str	r0, [r7, #24]
        break;
 8003e28:	e008      	b.n	8003e3c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e2e:	61bb      	str	r3, [r7, #24]
        break;
 8003e30:	e004      	b.n	8003e3c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	77bb      	strb	r3, [r7, #30]
        break;
 8003e3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d074      	beq.n	8003f2c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	005a      	lsls	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	085b      	lsrs	r3, r3, #1
 8003e4c:	441a      	add	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	2b0f      	cmp	r3, #15
 8003e5c:	d916      	bls.n	8003e8c <UART_SetConfig+0x404>
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e64:	d212      	bcs.n	8003e8c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	f023 030f 	bic.w	r3, r3, #15
 8003e6e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	085b      	lsrs	r3, r3, #1
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	89fb      	ldrh	r3, [r7, #14]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	89fa      	ldrh	r2, [r7, #14]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	e04f      	b.n	8003f2c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	77bb      	strb	r3, [r7, #30]
 8003e90:	e04c      	b.n	8003f2c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e92:	7ffb      	ldrb	r3, [r7, #31]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d828      	bhi.n	8003eea <UART_SetConfig+0x462>
 8003e98:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <UART_SetConfig+0x418>)
 8003e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9e:	bf00      	nop
 8003ea0:	08003ec5 	.word	0x08003ec5
 8003ea4:	08003ecd 	.word	0x08003ecd
 8003ea8:	08003ed5 	.word	0x08003ed5
 8003eac:	08003eeb 	.word	0x08003eeb
 8003eb0:	08003edb 	.word	0x08003edb
 8003eb4:	08003eeb 	.word	0x08003eeb
 8003eb8:	08003eeb 	.word	0x08003eeb
 8003ebc:	08003eeb 	.word	0x08003eeb
 8003ec0:	08003ee3 	.word	0x08003ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec4:	f7fe fdd2 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 8003ec8:	61b8      	str	r0, [r7, #24]
        break;
 8003eca:	e013      	b.n	8003ef4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ecc:	f7fe fde2 	bl	8002a94 <HAL_RCC_GetPCLK2Freq>
 8003ed0:	61b8      	str	r0, [r7, #24]
        break;
 8003ed2:	e00f      	b.n	8003ef4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <UART_SetConfig+0x4c4>)
 8003ed6:	61bb      	str	r3, [r7, #24]
        break;
 8003ed8:	e00c      	b.n	8003ef4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eda:	f7fe fcb5 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 8003ede:	61b8      	str	r0, [r7, #24]
        break;
 8003ee0:	e008      	b.n	8003ef4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ee6:	61bb      	str	r3, [r7, #24]
        break;
 8003ee8:	e004      	b.n	8003ef4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ef2:	bf00      	nop
    }

    if (pclk != 0U)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d018      	beq.n	8003f2c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	085a      	lsrs	r2, r3, #1
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	441a      	add	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b0f      	cmp	r3, #15
 8003f12:	d909      	bls.n	8003f28 <UART_SetConfig+0x4a0>
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1a:	d205      	bcs.n	8003f28 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60da      	str	r2, [r3, #12]
 8003f26:	e001      	b.n	8003f2c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f38:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40007c00 	.word	0x40007c00
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	00f42400 	.word	0x00f42400

08003f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01a      	beq.n	8004066 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800404e:	d10a      	bne.n	8004066 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	605a      	str	r2, [r3, #4]
  }
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af02      	add	r7, sp, #8
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040a4:	f7fc fed6 	bl	8000e54 <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d10e      	bne.n	80040d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f831 	bl	800412e <UART_WaitOnFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e027      	b.n	8004126 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d10e      	bne.n	8004102 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f81b 	bl	800412e <UART_WaitOnFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e011      	b.n	8004126 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b09c      	sub	sp, #112	; 0x70
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	603b      	str	r3, [r7, #0]
 800413a:	4613      	mov	r3, r2
 800413c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413e:	e0a7      	b.n	8004290 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004146:	f000 80a3 	beq.w	8004290 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414a:	f7fc fe83 	bl	8000e54 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004156:	429a      	cmp	r2, r3
 8004158:	d302      	bcc.n	8004160 <UART_WaitOnFlagUntilTimeout+0x32>
 800415a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800415c:	2b00      	cmp	r3, #0
 800415e:	d13f      	bne.n	80041e0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800416e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004170:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004174:	667b      	str	r3, [r7, #100]	; 0x64
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800417e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004180:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004184:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800418c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e6      	bne.n	8004160 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3308      	adds	r3, #8
 8004198:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a4:	f023 0301 	bic.w	r3, r3, #1
 80041a8:	663b      	str	r3, [r7, #96]	; 0x60
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3308      	adds	r3, #8
 80041b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80041b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e5      	bne.n	8004192 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2220      	movs	r2, #32
 80041ca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e068      	b.n	80042b2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d050      	beq.n	8004290 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041fc:	d148      	bne.n	8004290 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004206:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800421c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004226:	637b      	str	r3, [r7, #52]	; 0x34
 8004228:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800422c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e6      	bne.n	8004208 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3308      	adds	r3, #8
 8004240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	e853 3f00 	ldrex	r3, [r3]
 8004248:	613b      	str	r3, [r7, #16]
   return(result);
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	66bb      	str	r3, [r7, #104]	; 0x68
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3308      	adds	r3, #8
 8004258:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800425a:	623a      	str	r2, [r7, #32]
 800425c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425e:	69f9      	ldr	r1, [r7, #28]
 8004260:	6a3a      	ldr	r2, [r7, #32]
 8004262:	e841 2300 	strex	r3, r2, [r1]
 8004266:	61bb      	str	r3, [r7, #24]
   return(result);
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1e5      	bne.n	800423a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e010      	b.n	80042b2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	69da      	ldr	r2, [r3, #28]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	4013      	ands	r3, r2
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	429a      	cmp	r2, r3
 800429e:	bf0c      	ite	eq
 80042a0:	2301      	moveq	r3, #1
 80042a2:	2300      	movne	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	f43f af48 	beq.w	8004140 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3770      	adds	r7, #112	; 0x70
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b095      	sub	sp, #84	; 0x54
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e0:	643b      	str	r3, [r7, #64]	; 0x40
 80042e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042e8:	e841 2300 	strex	r3, r2, [r1]
 80042ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e6      	bne.n	80042c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3308      	adds	r3, #8
 80042fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	e853 3f00 	ldrex	r3, [r3]
 8004302:	61fb      	str	r3, [r7, #28]
   return(result);
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f023 0301 	bic.w	r3, r3, #1
 800430a:	64bb      	str	r3, [r7, #72]	; 0x48
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3308      	adds	r3, #8
 8004312:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004314:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004316:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800431a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800431c:	e841 2300 	strex	r3, r2, [r1]
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e5      	bne.n	80042f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800432c:	2b01      	cmp	r3, #1
 800432e:	d118      	bne.n	8004362 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	60bb      	str	r3, [r7, #8]
   return(result);
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f023 0310 	bic.w	r3, r3, #16
 8004344:	647b      	str	r3, [r7, #68]	; 0x44
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800434e:	61bb      	str	r3, [r7, #24]
 8004350:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	6979      	ldr	r1, [r7, #20]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	613b      	str	r3, [r7, #16]
   return(result);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e6      	bne.n	8004330 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004376:	bf00      	nop
 8004378:	3754      	adds	r7, #84	; 0x54
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f7ff fb51 	bl	8003a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043a6:	bf00      	nop
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b08f      	sub	sp, #60	; 0x3c
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043ba:	2b21      	cmp	r3, #33	; 0x21
 80043bc:	d14c      	bne.n	8004458 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d132      	bne.n	8004430 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	e853 3f00 	ldrex	r3, [r3]
 80043d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043de:	637b      	str	r3, [r7, #52]	; 0x34
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ea:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f0:	e841 2300 	strex	r3, r2, [r1]
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e6      	bne.n	80043ca <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	60bb      	str	r3, [r7, #8]
   return(result);
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004410:	633b      	str	r3, [r7, #48]	; 0x30
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441e:	6979      	ldr	r1, [r7, #20]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	e841 2300 	strex	r3, r2, [r1]
 8004426:	613b      	str	r3, [r7, #16]
   return(result);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1e6      	bne.n	80043fc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800442e:	e013      	b.n	8004458 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004434:	781a      	ldrb	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004458:	bf00      	nop
 800445a:	373c      	adds	r7, #60	; 0x3c
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004464:	b480      	push	{r7}
 8004466:	b091      	sub	sp, #68	; 0x44
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004470:	2b21      	cmp	r3, #33	; 0x21
 8004472:	d151      	bne.n	8004518 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d132      	bne.n	80044e6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	623b      	str	r3, [r7, #32]
   return(result);
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004494:	63bb      	str	r3, [r7, #56]	; 0x38
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449e:	633b      	str	r3, [r7, #48]	; 0x30
 80044a0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044a6:	e841 2300 	strex	r3, r2, [r1]
 80044aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1e6      	bne.n	8004480 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	60fb      	str	r3, [r7, #12]
   return(result);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044c6:	637b      	str	r3, [r7, #52]	; 0x34
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d0:	61fb      	str	r3, [r7, #28]
 80044d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	69b9      	ldr	r1, [r7, #24]
 80044d6:	69fa      	ldr	r2, [r7, #28]
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	617b      	str	r3, [r7, #20]
   return(result);
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e6      	bne.n	80044b2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80044e4:	e018      	b.n	8004518 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80044ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044fa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004500:	1c9a      	adds	r2, r3, #2
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004518:	bf00      	nop
 800451a:	3744      	adds	r7, #68	; 0x44
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	60bb      	str	r3, [r7, #8]
   return(result);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	61bb      	str	r3, [r7, #24]
 800454c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	6979      	ldr	r1, [r7, #20]
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	613b      	str	r3, [r7, #16]
   return(result);
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e6      	bne.n	800452c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff fa62 	bl	8003a34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004570:	bf00      	nop
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <__errno>:
 8004578:	4b01      	ldr	r3, [pc, #4]	; (8004580 <__errno+0x8>)
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	2000000c 	.word	0x2000000c

08004584 <__libc_init_array>:
 8004584:	b570      	push	{r4, r5, r6, lr}
 8004586:	4d0d      	ldr	r5, [pc, #52]	; (80045bc <__libc_init_array+0x38>)
 8004588:	4c0d      	ldr	r4, [pc, #52]	; (80045c0 <__libc_init_array+0x3c>)
 800458a:	1b64      	subs	r4, r4, r5
 800458c:	10a4      	asrs	r4, r4, #2
 800458e:	2600      	movs	r6, #0
 8004590:	42a6      	cmp	r6, r4
 8004592:	d109      	bne.n	80045a8 <__libc_init_array+0x24>
 8004594:	4d0b      	ldr	r5, [pc, #44]	; (80045c4 <__libc_init_array+0x40>)
 8004596:	4c0c      	ldr	r4, [pc, #48]	; (80045c8 <__libc_init_array+0x44>)
 8004598:	f000 fc8e 	bl	8004eb8 <_init>
 800459c:	1b64      	subs	r4, r4, r5
 800459e:	10a4      	asrs	r4, r4, #2
 80045a0:	2600      	movs	r6, #0
 80045a2:	42a6      	cmp	r6, r4
 80045a4:	d105      	bne.n	80045b2 <__libc_init_array+0x2e>
 80045a6:	bd70      	pop	{r4, r5, r6, pc}
 80045a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ac:	4798      	blx	r3
 80045ae:	3601      	adds	r6, #1
 80045b0:	e7ee      	b.n	8004590 <__libc_init_array+0xc>
 80045b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b6:	4798      	blx	r3
 80045b8:	3601      	adds	r6, #1
 80045ba:	e7f2      	b.n	80045a2 <__libc_init_array+0x1e>
 80045bc:	08004f7c 	.word	0x08004f7c
 80045c0:	08004f7c 	.word	0x08004f7c
 80045c4:	08004f7c 	.word	0x08004f7c
 80045c8:	08004f80 	.word	0x08004f80

080045cc <memset>:
 80045cc:	4402      	add	r2, r0
 80045ce:	4603      	mov	r3, r0
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d100      	bne.n	80045d6 <memset+0xa>
 80045d4:	4770      	bx	lr
 80045d6:	f803 1b01 	strb.w	r1, [r3], #1
 80045da:	e7f9      	b.n	80045d0 <memset+0x4>

080045dc <siprintf>:
 80045dc:	b40e      	push	{r1, r2, r3}
 80045de:	b500      	push	{lr}
 80045e0:	b09c      	sub	sp, #112	; 0x70
 80045e2:	ab1d      	add	r3, sp, #116	; 0x74
 80045e4:	9002      	str	r0, [sp, #8]
 80045e6:	9006      	str	r0, [sp, #24]
 80045e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045ec:	4809      	ldr	r0, [pc, #36]	; (8004614 <siprintf+0x38>)
 80045ee:	9107      	str	r1, [sp, #28]
 80045f0:	9104      	str	r1, [sp, #16]
 80045f2:	4909      	ldr	r1, [pc, #36]	; (8004618 <siprintf+0x3c>)
 80045f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045f8:	9105      	str	r1, [sp, #20]
 80045fa:	6800      	ldr	r0, [r0, #0]
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	a902      	add	r1, sp, #8
 8004600:	f000 f868 	bl	80046d4 <_svfiprintf_r>
 8004604:	9b02      	ldr	r3, [sp, #8]
 8004606:	2200      	movs	r2, #0
 8004608:	701a      	strb	r2, [r3, #0]
 800460a:	b01c      	add	sp, #112	; 0x70
 800460c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004610:	b003      	add	sp, #12
 8004612:	4770      	bx	lr
 8004614:	2000000c 	.word	0x2000000c
 8004618:	ffff0208 	.word	0xffff0208

0800461c <__ssputs_r>:
 800461c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004620:	688e      	ldr	r6, [r1, #8]
 8004622:	429e      	cmp	r6, r3
 8004624:	4682      	mov	sl, r0
 8004626:	460c      	mov	r4, r1
 8004628:	4690      	mov	r8, r2
 800462a:	461f      	mov	r7, r3
 800462c:	d838      	bhi.n	80046a0 <__ssputs_r+0x84>
 800462e:	898a      	ldrh	r2, [r1, #12]
 8004630:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004634:	d032      	beq.n	800469c <__ssputs_r+0x80>
 8004636:	6825      	ldr	r5, [r4, #0]
 8004638:	6909      	ldr	r1, [r1, #16]
 800463a:	eba5 0901 	sub.w	r9, r5, r1
 800463e:	6965      	ldr	r5, [r4, #20]
 8004640:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004644:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004648:	3301      	adds	r3, #1
 800464a:	444b      	add	r3, r9
 800464c:	106d      	asrs	r5, r5, #1
 800464e:	429d      	cmp	r5, r3
 8004650:	bf38      	it	cc
 8004652:	461d      	movcc	r5, r3
 8004654:	0553      	lsls	r3, r2, #21
 8004656:	d531      	bpl.n	80046bc <__ssputs_r+0xa0>
 8004658:	4629      	mov	r1, r5
 800465a:	f000 fb63 	bl	8004d24 <_malloc_r>
 800465e:	4606      	mov	r6, r0
 8004660:	b950      	cbnz	r0, 8004678 <__ssputs_r+0x5c>
 8004662:	230c      	movs	r3, #12
 8004664:	f8ca 3000 	str.w	r3, [sl]
 8004668:	89a3      	ldrh	r3, [r4, #12]
 800466a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800466e:	81a3      	strh	r3, [r4, #12]
 8004670:	f04f 30ff 	mov.w	r0, #4294967295
 8004674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004678:	6921      	ldr	r1, [r4, #16]
 800467a:	464a      	mov	r2, r9
 800467c:	f000 fabe 	bl	8004bfc <memcpy>
 8004680:	89a3      	ldrh	r3, [r4, #12]
 8004682:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468a:	81a3      	strh	r3, [r4, #12]
 800468c:	6126      	str	r6, [r4, #16]
 800468e:	6165      	str	r5, [r4, #20]
 8004690:	444e      	add	r6, r9
 8004692:	eba5 0509 	sub.w	r5, r5, r9
 8004696:	6026      	str	r6, [r4, #0]
 8004698:	60a5      	str	r5, [r4, #8]
 800469a:	463e      	mov	r6, r7
 800469c:	42be      	cmp	r6, r7
 800469e:	d900      	bls.n	80046a2 <__ssputs_r+0x86>
 80046a0:	463e      	mov	r6, r7
 80046a2:	6820      	ldr	r0, [r4, #0]
 80046a4:	4632      	mov	r2, r6
 80046a6:	4641      	mov	r1, r8
 80046a8:	f000 fab6 	bl	8004c18 <memmove>
 80046ac:	68a3      	ldr	r3, [r4, #8]
 80046ae:	1b9b      	subs	r3, r3, r6
 80046b0:	60a3      	str	r3, [r4, #8]
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	4433      	add	r3, r6
 80046b6:	6023      	str	r3, [r4, #0]
 80046b8:	2000      	movs	r0, #0
 80046ba:	e7db      	b.n	8004674 <__ssputs_r+0x58>
 80046bc:	462a      	mov	r2, r5
 80046be:	f000 fba5 	bl	8004e0c <_realloc_r>
 80046c2:	4606      	mov	r6, r0
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d1e1      	bne.n	800468c <__ssputs_r+0x70>
 80046c8:	6921      	ldr	r1, [r4, #16]
 80046ca:	4650      	mov	r0, sl
 80046cc:	f000 fabe 	bl	8004c4c <_free_r>
 80046d0:	e7c7      	b.n	8004662 <__ssputs_r+0x46>
	...

080046d4 <_svfiprintf_r>:
 80046d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d8:	4698      	mov	r8, r3
 80046da:	898b      	ldrh	r3, [r1, #12]
 80046dc:	061b      	lsls	r3, r3, #24
 80046de:	b09d      	sub	sp, #116	; 0x74
 80046e0:	4607      	mov	r7, r0
 80046e2:	460d      	mov	r5, r1
 80046e4:	4614      	mov	r4, r2
 80046e6:	d50e      	bpl.n	8004706 <_svfiprintf_r+0x32>
 80046e8:	690b      	ldr	r3, [r1, #16]
 80046ea:	b963      	cbnz	r3, 8004706 <_svfiprintf_r+0x32>
 80046ec:	2140      	movs	r1, #64	; 0x40
 80046ee:	f000 fb19 	bl	8004d24 <_malloc_r>
 80046f2:	6028      	str	r0, [r5, #0]
 80046f4:	6128      	str	r0, [r5, #16]
 80046f6:	b920      	cbnz	r0, 8004702 <_svfiprintf_r+0x2e>
 80046f8:	230c      	movs	r3, #12
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004700:	e0d1      	b.n	80048a6 <_svfiprintf_r+0x1d2>
 8004702:	2340      	movs	r3, #64	; 0x40
 8004704:	616b      	str	r3, [r5, #20]
 8004706:	2300      	movs	r3, #0
 8004708:	9309      	str	r3, [sp, #36]	; 0x24
 800470a:	2320      	movs	r3, #32
 800470c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004710:	f8cd 800c 	str.w	r8, [sp, #12]
 8004714:	2330      	movs	r3, #48	; 0x30
 8004716:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80048c0 <_svfiprintf_r+0x1ec>
 800471a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800471e:	f04f 0901 	mov.w	r9, #1
 8004722:	4623      	mov	r3, r4
 8004724:	469a      	mov	sl, r3
 8004726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800472a:	b10a      	cbz	r2, 8004730 <_svfiprintf_r+0x5c>
 800472c:	2a25      	cmp	r2, #37	; 0x25
 800472e:	d1f9      	bne.n	8004724 <_svfiprintf_r+0x50>
 8004730:	ebba 0b04 	subs.w	fp, sl, r4
 8004734:	d00b      	beq.n	800474e <_svfiprintf_r+0x7a>
 8004736:	465b      	mov	r3, fp
 8004738:	4622      	mov	r2, r4
 800473a:	4629      	mov	r1, r5
 800473c:	4638      	mov	r0, r7
 800473e:	f7ff ff6d 	bl	800461c <__ssputs_r>
 8004742:	3001      	adds	r0, #1
 8004744:	f000 80aa 	beq.w	800489c <_svfiprintf_r+0x1c8>
 8004748:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800474a:	445a      	add	r2, fp
 800474c:	9209      	str	r2, [sp, #36]	; 0x24
 800474e:	f89a 3000 	ldrb.w	r3, [sl]
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 80a2 	beq.w	800489c <_svfiprintf_r+0x1c8>
 8004758:	2300      	movs	r3, #0
 800475a:	f04f 32ff 	mov.w	r2, #4294967295
 800475e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004762:	f10a 0a01 	add.w	sl, sl, #1
 8004766:	9304      	str	r3, [sp, #16]
 8004768:	9307      	str	r3, [sp, #28]
 800476a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800476e:	931a      	str	r3, [sp, #104]	; 0x68
 8004770:	4654      	mov	r4, sl
 8004772:	2205      	movs	r2, #5
 8004774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004778:	4851      	ldr	r0, [pc, #324]	; (80048c0 <_svfiprintf_r+0x1ec>)
 800477a:	f7fb fd61 	bl	8000240 <memchr>
 800477e:	9a04      	ldr	r2, [sp, #16]
 8004780:	b9d8      	cbnz	r0, 80047ba <_svfiprintf_r+0xe6>
 8004782:	06d0      	lsls	r0, r2, #27
 8004784:	bf44      	itt	mi
 8004786:	2320      	movmi	r3, #32
 8004788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800478c:	0711      	lsls	r1, r2, #28
 800478e:	bf44      	itt	mi
 8004790:	232b      	movmi	r3, #43	; 0x2b
 8004792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004796:	f89a 3000 	ldrb.w	r3, [sl]
 800479a:	2b2a      	cmp	r3, #42	; 0x2a
 800479c:	d015      	beq.n	80047ca <_svfiprintf_r+0xf6>
 800479e:	9a07      	ldr	r2, [sp, #28]
 80047a0:	4654      	mov	r4, sl
 80047a2:	2000      	movs	r0, #0
 80047a4:	f04f 0c0a 	mov.w	ip, #10
 80047a8:	4621      	mov	r1, r4
 80047aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047ae:	3b30      	subs	r3, #48	; 0x30
 80047b0:	2b09      	cmp	r3, #9
 80047b2:	d94e      	bls.n	8004852 <_svfiprintf_r+0x17e>
 80047b4:	b1b0      	cbz	r0, 80047e4 <_svfiprintf_r+0x110>
 80047b6:	9207      	str	r2, [sp, #28]
 80047b8:	e014      	b.n	80047e4 <_svfiprintf_r+0x110>
 80047ba:	eba0 0308 	sub.w	r3, r0, r8
 80047be:	fa09 f303 	lsl.w	r3, r9, r3
 80047c2:	4313      	orrs	r3, r2
 80047c4:	9304      	str	r3, [sp, #16]
 80047c6:	46a2      	mov	sl, r4
 80047c8:	e7d2      	b.n	8004770 <_svfiprintf_r+0x9c>
 80047ca:	9b03      	ldr	r3, [sp, #12]
 80047cc:	1d19      	adds	r1, r3, #4
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	9103      	str	r1, [sp, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bfbb      	ittet	lt
 80047d6:	425b      	neglt	r3, r3
 80047d8:	f042 0202 	orrlt.w	r2, r2, #2
 80047dc:	9307      	strge	r3, [sp, #28]
 80047de:	9307      	strlt	r3, [sp, #28]
 80047e0:	bfb8      	it	lt
 80047e2:	9204      	strlt	r2, [sp, #16]
 80047e4:	7823      	ldrb	r3, [r4, #0]
 80047e6:	2b2e      	cmp	r3, #46	; 0x2e
 80047e8:	d10c      	bne.n	8004804 <_svfiprintf_r+0x130>
 80047ea:	7863      	ldrb	r3, [r4, #1]
 80047ec:	2b2a      	cmp	r3, #42	; 0x2a
 80047ee:	d135      	bne.n	800485c <_svfiprintf_r+0x188>
 80047f0:	9b03      	ldr	r3, [sp, #12]
 80047f2:	1d1a      	adds	r2, r3, #4
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	9203      	str	r2, [sp, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bfb8      	it	lt
 80047fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004800:	3402      	adds	r4, #2
 8004802:	9305      	str	r3, [sp, #20]
 8004804:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80048d0 <_svfiprintf_r+0x1fc>
 8004808:	7821      	ldrb	r1, [r4, #0]
 800480a:	2203      	movs	r2, #3
 800480c:	4650      	mov	r0, sl
 800480e:	f7fb fd17 	bl	8000240 <memchr>
 8004812:	b140      	cbz	r0, 8004826 <_svfiprintf_r+0x152>
 8004814:	2340      	movs	r3, #64	; 0x40
 8004816:	eba0 000a 	sub.w	r0, r0, sl
 800481a:	fa03 f000 	lsl.w	r0, r3, r0
 800481e:	9b04      	ldr	r3, [sp, #16]
 8004820:	4303      	orrs	r3, r0
 8004822:	3401      	adds	r4, #1
 8004824:	9304      	str	r3, [sp, #16]
 8004826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800482a:	4826      	ldr	r0, [pc, #152]	; (80048c4 <_svfiprintf_r+0x1f0>)
 800482c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004830:	2206      	movs	r2, #6
 8004832:	f7fb fd05 	bl	8000240 <memchr>
 8004836:	2800      	cmp	r0, #0
 8004838:	d038      	beq.n	80048ac <_svfiprintf_r+0x1d8>
 800483a:	4b23      	ldr	r3, [pc, #140]	; (80048c8 <_svfiprintf_r+0x1f4>)
 800483c:	bb1b      	cbnz	r3, 8004886 <_svfiprintf_r+0x1b2>
 800483e:	9b03      	ldr	r3, [sp, #12]
 8004840:	3307      	adds	r3, #7
 8004842:	f023 0307 	bic.w	r3, r3, #7
 8004846:	3308      	adds	r3, #8
 8004848:	9303      	str	r3, [sp, #12]
 800484a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800484c:	4433      	add	r3, r6
 800484e:	9309      	str	r3, [sp, #36]	; 0x24
 8004850:	e767      	b.n	8004722 <_svfiprintf_r+0x4e>
 8004852:	fb0c 3202 	mla	r2, ip, r2, r3
 8004856:	460c      	mov	r4, r1
 8004858:	2001      	movs	r0, #1
 800485a:	e7a5      	b.n	80047a8 <_svfiprintf_r+0xd4>
 800485c:	2300      	movs	r3, #0
 800485e:	3401      	adds	r4, #1
 8004860:	9305      	str	r3, [sp, #20]
 8004862:	4619      	mov	r1, r3
 8004864:	f04f 0c0a 	mov.w	ip, #10
 8004868:	4620      	mov	r0, r4
 800486a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800486e:	3a30      	subs	r2, #48	; 0x30
 8004870:	2a09      	cmp	r2, #9
 8004872:	d903      	bls.n	800487c <_svfiprintf_r+0x1a8>
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0c5      	beq.n	8004804 <_svfiprintf_r+0x130>
 8004878:	9105      	str	r1, [sp, #20]
 800487a:	e7c3      	b.n	8004804 <_svfiprintf_r+0x130>
 800487c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004880:	4604      	mov	r4, r0
 8004882:	2301      	movs	r3, #1
 8004884:	e7f0      	b.n	8004868 <_svfiprintf_r+0x194>
 8004886:	ab03      	add	r3, sp, #12
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	462a      	mov	r2, r5
 800488c:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <_svfiprintf_r+0x1f8>)
 800488e:	a904      	add	r1, sp, #16
 8004890:	4638      	mov	r0, r7
 8004892:	f3af 8000 	nop.w
 8004896:	1c42      	adds	r2, r0, #1
 8004898:	4606      	mov	r6, r0
 800489a:	d1d6      	bne.n	800484a <_svfiprintf_r+0x176>
 800489c:	89ab      	ldrh	r3, [r5, #12]
 800489e:	065b      	lsls	r3, r3, #25
 80048a0:	f53f af2c 	bmi.w	80046fc <_svfiprintf_r+0x28>
 80048a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048a6:	b01d      	add	sp, #116	; 0x74
 80048a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ac:	ab03      	add	r3, sp, #12
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	462a      	mov	r2, r5
 80048b2:	4b06      	ldr	r3, [pc, #24]	; (80048cc <_svfiprintf_r+0x1f8>)
 80048b4:	a904      	add	r1, sp, #16
 80048b6:	4638      	mov	r0, r7
 80048b8:	f000 f87a 	bl	80049b0 <_printf_i>
 80048bc:	e7eb      	b.n	8004896 <_svfiprintf_r+0x1c2>
 80048be:	bf00      	nop
 80048c0:	08004f40 	.word	0x08004f40
 80048c4:	08004f4a 	.word	0x08004f4a
 80048c8:	00000000 	.word	0x00000000
 80048cc:	0800461d 	.word	0x0800461d
 80048d0:	08004f46 	.word	0x08004f46

080048d4 <_printf_common>:
 80048d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048d8:	4616      	mov	r6, r2
 80048da:	4699      	mov	r9, r3
 80048dc:	688a      	ldr	r2, [r1, #8]
 80048de:	690b      	ldr	r3, [r1, #16]
 80048e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048e4:	4293      	cmp	r3, r2
 80048e6:	bfb8      	it	lt
 80048e8:	4613      	movlt	r3, r2
 80048ea:	6033      	str	r3, [r6, #0]
 80048ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048f0:	4607      	mov	r7, r0
 80048f2:	460c      	mov	r4, r1
 80048f4:	b10a      	cbz	r2, 80048fa <_printf_common+0x26>
 80048f6:	3301      	adds	r3, #1
 80048f8:	6033      	str	r3, [r6, #0]
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	0699      	lsls	r1, r3, #26
 80048fe:	bf42      	ittt	mi
 8004900:	6833      	ldrmi	r3, [r6, #0]
 8004902:	3302      	addmi	r3, #2
 8004904:	6033      	strmi	r3, [r6, #0]
 8004906:	6825      	ldr	r5, [r4, #0]
 8004908:	f015 0506 	ands.w	r5, r5, #6
 800490c:	d106      	bne.n	800491c <_printf_common+0x48>
 800490e:	f104 0a19 	add.w	sl, r4, #25
 8004912:	68e3      	ldr	r3, [r4, #12]
 8004914:	6832      	ldr	r2, [r6, #0]
 8004916:	1a9b      	subs	r3, r3, r2
 8004918:	42ab      	cmp	r3, r5
 800491a:	dc26      	bgt.n	800496a <_printf_common+0x96>
 800491c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004920:	1e13      	subs	r3, r2, #0
 8004922:	6822      	ldr	r2, [r4, #0]
 8004924:	bf18      	it	ne
 8004926:	2301      	movne	r3, #1
 8004928:	0692      	lsls	r2, r2, #26
 800492a:	d42b      	bmi.n	8004984 <_printf_common+0xb0>
 800492c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004930:	4649      	mov	r1, r9
 8004932:	4638      	mov	r0, r7
 8004934:	47c0      	blx	r8
 8004936:	3001      	adds	r0, #1
 8004938:	d01e      	beq.n	8004978 <_printf_common+0xa4>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	68e5      	ldr	r5, [r4, #12]
 800493e:	6832      	ldr	r2, [r6, #0]
 8004940:	f003 0306 	and.w	r3, r3, #6
 8004944:	2b04      	cmp	r3, #4
 8004946:	bf08      	it	eq
 8004948:	1aad      	subeq	r5, r5, r2
 800494a:	68a3      	ldr	r3, [r4, #8]
 800494c:	6922      	ldr	r2, [r4, #16]
 800494e:	bf0c      	ite	eq
 8004950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004954:	2500      	movne	r5, #0
 8004956:	4293      	cmp	r3, r2
 8004958:	bfc4      	itt	gt
 800495a:	1a9b      	subgt	r3, r3, r2
 800495c:	18ed      	addgt	r5, r5, r3
 800495e:	2600      	movs	r6, #0
 8004960:	341a      	adds	r4, #26
 8004962:	42b5      	cmp	r5, r6
 8004964:	d11a      	bne.n	800499c <_printf_common+0xc8>
 8004966:	2000      	movs	r0, #0
 8004968:	e008      	b.n	800497c <_printf_common+0xa8>
 800496a:	2301      	movs	r3, #1
 800496c:	4652      	mov	r2, sl
 800496e:	4649      	mov	r1, r9
 8004970:	4638      	mov	r0, r7
 8004972:	47c0      	blx	r8
 8004974:	3001      	adds	r0, #1
 8004976:	d103      	bne.n	8004980 <_printf_common+0xac>
 8004978:	f04f 30ff 	mov.w	r0, #4294967295
 800497c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004980:	3501      	adds	r5, #1
 8004982:	e7c6      	b.n	8004912 <_printf_common+0x3e>
 8004984:	18e1      	adds	r1, r4, r3
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	2030      	movs	r0, #48	; 0x30
 800498a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800498e:	4422      	add	r2, r4
 8004990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004998:	3302      	adds	r3, #2
 800499a:	e7c7      	b.n	800492c <_printf_common+0x58>
 800499c:	2301      	movs	r3, #1
 800499e:	4622      	mov	r2, r4
 80049a0:	4649      	mov	r1, r9
 80049a2:	4638      	mov	r0, r7
 80049a4:	47c0      	blx	r8
 80049a6:	3001      	adds	r0, #1
 80049a8:	d0e6      	beq.n	8004978 <_printf_common+0xa4>
 80049aa:	3601      	adds	r6, #1
 80049ac:	e7d9      	b.n	8004962 <_printf_common+0x8e>
	...

080049b0 <_printf_i>:
 80049b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049b4:	7e0f      	ldrb	r7, [r1, #24]
 80049b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049b8:	2f78      	cmp	r7, #120	; 0x78
 80049ba:	4691      	mov	r9, r2
 80049bc:	4680      	mov	r8, r0
 80049be:	460c      	mov	r4, r1
 80049c0:	469a      	mov	sl, r3
 80049c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049c6:	d807      	bhi.n	80049d8 <_printf_i+0x28>
 80049c8:	2f62      	cmp	r7, #98	; 0x62
 80049ca:	d80a      	bhi.n	80049e2 <_printf_i+0x32>
 80049cc:	2f00      	cmp	r7, #0
 80049ce:	f000 80d8 	beq.w	8004b82 <_printf_i+0x1d2>
 80049d2:	2f58      	cmp	r7, #88	; 0x58
 80049d4:	f000 80a3 	beq.w	8004b1e <_printf_i+0x16e>
 80049d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049e0:	e03a      	b.n	8004a58 <_printf_i+0xa8>
 80049e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049e6:	2b15      	cmp	r3, #21
 80049e8:	d8f6      	bhi.n	80049d8 <_printf_i+0x28>
 80049ea:	a101      	add	r1, pc, #4	; (adr r1, 80049f0 <_printf_i+0x40>)
 80049ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049f0:	08004a49 	.word	0x08004a49
 80049f4:	08004a5d 	.word	0x08004a5d
 80049f8:	080049d9 	.word	0x080049d9
 80049fc:	080049d9 	.word	0x080049d9
 8004a00:	080049d9 	.word	0x080049d9
 8004a04:	080049d9 	.word	0x080049d9
 8004a08:	08004a5d 	.word	0x08004a5d
 8004a0c:	080049d9 	.word	0x080049d9
 8004a10:	080049d9 	.word	0x080049d9
 8004a14:	080049d9 	.word	0x080049d9
 8004a18:	080049d9 	.word	0x080049d9
 8004a1c:	08004b69 	.word	0x08004b69
 8004a20:	08004a8d 	.word	0x08004a8d
 8004a24:	08004b4b 	.word	0x08004b4b
 8004a28:	080049d9 	.word	0x080049d9
 8004a2c:	080049d9 	.word	0x080049d9
 8004a30:	08004b8b 	.word	0x08004b8b
 8004a34:	080049d9 	.word	0x080049d9
 8004a38:	08004a8d 	.word	0x08004a8d
 8004a3c:	080049d9 	.word	0x080049d9
 8004a40:	080049d9 	.word	0x080049d9
 8004a44:	08004b53 	.word	0x08004b53
 8004a48:	682b      	ldr	r3, [r5, #0]
 8004a4a:	1d1a      	adds	r2, r3, #4
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	602a      	str	r2, [r5, #0]
 8004a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0a3      	b.n	8004ba4 <_printf_i+0x1f4>
 8004a5c:	6820      	ldr	r0, [r4, #0]
 8004a5e:	6829      	ldr	r1, [r5, #0]
 8004a60:	0606      	lsls	r6, r0, #24
 8004a62:	f101 0304 	add.w	r3, r1, #4
 8004a66:	d50a      	bpl.n	8004a7e <_printf_i+0xce>
 8004a68:	680e      	ldr	r6, [r1, #0]
 8004a6a:	602b      	str	r3, [r5, #0]
 8004a6c:	2e00      	cmp	r6, #0
 8004a6e:	da03      	bge.n	8004a78 <_printf_i+0xc8>
 8004a70:	232d      	movs	r3, #45	; 0x2d
 8004a72:	4276      	negs	r6, r6
 8004a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a78:	485e      	ldr	r0, [pc, #376]	; (8004bf4 <_printf_i+0x244>)
 8004a7a:	230a      	movs	r3, #10
 8004a7c:	e019      	b.n	8004ab2 <_printf_i+0x102>
 8004a7e:	680e      	ldr	r6, [r1, #0]
 8004a80:	602b      	str	r3, [r5, #0]
 8004a82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a86:	bf18      	it	ne
 8004a88:	b236      	sxthne	r6, r6
 8004a8a:	e7ef      	b.n	8004a6c <_printf_i+0xbc>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	6820      	ldr	r0, [r4, #0]
 8004a90:	1d19      	adds	r1, r3, #4
 8004a92:	6029      	str	r1, [r5, #0]
 8004a94:	0601      	lsls	r1, r0, #24
 8004a96:	d501      	bpl.n	8004a9c <_printf_i+0xec>
 8004a98:	681e      	ldr	r6, [r3, #0]
 8004a9a:	e002      	b.n	8004aa2 <_printf_i+0xf2>
 8004a9c:	0646      	lsls	r6, r0, #25
 8004a9e:	d5fb      	bpl.n	8004a98 <_printf_i+0xe8>
 8004aa0:	881e      	ldrh	r6, [r3, #0]
 8004aa2:	4854      	ldr	r0, [pc, #336]	; (8004bf4 <_printf_i+0x244>)
 8004aa4:	2f6f      	cmp	r7, #111	; 0x6f
 8004aa6:	bf0c      	ite	eq
 8004aa8:	2308      	moveq	r3, #8
 8004aaa:	230a      	movne	r3, #10
 8004aac:	2100      	movs	r1, #0
 8004aae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ab2:	6865      	ldr	r5, [r4, #4]
 8004ab4:	60a5      	str	r5, [r4, #8]
 8004ab6:	2d00      	cmp	r5, #0
 8004ab8:	bfa2      	ittt	ge
 8004aba:	6821      	ldrge	r1, [r4, #0]
 8004abc:	f021 0104 	bicge.w	r1, r1, #4
 8004ac0:	6021      	strge	r1, [r4, #0]
 8004ac2:	b90e      	cbnz	r6, 8004ac8 <_printf_i+0x118>
 8004ac4:	2d00      	cmp	r5, #0
 8004ac6:	d04d      	beq.n	8004b64 <_printf_i+0x1b4>
 8004ac8:	4615      	mov	r5, r2
 8004aca:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ace:	fb03 6711 	mls	r7, r3, r1, r6
 8004ad2:	5dc7      	ldrb	r7, [r0, r7]
 8004ad4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ad8:	4637      	mov	r7, r6
 8004ada:	42bb      	cmp	r3, r7
 8004adc:	460e      	mov	r6, r1
 8004ade:	d9f4      	bls.n	8004aca <_printf_i+0x11a>
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d10b      	bne.n	8004afc <_printf_i+0x14c>
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	07de      	lsls	r6, r3, #31
 8004ae8:	d508      	bpl.n	8004afc <_printf_i+0x14c>
 8004aea:	6923      	ldr	r3, [r4, #16]
 8004aec:	6861      	ldr	r1, [r4, #4]
 8004aee:	4299      	cmp	r1, r3
 8004af0:	bfde      	ittt	le
 8004af2:	2330      	movle	r3, #48	; 0x30
 8004af4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004af8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004afc:	1b52      	subs	r2, r2, r5
 8004afe:	6122      	str	r2, [r4, #16]
 8004b00:	f8cd a000 	str.w	sl, [sp]
 8004b04:	464b      	mov	r3, r9
 8004b06:	aa03      	add	r2, sp, #12
 8004b08:	4621      	mov	r1, r4
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	f7ff fee2 	bl	80048d4 <_printf_common>
 8004b10:	3001      	adds	r0, #1
 8004b12:	d14c      	bne.n	8004bae <_printf_i+0x1fe>
 8004b14:	f04f 30ff 	mov.w	r0, #4294967295
 8004b18:	b004      	add	sp, #16
 8004b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b1e:	4835      	ldr	r0, [pc, #212]	; (8004bf4 <_printf_i+0x244>)
 8004b20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b24:	6829      	ldr	r1, [r5, #0]
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b2c:	6029      	str	r1, [r5, #0]
 8004b2e:	061d      	lsls	r5, r3, #24
 8004b30:	d514      	bpl.n	8004b5c <_printf_i+0x1ac>
 8004b32:	07df      	lsls	r7, r3, #31
 8004b34:	bf44      	itt	mi
 8004b36:	f043 0320 	orrmi.w	r3, r3, #32
 8004b3a:	6023      	strmi	r3, [r4, #0]
 8004b3c:	b91e      	cbnz	r6, 8004b46 <_printf_i+0x196>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	f023 0320 	bic.w	r3, r3, #32
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	2310      	movs	r3, #16
 8004b48:	e7b0      	b.n	8004aac <_printf_i+0xfc>
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	f043 0320 	orr.w	r3, r3, #32
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	2378      	movs	r3, #120	; 0x78
 8004b54:	4828      	ldr	r0, [pc, #160]	; (8004bf8 <_printf_i+0x248>)
 8004b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b5a:	e7e3      	b.n	8004b24 <_printf_i+0x174>
 8004b5c:	0659      	lsls	r1, r3, #25
 8004b5e:	bf48      	it	mi
 8004b60:	b2b6      	uxthmi	r6, r6
 8004b62:	e7e6      	b.n	8004b32 <_printf_i+0x182>
 8004b64:	4615      	mov	r5, r2
 8004b66:	e7bb      	b.n	8004ae0 <_printf_i+0x130>
 8004b68:	682b      	ldr	r3, [r5, #0]
 8004b6a:	6826      	ldr	r6, [r4, #0]
 8004b6c:	6961      	ldr	r1, [r4, #20]
 8004b6e:	1d18      	adds	r0, r3, #4
 8004b70:	6028      	str	r0, [r5, #0]
 8004b72:	0635      	lsls	r5, r6, #24
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	d501      	bpl.n	8004b7c <_printf_i+0x1cc>
 8004b78:	6019      	str	r1, [r3, #0]
 8004b7a:	e002      	b.n	8004b82 <_printf_i+0x1d2>
 8004b7c:	0670      	lsls	r0, r6, #25
 8004b7e:	d5fb      	bpl.n	8004b78 <_printf_i+0x1c8>
 8004b80:	8019      	strh	r1, [r3, #0]
 8004b82:	2300      	movs	r3, #0
 8004b84:	6123      	str	r3, [r4, #16]
 8004b86:	4615      	mov	r5, r2
 8004b88:	e7ba      	b.n	8004b00 <_printf_i+0x150>
 8004b8a:	682b      	ldr	r3, [r5, #0]
 8004b8c:	1d1a      	adds	r2, r3, #4
 8004b8e:	602a      	str	r2, [r5, #0]
 8004b90:	681d      	ldr	r5, [r3, #0]
 8004b92:	6862      	ldr	r2, [r4, #4]
 8004b94:	2100      	movs	r1, #0
 8004b96:	4628      	mov	r0, r5
 8004b98:	f7fb fb52 	bl	8000240 <memchr>
 8004b9c:	b108      	cbz	r0, 8004ba2 <_printf_i+0x1f2>
 8004b9e:	1b40      	subs	r0, r0, r5
 8004ba0:	6060      	str	r0, [r4, #4]
 8004ba2:	6863      	ldr	r3, [r4, #4]
 8004ba4:	6123      	str	r3, [r4, #16]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bac:	e7a8      	b.n	8004b00 <_printf_i+0x150>
 8004bae:	6923      	ldr	r3, [r4, #16]
 8004bb0:	462a      	mov	r2, r5
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	4640      	mov	r0, r8
 8004bb6:	47d0      	blx	sl
 8004bb8:	3001      	adds	r0, #1
 8004bba:	d0ab      	beq.n	8004b14 <_printf_i+0x164>
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	079b      	lsls	r3, r3, #30
 8004bc0:	d413      	bmi.n	8004bea <_printf_i+0x23a>
 8004bc2:	68e0      	ldr	r0, [r4, #12]
 8004bc4:	9b03      	ldr	r3, [sp, #12]
 8004bc6:	4298      	cmp	r0, r3
 8004bc8:	bfb8      	it	lt
 8004bca:	4618      	movlt	r0, r3
 8004bcc:	e7a4      	b.n	8004b18 <_printf_i+0x168>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	4632      	mov	r2, r6
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	4640      	mov	r0, r8
 8004bd6:	47d0      	blx	sl
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d09b      	beq.n	8004b14 <_printf_i+0x164>
 8004bdc:	3501      	adds	r5, #1
 8004bde:	68e3      	ldr	r3, [r4, #12]
 8004be0:	9903      	ldr	r1, [sp, #12]
 8004be2:	1a5b      	subs	r3, r3, r1
 8004be4:	42ab      	cmp	r3, r5
 8004be6:	dcf2      	bgt.n	8004bce <_printf_i+0x21e>
 8004be8:	e7eb      	b.n	8004bc2 <_printf_i+0x212>
 8004bea:	2500      	movs	r5, #0
 8004bec:	f104 0619 	add.w	r6, r4, #25
 8004bf0:	e7f5      	b.n	8004bde <_printf_i+0x22e>
 8004bf2:	bf00      	nop
 8004bf4:	08004f51 	.word	0x08004f51
 8004bf8:	08004f62 	.word	0x08004f62

08004bfc <memcpy>:
 8004bfc:	440a      	add	r2, r1
 8004bfe:	4291      	cmp	r1, r2
 8004c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c04:	d100      	bne.n	8004c08 <memcpy+0xc>
 8004c06:	4770      	bx	lr
 8004c08:	b510      	push	{r4, lr}
 8004c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c12:	4291      	cmp	r1, r2
 8004c14:	d1f9      	bne.n	8004c0a <memcpy+0xe>
 8004c16:	bd10      	pop	{r4, pc}

08004c18 <memmove>:
 8004c18:	4288      	cmp	r0, r1
 8004c1a:	b510      	push	{r4, lr}
 8004c1c:	eb01 0402 	add.w	r4, r1, r2
 8004c20:	d902      	bls.n	8004c28 <memmove+0x10>
 8004c22:	4284      	cmp	r4, r0
 8004c24:	4623      	mov	r3, r4
 8004c26:	d807      	bhi.n	8004c38 <memmove+0x20>
 8004c28:	1e43      	subs	r3, r0, #1
 8004c2a:	42a1      	cmp	r1, r4
 8004c2c:	d008      	beq.n	8004c40 <memmove+0x28>
 8004c2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c36:	e7f8      	b.n	8004c2a <memmove+0x12>
 8004c38:	4402      	add	r2, r0
 8004c3a:	4601      	mov	r1, r0
 8004c3c:	428a      	cmp	r2, r1
 8004c3e:	d100      	bne.n	8004c42 <memmove+0x2a>
 8004c40:	bd10      	pop	{r4, pc}
 8004c42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c4a:	e7f7      	b.n	8004c3c <memmove+0x24>

08004c4c <_free_r>:
 8004c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c4e:	2900      	cmp	r1, #0
 8004c50:	d044      	beq.n	8004cdc <_free_r+0x90>
 8004c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c56:	9001      	str	r0, [sp, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f1a1 0404 	sub.w	r4, r1, #4
 8004c5e:	bfb8      	it	lt
 8004c60:	18e4      	addlt	r4, r4, r3
 8004c62:	f000 f913 	bl	8004e8c <__malloc_lock>
 8004c66:	4a1e      	ldr	r2, [pc, #120]	; (8004ce0 <_free_r+0x94>)
 8004c68:	9801      	ldr	r0, [sp, #4]
 8004c6a:	6813      	ldr	r3, [r2, #0]
 8004c6c:	b933      	cbnz	r3, 8004c7c <_free_r+0x30>
 8004c6e:	6063      	str	r3, [r4, #4]
 8004c70:	6014      	str	r4, [r2, #0]
 8004c72:	b003      	add	sp, #12
 8004c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c78:	f000 b90e 	b.w	8004e98 <__malloc_unlock>
 8004c7c:	42a3      	cmp	r3, r4
 8004c7e:	d908      	bls.n	8004c92 <_free_r+0x46>
 8004c80:	6825      	ldr	r5, [r4, #0]
 8004c82:	1961      	adds	r1, r4, r5
 8004c84:	428b      	cmp	r3, r1
 8004c86:	bf01      	itttt	eq
 8004c88:	6819      	ldreq	r1, [r3, #0]
 8004c8a:	685b      	ldreq	r3, [r3, #4]
 8004c8c:	1949      	addeq	r1, r1, r5
 8004c8e:	6021      	streq	r1, [r4, #0]
 8004c90:	e7ed      	b.n	8004c6e <_free_r+0x22>
 8004c92:	461a      	mov	r2, r3
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	b10b      	cbz	r3, 8004c9c <_free_r+0x50>
 8004c98:	42a3      	cmp	r3, r4
 8004c9a:	d9fa      	bls.n	8004c92 <_free_r+0x46>
 8004c9c:	6811      	ldr	r1, [r2, #0]
 8004c9e:	1855      	adds	r5, r2, r1
 8004ca0:	42a5      	cmp	r5, r4
 8004ca2:	d10b      	bne.n	8004cbc <_free_r+0x70>
 8004ca4:	6824      	ldr	r4, [r4, #0]
 8004ca6:	4421      	add	r1, r4
 8004ca8:	1854      	adds	r4, r2, r1
 8004caa:	42a3      	cmp	r3, r4
 8004cac:	6011      	str	r1, [r2, #0]
 8004cae:	d1e0      	bne.n	8004c72 <_free_r+0x26>
 8004cb0:	681c      	ldr	r4, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	6053      	str	r3, [r2, #4]
 8004cb6:	4421      	add	r1, r4
 8004cb8:	6011      	str	r1, [r2, #0]
 8004cba:	e7da      	b.n	8004c72 <_free_r+0x26>
 8004cbc:	d902      	bls.n	8004cc4 <_free_r+0x78>
 8004cbe:	230c      	movs	r3, #12
 8004cc0:	6003      	str	r3, [r0, #0]
 8004cc2:	e7d6      	b.n	8004c72 <_free_r+0x26>
 8004cc4:	6825      	ldr	r5, [r4, #0]
 8004cc6:	1961      	adds	r1, r4, r5
 8004cc8:	428b      	cmp	r3, r1
 8004cca:	bf04      	itt	eq
 8004ccc:	6819      	ldreq	r1, [r3, #0]
 8004cce:	685b      	ldreq	r3, [r3, #4]
 8004cd0:	6063      	str	r3, [r4, #4]
 8004cd2:	bf04      	itt	eq
 8004cd4:	1949      	addeq	r1, r1, r5
 8004cd6:	6021      	streq	r1, [r4, #0]
 8004cd8:	6054      	str	r4, [r2, #4]
 8004cda:	e7ca      	b.n	8004c72 <_free_r+0x26>
 8004cdc:	b003      	add	sp, #12
 8004cde:	bd30      	pop	{r4, r5, pc}
 8004ce0:	20000180 	.word	0x20000180

08004ce4 <sbrk_aligned>:
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	4e0e      	ldr	r6, [pc, #56]	; (8004d20 <sbrk_aligned+0x3c>)
 8004ce8:	460c      	mov	r4, r1
 8004cea:	6831      	ldr	r1, [r6, #0]
 8004cec:	4605      	mov	r5, r0
 8004cee:	b911      	cbnz	r1, 8004cf6 <sbrk_aligned+0x12>
 8004cf0:	f000 f8bc 	bl	8004e6c <_sbrk_r>
 8004cf4:	6030      	str	r0, [r6, #0]
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	f000 f8b7 	bl	8004e6c <_sbrk_r>
 8004cfe:	1c43      	adds	r3, r0, #1
 8004d00:	d00a      	beq.n	8004d18 <sbrk_aligned+0x34>
 8004d02:	1cc4      	adds	r4, r0, #3
 8004d04:	f024 0403 	bic.w	r4, r4, #3
 8004d08:	42a0      	cmp	r0, r4
 8004d0a:	d007      	beq.n	8004d1c <sbrk_aligned+0x38>
 8004d0c:	1a21      	subs	r1, r4, r0
 8004d0e:	4628      	mov	r0, r5
 8004d10:	f000 f8ac 	bl	8004e6c <_sbrk_r>
 8004d14:	3001      	adds	r0, #1
 8004d16:	d101      	bne.n	8004d1c <sbrk_aligned+0x38>
 8004d18:	f04f 34ff 	mov.w	r4, #4294967295
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
 8004d20:	20000184 	.word	0x20000184

08004d24 <_malloc_r>:
 8004d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d28:	1ccd      	adds	r5, r1, #3
 8004d2a:	f025 0503 	bic.w	r5, r5, #3
 8004d2e:	3508      	adds	r5, #8
 8004d30:	2d0c      	cmp	r5, #12
 8004d32:	bf38      	it	cc
 8004d34:	250c      	movcc	r5, #12
 8004d36:	2d00      	cmp	r5, #0
 8004d38:	4607      	mov	r7, r0
 8004d3a:	db01      	blt.n	8004d40 <_malloc_r+0x1c>
 8004d3c:	42a9      	cmp	r1, r5
 8004d3e:	d905      	bls.n	8004d4c <_malloc_r+0x28>
 8004d40:	230c      	movs	r3, #12
 8004d42:	603b      	str	r3, [r7, #0]
 8004d44:	2600      	movs	r6, #0
 8004d46:	4630      	mov	r0, r6
 8004d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d4c:	4e2e      	ldr	r6, [pc, #184]	; (8004e08 <_malloc_r+0xe4>)
 8004d4e:	f000 f89d 	bl	8004e8c <__malloc_lock>
 8004d52:	6833      	ldr	r3, [r6, #0]
 8004d54:	461c      	mov	r4, r3
 8004d56:	bb34      	cbnz	r4, 8004da6 <_malloc_r+0x82>
 8004d58:	4629      	mov	r1, r5
 8004d5a:	4638      	mov	r0, r7
 8004d5c:	f7ff ffc2 	bl	8004ce4 <sbrk_aligned>
 8004d60:	1c43      	adds	r3, r0, #1
 8004d62:	4604      	mov	r4, r0
 8004d64:	d14d      	bne.n	8004e02 <_malloc_r+0xde>
 8004d66:	6834      	ldr	r4, [r6, #0]
 8004d68:	4626      	mov	r6, r4
 8004d6a:	2e00      	cmp	r6, #0
 8004d6c:	d140      	bne.n	8004df0 <_malloc_r+0xcc>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	4631      	mov	r1, r6
 8004d72:	4638      	mov	r0, r7
 8004d74:	eb04 0803 	add.w	r8, r4, r3
 8004d78:	f000 f878 	bl	8004e6c <_sbrk_r>
 8004d7c:	4580      	cmp	r8, r0
 8004d7e:	d13a      	bne.n	8004df6 <_malloc_r+0xd2>
 8004d80:	6821      	ldr	r1, [r4, #0]
 8004d82:	3503      	adds	r5, #3
 8004d84:	1a6d      	subs	r5, r5, r1
 8004d86:	f025 0503 	bic.w	r5, r5, #3
 8004d8a:	3508      	adds	r5, #8
 8004d8c:	2d0c      	cmp	r5, #12
 8004d8e:	bf38      	it	cc
 8004d90:	250c      	movcc	r5, #12
 8004d92:	4629      	mov	r1, r5
 8004d94:	4638      	mov	r0, r7
 8004d96:	f7ff ffa5 	bl	8004ce4 <sbrk_aligned>
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	d02b      	beq.n	8004df6 <_malloc_r+0xd2>
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	442b      	add	r3, r5
 8004da2:	6023      	str	r3, [r4, #0]
 8004da4:	e00e      	b.n	8004dc4 <_malloc_r+0xa0>
 8004da6:	6822      	ldr	r2, [r4, #0]
 8004da8:	1b52      	subs	r2, r2, r5
 8004daa:	d41e      	bmi.n	8004dea <_malloc_r+0xc6>
 8004dac:	2a0b      	cmp	r2, #11
 8004dae:	d916      	bls.n	8004dde <_malloc_r+0xba>
 8004db0:	1961      	adds	r1, r4, r5
 8004db2:	42a3      	cmp	r3, r4
 8004db4:	6025      	str	r5, [r4, #0]
 8004db6:	bf18      	it	ne
 8004db8:	6059      	strne	r1, [r3, #4]
 8004dba:	6863      	ldr	r3, [r4, #4]
 8004dbc:	bf08      	it	eq
 8004dbe:	6031      	streq	r1, [r6, #0]
 8004dc0:	5162      	str	r2, [r4, r5]
 8004dc2:	604b      	str	r3, [r1, #4]
 8004dc4:	4638      	mov	r0, r7
 8004dc6:	f104 060b 	add.w	r6, r4, #11
 8004dca:	f000 f865 	bl	8004e98 <__malloc_unlock>
 8004dce:	f026 0607 	bic.w	r6, r6, #7
 8004dd2:	1d23      	adds	r3, r4, #4
 8004dd4:	1af2      	subs	r2, r6, r3
 8004dd6:	d0b6      	beq.n	8004d46 <_malloc_r+0x22>
 8004dd8:	1b9b      	subs	r3, r3, r6
 8004dda:	50a3      	str	r3, [r4, r2]
 8004ddc:	e7b3      	b.n	8004d46 <_malloc_r+0x22>
 8004dde:	6862      	ldr	r2, [r4, #4]
 8004de0:	42a3      	cmp	r3, r4
 8004de2:	bf0c      	ite	eq
 8004de4:	6032      	streq	r2, [r6, #0]
 8004de6:	605a      	strne	r2, [r3, #4]
 8004de8:	e7ec      	b.n	8004dc4 <_malloc_r+0xa0>
 8004dea:	4623      	mov	r3, r4
 8004dec:	6864      	ldr	r4, [r4, #4]
 8004dee:	e7b2      	b.n	8004d56 <_malloc_r+0x32>
 8004df0:	4634      	mov	r4, r6
 8004df2:	6876      	ldr	r6, [r6, #4]
 8004df4:	e7b9      	b.n	8004d6a <_malloc_r+0x46>
 8004df6:	230c      	movs	r3, #12
 8004df8:	603b      	str	r3, [r7, #0]
 8004dfa:	4638      	mov	r0, r7
 8004dfc:	f000 f84c 	bl	8004e98 <__malloc_unlock>
 8004e00:	e7a1      	b.n	8004d46 <_malloc_r+0x22>
 8004e02:	6025      	str	r5, [r4, #0]
 8004e04:	e7de      	b.n	8004dc4 <_malloc_r+0xa0>
 8004e06:	bf00      	nop
 8004e08:	20000180 	.word	0x20000180

08004e0c <_realloc_r>:
 8004e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e10:	4680      	mov	r8, r0
 8004e12:	4614      	mov	r4, r2
 8004e14:	460e      	mov	r6, r1
 8004e16:	b921      	cbnz	r1, 8004e22 <_realloc_r+0x16>
 8004e18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	f7ff bf81 	b.w	8004d24 <_malloc_r>
 8004e22:	b92a      	cbnz	r2, 8004e30 <_realloc_r+0x24>
 8004e24:	f7ff ff12 	bl	8004c4c <_free_r>
 8004e28:	4625      	mov	r5, r4
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e30:	f000 f838 	bl	8004ea4 <_malloc_usable_size_r>
 8004e34:	4284      	cmp	r4, r0
 8004e36:	4607      	mov	r7, r0
 8004e38:	d802      	bhi.n	8004e40 <_realloc_r+0x34>
 8004e3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e3e:	d812      	bhi.n	8004e66 <_realloc_r+0x5a>
 8004e40:	4621      	mov	r1, r4
 8004e42:	4640      	mov	r0, r8
 8004e44:	f7ff ff6e 	bl	8004d24 <_malloc_r>
 8004e48:	4605      	mov	r5, r0
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d0ed      	beq.n	8004e2a <_realloc_r+0x1e>
 8004e4e:	42bc      	cmp	r4, r7
 8004e50:	4622      	mov	r2, r4
 8004e52:	4631      	mov	r1, r6
 8004e54:	bf28      	it	cs
 8004e56:	463a      	movcs	r2, r7
 8004e58:	f7ff fed0 	bl	8004bfc <memcpy>
 8004e5c:	4631      	mov	r1, r6
 8004e5e:	4640      	mov	r0, r8
 8004e60:	f7ff fef4 	bl	8004c4c <_free_r>
 8004e64:	e7e1      	b.n	8004e2a <_realloc_r+0x1e>
 8004e66:	4635      	mov	r5, r6
 8004e68:	e7df      	b.n	8004e2a <_realloc_r+0x1e>
	...

08004e6c <_sbrk_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	4d06      	ldr	r5, [pc, #24]	; (8004e88 <_sbrk_r+0x1c>)
 8004e70:	2300      	movs	r3, #0
 8004e72:	4604      	mov	r4, r0
 8004e74:	4608      	mov	r0, r1
 8004e76:	602b      	str	r3, [r5, #0]
 8004e78:	f7fb fe92 	bl	8000ba0 <_sbrk>
 8004e7c:	1c43      	adds	r3, r0, #1
 8004e7e:	d102      	bne.n	8004e86 <_sbrk_r+0x1a>
 8004e80:	682b      	ldr	r3, [r5, #0]
 8004e82:	b103      	cbz	r3, 8004e86 <_sbrk_r+0x1a>
 8004e84:	6023      	str	r3, [r4, #0]
 8004e86:	bd38      	pop	{r3, r4, r5, pc}
 8004e88:	20000188 	.word	0x20000188

08004e8c <__malloc_lock>:
 8004e8c:	4801      	ldr	r0, [pc, #4]	; (8004e94 <__malloc_lock+0x8>)
 8004e8e:	f000 b811 	b.w	8004eb4 <__retarget_lock_acquire_recursive>
 8004e92:	bf00      	nop
 8004e94:	2000018c 	.word	0x2000018c

08004e98 <__malloc_unlock>:
 8004e98:	4801      	ldr	r0, [pc, #4]	; (8004ea0 <__malloc_unlock+0x8>)
 8004e9a:	f000 b80c 	b.w	8004eb6 <__retarget_lock_release_recursive>
 8004e9e:	bf00      	nop
 8004ea0:	2000018c 	.word	0x2000018c

08004ea4 <_malloc_usable_size_r>:
 8004ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ea8:	1f18      	subs	r0, r3, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	bfbc      	itt	lt
 8004eae:	580b      	ldrlt	r3, [r1, r0]
 8004eb0:	18c0      	addlt	r0, r0, r3
 8004eb2:	4770      	bx	lr

08004eb4 <__retarget_lock_acquire_recursive>:
 8004eb4:	4770      	bx	lr

08004eb6 <__retarget_lock_release_recursive>:
 8004eb6:	4770      	bx	lr

08004eb8 <_init>:
 8004eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eba:	bf00      	nop
 8004ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ebe:	bc08      	pop	{r3}
 8004ec0:	469e      	mov	lr, r3
 8004ec2:	4770      	bx	lr

08004ec4 <_fini>:
 8004ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec6:	bf00      	nop
 8004ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eca:	bc08      	pop	{r3}
 8004ecc:	469e      	mov	lr, r3
 8004ece:	4770      	bx	lr
